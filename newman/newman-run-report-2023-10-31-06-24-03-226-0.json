{
  "collection": {
    "_": {
      "postman_id": "723ea9c3-0635-4605-b90c-d6d9e9835d8c",
      "exporter_id": "13852941",
      "collection_link": "https://galactic-astronaut-894425.postman.co/workspace/b6dafb4f-3507-4e58-a32d-dd31bf6ab148/collection/13852941-723ea9c3-0635-4605-b90c-d6d9e9835d8c?action=share&source=collection_link&creator=13852941"
    },
    "item": [
      {
        "id": "90407c19-d06c-4337-abb9-4dfc2fa17fc8",
        "name": "health_check",
        "request": {
          "url": {
            "path": [
              "health-check"
            ],
            "host": [
              "{{exp_url}}"
            ],
            "query": [],
            "variable": []
          },
          "method": "GET"
        },
        "response": [],
        "event": [
          {
            "listen": "test",
            "script": {
              "id": "b075fb8f-9483-4909-a4a4-cf6344c6642b",
              "type": "text/javascript",
              "exec": [
                "pm.test(\"Check the Status code 200\", function(){\r",
                "    pm.response.to.have.status(200);\r",
                "});\r",
                "\r",
                "var jsonData = pm.response.json();\r",
                "\r",
                "pm.test(\"Check the success code in body\", function(){\r",
                "    pm.expect(jsonData.success).to.eql(true);\r",
                "});\r",
                "\r",
                "pm.test(\"Check the Status code in body\", function(){\r",
                "    pm.expect(jsonData.status).to.eql(200);\r",
                "});\r",
                "\r",
                "pm.test(\"Check the message in body\", function(){\r",
                "    pm.expect(jsonData.message).to.eql(\"Notes API is Running\");\r",
                "});\r",
                "\r",
                "\r",
                ""
              ],
              "_lastExecutionId": "dcf22f24-f95a-4d61-981a-68f2474c0b1d"
            }
          },
          {
            "listen": "prerequest",
            "script": {
              "id": "15079d7d-2fc3-468b-b923-1fd697b2156e",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "a57965c9-dfeb-425b-a87b-14b41a981af7"
            }
          }
        ]
      },
      {
        "id": "d3b70abb-4c44-4d96-b946-e8ef2e19907f",
        "name": "RegisterUser",
        "request": {
          "url": {
            "path": [
              "users",
              "register"
            ],
            "host": [
              "{{exp_url}}"
            ],
            "query": [],
            "variable": []
          },
          "method": "POST",
          "body": {
            "mode": "raw",
            "raw": "{\r\n    \"name\":\"{{$randomFullName}}\",\r\n    \"email\":\"{{randomEmail}}\",\r\n    \"password\":\"{{$randomPassword}}\"\r\n}",
            "options": {
              "raw": {
                "language": "json"
              }
            }
          }
        },
        "response": [],
        "event": [
          {
            "listen": "test",
            "script": {
              "id": "4f0c3c3d-4171-4bea-b8a8-3fd567809f0d",
              "type": "text/javascript",
              "exec": [
                "var jsonData = pm.response.json();\r",
                "\r",
                "pm.test(\"Check the success msg is true in body?\", function(){\r",
                "    pm.expect(jsonData.success).to.eql(true);\r",
                "});\r",
                "\r",
                "pm.test(\"Check the body message\", function(){\r",
                "    pm.expect(jsonData.message).to.eql(\"User account created successfully\");\r",
                "});\r",
                "\r",
                "pm.test(\"Verify the values are not null\", function(){\r",
                "    pm.expect(jsonData.data.id, \"Id is not null\").to.not.be.null;\r",
                "    pm.expect(jsonData.data.name, \"name is not null\").to.not.be.null;\r",
                "    pm.expect(jsonData.data.email, \"email is not null\").to.not.be.null;\r",
                "});\r",
                "\r",
                "pm.test(\"response property matching an environment variable\", function(){\r",
                "    pm.expect(jsonData.name).to.eql(pm.environment.get(\"name\"));\r",
                "});\r",
                "\r",
                "pm.test(\"Check the response time\", function(){\r",
                "    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
                "});\r",
                "\r",
                "pm.environment.set(\"id\", jsonData.data.id);\r",
                "pm.environment.set(\"name\", jsonData.data.name);\r",
                "\r",
                "let password = JSON.parse(pm.request.body.raw).password;\r",
                "pm.environment.set('password', password);\r",
                "\r",
                "message = [\r",
                "    \"Access token is not valid or has expired, you will need to login\",\r",
                "    \"No authentication token specified in x-auth-token header\",\r",
                "    \"User name must be between 4 and 30 characters\",\r",
                "    \"Phone number should be between 8 and 20 digits\",\r",
                "    \"Unauthorized Request\",\r",
                "    \"Internal Error Server\",\r",
                "    \"Profile updated successful\",\r",
                "    \"User account created successfully\",\r",
                "    \"Not Found\",\r",
                "    \"Bad Request\",\r",
                "    \"An account already exists with the same email address\"\r",
                "];\r",
                "\r",
                "status = [400,401,404,409,500,200,201];\r",
                "\r",
                "if (jsonData.success === false) {\r",
                "    pm.test(`**** E R R O R ***** ${jsonData.message}`, function(){\r",
                "        pm.expect(jsonData.message).to.be.oneOf(message);\r",
                "    });\r",
                "\r",
                "    pm.test(`Check the multiple error status code ${jsonData.status}`, function(){\r",
                "        pm.expect(pm.response.code).to.be.oneOf(status);\r",
                "    });\r",
                "}\r",
                "else {\r",
                "    pm.test(`*** S U C C E S S *** ${jsonData.message}`, function(){\r",
                "        pm.expect(jsonData.message).to.be.oneOf(message);\r",
                "    });\r",
                "\r",
                "    pm.test(`Check the Status code ${jsonData.status}`, function(){\r",
                "        pm.expect(pm.response.code).to.be.oneOf(status);\r",
                "    });\r",
                "}"
              ],
              "_lastExecutionId": "2fbfcb58-035a-4d0d-afa2-7fc9d5239e13"
            }
          },
          {
            "listen": "prerequest",
            "script": {
              "id": "3483ef69-d6b6-4835-8746-973a3f7a159e",
              "type": "text/javascript",
              "exec": [
                "\r",
                "// // Define the incrementEmail function\r",
                "// function incrementEmail(email) {\r",
                "//     const match = email.match(/\\+a(\\d+)/);\r",
                "\r",
                "//     if (match) {\r",
                "//         const currentNumber = parseInt(match[1]);\r",
                "//         const nextNumber = currentNumber + 1;\r",
                "//         const incrementedEmail = email.replace(/\\+a\\d+/, `+a${nextNumber}`);\r",
                "//         return incrementedEmail;\r",
                "//     }\r",
                "\r",
                "//     return email;\r",
                "// }\r",
                "\r",
                "\r",
                "// const originalEmail = pm.environment.get(\"email\");\r",
                "\r",
                "\r",
                "// if (originalEmail) {\r",
                "//     // Use the incrementEmail function to get the incremented email\r",
                "//     const incrementedEmail = incrementEmail(originalEmail);\r",
                "\r",
                "//     // Set the incremented email back to the environment\r",
                "//     pm.environment.set(\"email\", incrementedEmail);\r",
                "\r",
                "//     console.log(\"OriginalEmail:\", originalEmail);\r",
                "//     console.log(\"IncrementedEmail:\", incrementedEmail);\r",
                "// } else {\r",
                "//     console.error(\"Email environment variable not found.\");\r",
                "// }\r",
                "\r",
                "// console.log(pm.environment.get(\"email\"));\r",
                "\r",
                "\r",
                "// -------------------------------------------------------------------\r",
                "// Define the base part of the email address\r",
                "const baseEmail = pm.environment.get(\"baseEmail\");\r",
                "\r",
                "// Generate a random number between min and max (inclusive)\r",
                "function getRandomNumber(min, max) {\r",
                "    return Math.floor(Math.random() * (max - min + 1)) + min;\r",
                "}\r",
                "\r",
                "// Generate a random sequence like +a151, +a152, +a153, and so on\r",
                "const randomSequence = `+a${getRandomNumber(1, 999)}`;\r",
                "\r",
                "// Combine the base and random sequence to create the random email address\r",
                "const randomEmail = `${baseEmail}${randomSequence}@gmail.com`;\r",
                "\r",
                "// Set the random email address as an environment variable for your request\r",
                "pm.environment.set('randomEmail', randomEmail);\r",
                "\r",
                "\r",
                ""
              ],
              "_lastExecutionId": "f0df73d6-9875-49de-aaed-2ffb46745ff0"
            }
          }
        ]
      },
      {
        "id": "1da8b1e7-3198-4c60-9c34-4a1e8b7e8b15",
        "name": "UserLogin",
        "request": {
          "url": {
            "path": [
              "users",
              "login"
            ],
            "host": [
              "{{exp_url}}"
            ],
            "query": [],
            "variable": []
          },
          "method": "POST",
          "body": {
            "mode": "raw",
            "raw": "{\r\n    \"email\":\"{{randomEmail}}\",\r\n    \"password\":\"{{password}}\"\r\n}",
            "options": {
              "raw": {
                "language": "json"
              }
            }
          }
        },
        "response": [],
        "event": [
          {
            "listen": "test",
            "script": {
              "id": "cc8daf67-c0f2-4843-9223-e47d8fe754ec",
              "type": "text/javascript",
              "exec": [
                "pm.test(\"Check the status code is 200\", function(){\r",
                "    pm.response.to.have.status(200);\r",
                "});\r",
                "\r",
                "var jsonData = pm.response.json();\r",
                "\r",
                "pm.test(\"Check the success message\", function(){\r",
                "    pm.expect(jsonData.success).to.eql(true);\r",
                "});\r",
                "\r",
                "pm.test(\"Check the body message\", function(){\r",
                "    pm.expect(jsonData.message).to.eql(\"Login successful\");\r",
                "});\r",
                "\r",
                "pm.environment.set(\"exp_token\", jsonData.data.token);\r",
                "\r",
                "pm.test(\"Verify the values are not null\", function(){\r",
                "    pm.expect(jsonData.data.id, \"Id is not a null\").to.not.be.null;\r",
                "    pm.expect(jsonData.data.name, \"name is not a null\").to.not.be.null;\r",
                "    pm.expect(jsonData.data.email, \"email is not a null\").to.not.be.null;\r",
                "    pm.expect(jsonData.data.token, \"token is not a null\").to.not.be.null;\r",
                "});\r",
                "\r",
                "pm.test(\"Check the response time\", function(){\r",
                "    pm.expect(pm.response.responseTime).to.below(2000);\r",
                "});\r",
                "\r",
                ""
              ],
              "_lastExecutionId": "4a906166-3676-408b-bc6f-6c09add962a5"
            }
          },
          {
            "listen": "prerequest",
            "script": {
              "id": "98d0941e-d03e-4ab7-a7b0-84826ad7708a",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "2f4a3493-6a43-4652-8c74-458390f9ecf9"
            }
          }
        ]
      },
      {
        "id": "3f4af57c-fb9c-4a3c-8c2b-0f9b603b0679",
        "name": "GetProfile",
        "request": {
          "url": {
            "path": [
              "users",
              "profile"
            ],
            "host": [
              "{{exp_url}}"
            ],
            "query": [],
            "variable": []
          },
          "method": "GET",
          "auth": {
            "type": "apikey",
            "apikey": [
              {
                "type": "string",
                "value": "{{exp_token}}",
                "key": "value"
              },
              {
                "type": "string",
                "value": "header",
                "key": "in"
              },
              {
                "type": "string",
                "value": "x-auth-token",
                "key": "key"
              }
            ]
          }
        },
        "response": [],
        "event": [
          {
            "listen": "test",
            "script": {
              "id": "56a6399c-71a1-414d-b876-9262a848415f",
              "type": "text/javascript",
              "exec": [
                "\r",
                "let jsonData = pm.response.json();\r",
                "message = [\r",
                "    \"Access token is not valid or has expired, you will need to login\",\r",
                "    \"No authentication token specified in x-auth-token header\",\r",
                "    \"Bad Request\",\r",
                "    \"Unauthorized Request\",\r",
                "    \"Internal Error Server\",\r",
                "    \"Profile successful\",\r",
                "    \"Not Found\"\r",
                "]\r",
                "\r",
                "status = [400,401,404,500,200,201]\r",
                "\r",
                "if (jsonData.success === false) {\r",
                "    pm.test(`**** E R R O R ***** ${jsonData.message}`, function(){\r",
                "        // pm.expect(jsonData.message).to.eql(\"No authentication token specified in x-auth-token header\");\r",
                "        pm.expect(jsonData.message).to.be.oneOf(message);\r",
                "    });\r",
                "\r",
                "    pm.test(`Check the multiple error status code ${jsonData.status}`, function(){\r",
                "        pm.expect(pm.response.code).to.be.oneOf(status);\r",
                "    });\r",
                "\r",
                "\r",
                "}\r",
                "else {\r",
                "    pm.test(`*** S U C C E S S *** ${jsonData.message}`, function(){\r",
                "        // pm.expect(jsonData.message).to.equal(\"Profile successful\");\r",
                "        pm.expect(jsonData.message).to.be.oneOf(message);\r",
                "    });\r",
                "\r",
                "    pm.test(\"Check the response time\", function(){\r",
                "    pm.expect(pm.response.responseTime).to.be.below(6000);\r",
                "    });\r",
                "\r",
                "    pm.test(`Check the Status code ${jsonData.status}`, function(){\r",
                "        pm.expect(pm.response.code).to.be.oneOf(status);\r",
                "    });\r",
                "\r",
                "    pm.test(\"Body matches multiple string\",function(){\r",
                "    pm.expect(pm.response.text()).to.include(\"id\");\r",
                "    pm.expect(pm.response.text()).to.include(\"name\");\r",
                "    pm.expect(pm.response.text()).to.include(\"email\");\r",
                "});\r",
                "\r",
                "}\r",
                "\r",
                ""
              ],
              "_lastExecutionId": "55d3989d-79a3-476b-87c3-020290feeec2"
            }
          },
          {
            "listen": "prerequest",
            "script": {
              "id": "5b6727ff-6213-4350-874c-dbaeeb0d0d03",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "5e07b22a-eb37-441e-b764-c112f7fde3f7"
            }
          }
        ],
        "protocolProfileBehavior": {
          "disabledSystemHeaders": {}
        }
      },
      {
        "id": "ee9d7916-0288-4df6-a4d2-05ed9c78c4f1",
        "name": "UpdateProfile",
        "request": {
          "url": {
            "path": [
              "users",
              "profile"
            ],
            "host": [
              "{{exp_url}}"
            ],
            "query": [],
            "variable": []
          },
          "method": "PATCH",
          "body": {
            "mode": "raw",
            "raw": "{\r\n    \"name\":\"{{name}}\",\r\n    \"phone\":\"{{random_number}}\",\r\n    \"company\":\"{{$randomCompanyName}}\"\r\n}",
            "options": {
              "raw": {
                "language": "json"
              }
            }
          },
          "auth": {
            "type": "apikey",
            "apikey": [
              {
                "type": "string",
                "value": "{{exp_token}}",
                "key": "value"
              },
              {
                "type": "string",
                "value": "header",
                "key": "in"
              },
              {
                "type": "string",
                "value": "x-auth-token",
                "key": "key"
              }
            ]
          }
        },
        "response": [],
        "event": [
          {
            "listen": "test",
            "script": {
              "id": "6ab7e932-eb9b-4edc-9edc-b8d42e4162ad",
              "type": "text/javascript",
              "exec": [
                "let jsonData = pm.response.json();\r",
                "message = [\r",
                "    \"Access token is not valid or has expired, you will need to login\",\r",
                "    \"No authentication token specified in x-auth-token header\",\r",
                "    \"User name must be between 4 and 30 characters\",\r",
                "    \"Phone number should be between 8 and 20 digits\",\r",
                "    \"Unauthorized Request\",\r",
                "    \"Internal Error Server\",\r",
                "    \"Profile updated successful\",\r",
                "    \"Not Found\",\r",
                "    \"Bad Request\"\r",
                "]\r",
                "\r",
                "status = [400,401,404,500,200,201]\r",
                "// var jsonData1 = pm.response.json();\r",
                "// pm.environment.set(\"phoneNumber\", jsonData1.data.phone);\r",
                "\r",
                "if (jsonData.success === false) {\r",
                "    pm.test(`**** E R R O R ***** ${jsonData.message}`, function(){\r",
                "        // pm.expect(jsonData.message).to.eql(\"No authentication token specified in x-auth-token header\");\r",
                "        pm.expect(jsonData.message).to.be.oneOf(message);\r",
                "    });\r",
                "\r",
                "    pm.test(`Check the multiple error status code ${jsonData.status}`, function(){\r",
                "        pm.expect(pm.response.code).to.be.oneOf(status);\r",
                "    });\r",
                "\r",
                "\r",
                "}\r",
                "else {\r",
                "    pm.test(`*** S U C C E S S *** ${jsonData.message}`, function(){\r",
                "        // pm.expect(jsonData.message).to.equal(\"Profile successful\");\r",
                "        pm.expect(jsonData.message).to.be.oneOf(message);\r",
                "    });\r",
                "\r",
                "    pm.test(\"Check the response time\", function(){\r",
                "    pm.expect(pm.response.responseTime).to.be.below(6000);\r",
                "    });\r",
                "\r",
                "    pm.test(`Check the Status code ${jsonData.status}`, function(){\r",
                "        pm.expect(pm.response.code).to.be.oneOf(status);\r",
                "    });\r",
                "\r",
                "    pm.test(\"Body matches multiple string\",function(){\r",
                "    pm.expect(pm.response.text()).to.include(\"id\");\r",
                "    pm.expect(pm.response.text()).to.include(\"name\");\r",
                "    pm.expect(pm.response.text()).to.include(\"email\");\r",
                "});\r",
                "\r",
                "}\r",
                "\r",
                ""
              ],
              "_lastExecutionId": "bf535ed4-ea27-433b-95ed-0405878d634c"
            }
          },
          {
            "listen": "prerequest",
            "script": {
              "id": "1dd9ce14-2fea-48d5-b628-446e36acb961",
              "type": "text/javascript",
              "exec": [
                "pm.environment.set(\"random_number\",_.random(1000000000,9999999999));\r",
                "\r",
                "\r",
                ""
              ],
              "_lastExecutionId": "81adb337-1695-4fed-b265-391f869dd222"
            }
          }
        ]
      },
      {
        "id": "03c5b9ed-2c86-4338-932a-d93a799c2d8d",
        "name": "ForgotPassword",
        "request": {
          "url": {
            "path": [
              "users",
              "forgot-password"
            ],
            "host": [
              "{{exp_url}}"
            ],
            "query": [],
            "variable": []
          },
          "method": "POST",
          "body": {
            "mode": "raw",
            "raw": "{\r\n    \"email\":\"{{randomEmail}}\"\r\n}",
            "options": {
              "raw": {
                "language": "json"
              }
            }
          },
          "auth": {
            "type": "apikey",
            "apikey": [
              {
                "type": "string",
                "value": "{{exp_token}}",
                "key": "value"
              },
              {
                "type": "string",
                "value": "header",
                "key": "in"
              },
              {
                "type": "string",
                "value": "x-auth-token",
                "key": "key"
              }
            ]
          }
        },
        "response": [],
        "event": [
          {
            "listen": "test",
            "script": {
              "id": "72c44319-e1e0-49ac-91f7-f3f0cd439f93",
              "type": "text/javascript",
              "exec": [
                "let jsonData = pm.response.json();\r",
                "let jsonEmail = JSON.parse(pm.request.body.raw).email;\r",
                "\r",
                "message = [\r",
                "    \"Access token is not valid or has expired, you will need to login\",\r",
                "    \"No authentication token specified in x-auth-token header\",\r",
                "    \"Unauthorized Request\",\r",
                "    \"Internal Error Server\",\r",
                "    `Password reset link successfully sent to ${pm.environment.get(\"email\")}. Please verify by clicking on the given link`,\r",
                "    \"Not Found\",\r",
                "    \"Bad Request\",\r",
                "    \"A valid email address is required\"\r",
                "]\r",
                "\r",
                "status = [400,401,404,500,200,201]\r",
                "// var jsonData1 = pm.response.json();\r",
                "// pm.environment.set(\"phoneNumber\", jsonData1.data.phone);\r",
                "\r",
                "if (jsonData.success === false) {\r",
                "    pm.test(`**** E R R O R ***** ${jsonData.message}`, function(){\r",
                "        // pm.expect(jsonData.message).to.eql(\"No authentication token specified in x-auth-token header\");\r",
                "        pm.expect(jsonData.message).to.be.oneOf(message);\r",
                "    });\r",
                "\r",
                "    pm.test(`Check the multiple error status code ${jsonData.status}`, function(){\r",
                "        pm.expect(pm.response.code).to.be.oneOf(status);\r",
                "    });\r",
                "\r",
                "\r",
                "}\r",
                "else {\r",
                "    pm.test(`*** S U C C E S S *** ${jsonData.message}`, function(){\r",
                "        // pm.expect(jsonData.message).to.equal(\"Profile successful\");\r",
                "        pm.expect(jsonData.message).to.be.oneOf(message);\r",
                "    });\r",
                "\r",
                "    pm.test(\"Check the response time\", function(){\r",
                "    pm.expect(pm.response.responseTime).to.be.below(6000);\r",
                "    });\r",
                "\r",
                "    pm.test(`Check the Status code ${jsonData.status}`, function(){\r",
                "        pm.expect(pm.response.code).to.be.oneOf(status);\r",
                "    });\r",
                "\r",
                "    pm.test(\"Body matches multiple string\",function(){\r",
                "    pm.expect(pm.response.text()).to.include(\"message\");\r",
                "});\r",
                "\r",
                "}\r",
                "\r",
                ""
              ],
              "_lastExecutionId": "a3803636-b917-4048-8873-b62ae1f022d6"
            }
          },
          {
            "listen": "prerequest",
            "script": {
              "id": "6236deb0-9668-46d8-bb96-97cc86eeb0fa",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "148f797c-8661-4a45-97c4-527fe81fce77"
            }
          }
        ]
      },
      {
        "id": "eea8198b-64d4-43e4-b554-aefaae2516cd",
        "name": "GetEmailMessage",
        "request": {
          "url": {
            "protocol": "https",
            "path": [
              "gmail",
              "v1",
              "users",
              "{{user_email_id}}",
              "messages",
              ""
            ],
            "host": [
              "gmail",
              "googleapis",
              "com"
            ],
            "query": [],
            "variable": []
          },
          "method": "GET",
          "auth": {
            "type": "oauth2",
            "oauth2": [
              {
                "type": "boolean",
                "value": false,
                "key": "useBrowser"
              },
              {
                "type": "string",
                "value": "{{Scope}}",
                "key": "scope"
              },
              {
                "type": "string",
                "value": "{{Client_Secret}}",
                "key": "clientSecret"
              },
              {
                "type": "string",
                "value": "{{Client_ID}}",
                "key": "clientId"
              },
              {
                "type": "string",
                "value": "{{Access_Token_URL}}",
                "key": "accessTokenUrl"
              },
              {
                "type": "string",
                "value": "{{Auth_URL}}",
                "key": "authUrl"
              },
              {
                "type": "string",
                "value": "{{Callback_URL}}",
                "key": "redirect_uri"
              },
              {
                "type": "string",
                "value": "authorization_code",
                "key": "grant_type"
              },
              {
                "type": "string",
                "value": "email_token",
                "key": "tokenName"
              },
              {
                "type": "string",
                "value": "header",
                "key": "addTokenTo"
              }
            ]
          }
        },
        "response": [],
        "event": [
          {
            "listen": "test",
            "script": {
              "id": "705020a4-73b3-44df-86ff-a5984e094d10",
              "type": "text/javascript",
              "exec": [
                "var jsonData = pm.response.json();\r",
                "pm.environment.set(\"messageId\", jsonData.messages[0].id);\r",
                "\r",
                ""
              ],
              "_lastExecutionId": "eeef6f2d-f5fd-4a00-be9c-25555c6fa5bc"
            }
          },
          {
            "listen": "prerequest",
            "script": {
              "id": "cdf7837a-853f-442c-8e05-996129213a95",
              "type": "text/javascript",
              "exec": [
                "var newRefreshToken = pm.environment.get(\"access_token\");\r",
                "\r",
                "pm.environment.set(\"refresh_token\", newRefreshToken);"
              ],
              "_lastExecutionId": "94790536-1730-42ee-886b-f2872e8a5fee"
            }
          }
        ]
      },
      {
        "id": "f053ddc8-a8a6-4796-a23f-c89737b34582",
        "name": "GetMessageByID",
        "request": {
          "url": {
            "protocol": "https",
            "path": [
              "gmail",
              "v1",
              "users",
              "{{user_email_id}}",
              "messages",
              "{{messageId}}"
            ],
            "host": [
              "gmail",
              "googleapis",
              "com"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "Content-Type",
              "value": "multipart/mixed"
            }
          ],
          "method": "GET",
          "auth": {
            "type": "bearer",
            "bearer": [
              {
                "type": "string",
                "value": "{{access_token}}",
                "key": "token"
              }
            ]
          }
        },
        "response": [],
        "event": [
          {
            "listen": "test",
            "script": {
              "id": "d94857cd-ae23-40c6-ae38-5f7aaca3e833",
              "type": "text/javascript",
              "exec": [
                "\r",
                "const response = pm.response.json();\r",
                "\r",
                "pm.environment.set(\"message_Body\", response.payload.body.data);\r",
                "\r",
                "var atob = require('atob');\r",
                "\r",
                "\r",
                "var base64Data = pm.environment.get(\"message_Body\");\r",
                "var decodedData = atob(base64Data);\r",
                "postman.setEnvironmentVariable(\"rest_password\",decodedData);\r",
                "var tokenRegex = /Reset password link: (https:\\/\\/practice\\.expandtesting\\.com\\/notes\\/app\\/reset-password\\/([\\w\\d]+))[^ ]+/;\r",
                "var tokenMatch = decodedData.match(tokenRegex);\r",
                "if (tokenMatch && tokenMatch[2]) {\r",
                "    var resetPasswordToken = tokenMatch[2];\r",
                "    \r",
                "    // Set the reset password link as a Postman environment variable for later use\r",
                "    pm.environment.set(\"resetPasswordToken\", resetPasswordToken);\r",
                "    \r",
                "    // Log the reset password link\r",
                "    console.log(\"Reset Password Token: \" + resetPasswordToken);\r",
                "} else {\r",
                "    console.log(\"Reset password token not found in the response.\");\r",
                "}\r",
                "console.log(decodedData);\r",
                "\r",
                "\r",
                "\r",
                "\r",
                "\r",
                "\r",
                "\r",
                "\r",
                "\r",
                "\r",
                "\r",
                ""
              ],
              "_lastExecutionId": "4816be40-7f3a-489e-b23c-14c698a58ddc"
            }
          },
          {
            "listen": "prerequest",
            "script": {
              "id": "8349aa22-c992-434e-9e35-e5fc8ef4a245",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "e5ddbcb0-9830-4e57-9232-851987938e7d"
            }
          }
        ]
      },
      {
        "id": "8d884a10-0abd-48de-9b8a-47bfc7ff13cd",
        "name": "verify-reset-password-token",
        "request": {
          "url": {
            "path": [
              "users",
              "verify-reset-password-token"
            ],
            "host": [
              "{{exp_url}}"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "accept",
              "value": "application/json"
            },
            {
              "key": "Content-Type",
              "value": "application/x-www-form-urlencoded"
            }
          ],
          "method": "POST",
          "body": {
            "mode": "urlencoded",
            "urlencoded": [
              {
                "key": "token",
                "value": "{{resetPasswordToken}}"
              }
            ]
          }
        },
        "response": [],
        "event": [
          {
            "listen": "test",
            "script": {
              "id": "799e647c-efdd-4528-bf8c-ec8d1e1a4b55",
              "type": "text/javascript",
              "exec": [
                "let jsonData = pm.response.json();\r",
                "\r",
                "message = [\r",
                "    \"The provided password reset token is valid\",\r",
                "    \"Bad Request\",\r",
                "    \"Internal Error Server\",\r",
                "    \"The provided password reset token is invalid or has expired\"\r",
                "]\r",
                "\r",
                "status = [200,400,401,500]\r",
                "\r",
                "if (jsonData.success === false) {\r",
                "    pm.test(`**** E R R O R ***** ${jsonData.message}`, function(){\r",
                "        // pm.expect(jsonData.message).to.eql(\"No authentication token specified in x-auth-token header\");\r",
                "        pm.expect(jsonData.message).to.be.oneOf(message);\r",
                "    });\r",
                "\r",
                "    pm.test(`Check the multiple error status code ${jsonData.status}`, function(){\r",
                "        pm.expect(pm.response.code).to.be.oneOf(status);\r",
                "    });\r",
                "\r",
                "\r",
                "}\r",
                "else {\r",
                "    pm.test(`*** S U C C E S S *** ${jsonData.message}`, function(){\r",
                "        // pm.expect(jsonData.message).to.equal(\"Profile successful\");\r",
                "        pm.expect(jsonData.message).to.be.oneOf(message);\r",
                "    });\r",
                "\r",
                "    pm.test(\"Check the response time\", function(){\r",
                "    pm.expect(pm.response.responseTime).to.be.below(6000);\r",
                "    });\r",
                "\r",
                "    pm.test(`Check the Status code ${jsonData.status}`, function(){\r",
                "        pm.expect(pm.response.code).to.be.oneOf(status);\r",
                "    });\r",
                "\r",
                "    pm.test(\"Body matches multiple string\",function(){\r",
                "    pm.expect(pm.response.text()).to.include(\"message\");\r",
                "});\r",
                "\r",
                "}\r",
                "\r",
                ""
              ],
              "_lastExecutionId": "c1d6d515-485d-45cb-ab2b-15662e3830f7"
            }
          },
          {
            "listen": "prerequest",
            "script": {
              "id": "46fb041c-0790-4ccb-a117-d6dcbb44aa15",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "48a955fd-f392-4b00-9034-2a273d9fea6d"
            }
          }
        ]
      },
      {
        "id": "740f7a4b-9db6-4b38-a333-0ad712a2b2a2",
        "name": "reset-password",
        "request": {
          "url": {
            "protocol": "https",
            "path": [
              "notes",
              "api",
              "users",
              "reset-password"
            ],
            "host": [
              "practice",
              "expandtesting",
              "com"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "accept",
              "value": "application/json"
            }
          ],
          "method": "POST",
          "body": {
            "mode": "raw",
            "raw": "{\r\n    \"token\":\"{{resetPasswordToken}}\",\r\n    \"newPassword\":\"{{$randomPassword}}\"\r\n}",
            "options": {
              "raw": {
                "language": "json"
              }
            }
          }
        },
        "response": [],
        "event": [
          {
            "listen": "test",
            "script": {
              "id": "7cdc8324-5612-42e4-8f85-49037412238b",
              "type": "text/javascript",
              "exec": [
                "let jsonData = pm.response.json();\r",
                "\r",
                "let newPassword = JSON.parse(pm.request.body.raw).newPassword;\r",
                "pm.environment.set('password', newPassword);\r",
                "\r",
                "\r",
                "message = [\r",
                "    \"The password has been successfully reset\",\r",
                "    \"Token must be between 64 characters\",\r",
                "    \"Bad Request\",\r",
                "    \"The password was successfully updated\",\r",
                "    \"Internal Error Server\",\r",
                "    \"New password must be between 6 and 30 characters\",\r",
                "    \"The password reset token is invalid or has expired\"\r",
                "]\r",
                "\r",
                "status = [200,400,401,500]\r",
                "\r",
                "if (jsonData.success === false) {\r",
                "    pm.test(`**** E R R O R ***** ${jsonData.message}`, function(){\r",
                "        // pm.expect(jsonData.message).to.eql(\"No authentication token specified in x-auth-token header\");\r",
                "        pm.expect(jsonData.message).to.be.oneOf(message);\r",
                "    });\r",
                "\r",
                "    pm.test(`Check the multiple error status code ${jsonData.status}`, function(){\r",
                "        pm.expect(pm.response.code).to.be.oneOf(status);\r",
                "    });\r",
                "\r",
                "\r",
                "}\r",
                "else {\r",
                "    pm.test(`*** S U C C E S S *** ${jsonData.message}`, function(){\r",
                "        // pm.expect(jsonData.message).to.equal(\"Profile successful\");\r",
                "        pm.expect(jsonData.message).to.be.oneOf(message);\r",
                "    });\r",
                "\r",
                "    pm.test(\"Check the response time\", function(){\r",
                "    pm.expect(pm.response.responseTime).to.be.below(6000);\r",
                "    });\r",
                "\r",
                "    pm.test(`Check the Status code ${jsonData.status}`, function(){\r",
                "        pm.expect(pm.response.code).to.be.oneOf(status);\r",
                "    });\r",
                "\r",
                "    pm.test(\"Body matches multiple string\",function(){\r",
                "    pm.expect(pm.response.text()).to.include(\"message\");\r",
                "});\r",
                "\r",
                "}\r",
                "\r",
                "\r",
                ""
              ],
              "_lastExecutionId": "5d234639-2098-4725-8401-094ce8fa851b"
            }
          },
          {
            "listen": "prerequest",
            "script": {
              "id": "1268a1ec-48a3-4dfd-8fc8-3c14d0fa7f28",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "3e5db1d1-0c8c-4a29-8797-f14a01a4bedc"
            }
          }
        ]
      },
      {
        "id": "93821c3b-e028-4eda-a749-05d87d7e6a94",
        "name": "change-password",
        "request": {
          "url": {
            "path": [
              "users",
              "change-password"
            ],
            "host": [
              "{{exp_url}}"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "accept",
              "value": "application/json"
            }
          ],
          "method": "POST",
          "body": {
            "mode": "raw",
            "raw": "{\r\n    \"currentPassword\":\"{{password}}\",\r\n    \"newPassword\":\"{{$randomPassword}}\"\r\n}",
            "options": {
              "raw": {
                "language": "json"
              }
            }
          },
          "auth": {
            "type": "apikey",
            "apikey": [
              {
                "type": "string",
                "value": "{{exp_token}}",
                "key": "value"
              },
              {
                "type": "string",
                "value": "x-auth-token",
                "key": "key"
              }
            ]
          }
        },
        "response": [],
        "event": [
          {
            "listen": "test",
            "script": {
              "id": "3eca22f1-7d4a-4832-8b68-54badb876aa6",
              "type": "text/javascript",
              "exec": [
                "pm.environment.get(\"password\");\r",
                "\r",
                "let newPassword = JSON.parse(pm.request.body.raw).newPassword;\r",
                "pm.environment.set('password', newPassword);\r",
                "\r",
                "let jsonData = pm.response.json();\r",
                "message = [\r",
                "    \"The password has been successfully reset\",\r",
                "    \"Token must be between 64 characters\",\r",
                "    \"Bad Request\",\r",
                "    \"The password was successfully updated\",\r",
                "    \"Internal Error Server\",\r",
                "    \"New password must be between 6 and 30 characters\",\r",
                "    \"The password reset token is invalid or has expired\"\r",
                "]\r",
                "\r",
                "status = [200,400,401,500]\r",
                "\r",
                "if (jsonData.success === false) {\r",
                "    pm.test(`**** E R R O R ***** ${jsonData.message}`, function(){\r",
                "        // pm.expect(jsonData.message).to.eql(\"No authentication token specified in x-auth-token header\");\r",
                "        pm.expect(jsonData.message).to.be.oneOf(message);\r",
                "    });\r",
                "\r",
                "    pm.test(`Check the multiple error status code ${jsonData.status}`, function(){\r",
                "        pm.expect(pm.response.code).to.be.oneOf(status);\r",
                "    });\r",
                "\r",
                "\r",
                "}\r",
                "else {\r",
                "    pm.test(`*** S U C C E S S *** ${jsonData.message}`, function(){\r",
                "        // pm.expect(jsonData.message).to.equal(\"Profile successful\");\r",
                "        pm.expect(jsonData.message).to.be.oneOf(message);\r",
                "    });\r",
                "\r",
                "    pm.test(\"Check the response time\", function(){\r",
                "    pm.expect(pm.response.responseTime).to.be.below(6000);\r",
                "    });\r",
                "\r",
                "    pm.test(`Check the Status code ${jsonData.status}`, function(){\r",
                "        pm.expect(pm.response.code).to.be.oneOf(status);\r",
                "    });\r",
                "\r",
                "    pm.test(\"Body matches multiple string\",function(){\r",
                "    pm.expect(pm.response.text()).to.include(\"message\");\r",
                "});\r",
                "\r",
                "}\r",
                ""
              ],
              "_lastExecutionId": "64be3638-86ca-4200-b966-7a137b03eb2e"
            }
          },
          {
            "listen": "prerequest",
            "script": {
              "id": "aa473681-09fc-4673-a2fe-7012cf4e42e9",
              "type": "text/javascript",
              "exec": [
                "console.log(pm.environment.get(\"password\"));\r",
                "\r",
                "\r",
                "\r",
                ""
              ],
              "_lastExecutionId": "fb6fc291-ccb6-46ad-9bb8-0e4bf2cf736d"
            }
          }
        ]
      },
      {
        "id": "f4c8e78d-5700-43a2-8e20-cb1a0de26ce9",
        "name": "UserLogout",
        "request": {
          "url": {
            "path": [
              "users",
              "logout"
            ],
            "host": [
              "{{exp_url}}"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "accept",
              "value": "application/json"
            }
          ],
          "method": "DELETE",
          "auth": {
            "type": "apikey",
            "apikey": [
              {
                "type": "string",
                "value": "{{exp_token}}",
                "key": "value"
              },
              {
                "type": "string",
                "value": "x-auth-token",
                "key": "key"
              }
            ]
          }
        },
        "response": [],
        "event": [
          {
            "listen": "test",
            "script": {
              "id": "43a38bb6-0063-463b-9a7b-ea0674d209fe",
              "type": "text/javascript",
              "exec": [
                "let jsonData = pm.response.json();\r",
                "message = [\r",
                "    \"User has been successfully logged out\",\r",
                "    \"Token must be between 64 characters\",\r",
                "    \"Bad Request\",\r",
                "    \"Access token is not valid or has expired, you will need to login\",\r",
                "    \"No authentication token specified in x-auth-token header\",\r",
                "    \"Internal Error Server\",\r",
                "    \"Successful Request\",\r",
                "    \"Unauthorized Request\"\r",
                "]\r",
                "\r",
                "status = [200,400,401,500]\r",
                "\r",
                "if (jsonData.success === false) {\r",
                "    pm.test(`**** E R R O R ***** ${jsonData.message}`, function(){\r",
                "        // pm.expect(jsonData.message).to.eql(\"No authentication token specified in x-auth-token header\");\r",
                "        pm.expect(jsonData.message).to.be.oneOf(message);\r",
                "    });\r",
                "\r",
                "    pm.test(`Check the multiple error status code ${jsonData.status}`, function(){\r",
                "        pm.expect(pm.response.code).to.be.oneOf(status);\r",
                "    });\r",
                "\r",
                "\r",
                "}\r",
                "else {\r",
                "    pm.test(`*** S U C C E S S *** ${jsonData.message}`, function(){\r",
                "        // pm.expect(jsonData.message).to.equal(\"Profile successful\");\r",
                "        pm.expect(jsonData.message).to.be.oneOf(message);\r",
                "    });\r",
                "\r",
                "    pm.test(\"Check the response time\", function(){\r",
                "    pm.expect(pm.response.responseTime).to.be.below(6000);\r",
                "    });\r",
                "\r",
                "    pm.test(`Check the Status code ${jsonData.status}`, function(){\r",
                "        pm.expect(pm.response.code).to.be.oneOf(status);\r",
                "    });\r",
                "\r",
                "    pm.test(\"Body matches multiple string\",function(){\r",
                "    pm.expect(pm.response.text()).to.include(\"message\");\r",
                "});\r",
                "\r",
                "}\r",
                "\r",
                "postman.setNextRequest(null);"
              ],
              "_lastExecutionId": "c7d982d4-a8dc-460f-a106-6e0c01643e82"
            }
          },
          {
            "listen": "prerequest",
            "script": {
              "id": "e8ae662d-a080-4bf5-a817-754113435b5e",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "0b0d404e-4117-40fc-9982-a95619506052"
            }
          }
        ]
      }
    ],
    "event": [
      {
        "listen": "prerequest",
        "script": {
          "id": "3380df96-f386-44be-9dc8-eb145a929d13",
          "type": "text/javascript",
          "exec": [
            ""
          ],
          "_lastExecutionId": "c2613397-fddf-4d46-99b6-9ffc9166e0a8"
        }
      },
      {
        "listen": "test",
        "script": {
          "id": "18c4e0bb-9477-4e5f-b627-d550e666c7d3",
          "type": "text/javascript",
          "exec": [
            ""
          ],
          "_lastExecutionId": "78225eb1-cbe5-408b-978b-a1bf2d2b693c"
        }
      }
    ],
    "variable": [
      {
        "type": "string",
        "value": "https://practice.expandtesting.com/notes/api",
        "key": "exp_url"
      }
    ],
    "info": {
      "_postman_id": "723ea9c3-0635-4605-b90c-d6d9e9835d8c",
      "name": "expandtesting",
      "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
    }
  },
  "environment": {
    "_": {
      "postman_variable_scope": "environment",
      "postman_exported_at": "2023-10-31T05:38:44.275Z",
      "postman_exported_using": "Postman/10.19.10"
    },
    "id": "7a60a716-0240-4894-ab00-a77f9dce2b4a",
    "name": "Exp_Environment",
    "values": [
      {
        "type": "any",
        "value": "https://practice.expandtesting.com/notes/api",
        "key": "exp_url"
      },
      {
        "type": "any",
        "value": "",
        "key": "id"
      },
      {
        "type": "any",
        "value": "",
        "key": "name"
      },
      {
        "type": "any",
        "value": "v8cIXvw3VhH98Ib",
        "key": "password"
      },
      {
        "type": "any",
        "value": "",
        "key": "exp_token"
      },
      {
        "type": "any",
        "value": 2902252969,
        "key": "random_number"
      },
      {
        "type": "any",
        "value": "qat2613@gmail.com",
        "key": "user_email_id"
      },
      {
        "type": "any",
        "value": "",
        "key": "messageId"
      },
      {
        "type": "any",
        "value": "",
        "key": "message_Body"
      },
      {
        "type": "any",
        "value": "",
        "key": "rest_password"
      },
      {
        "type": "any",
        "value": "",
        "key": "resetPasswordToken"
      },
      {
        "type": "any",
        "value": "qat2613",
        "key": "baseEmail"
      },
      {
        "type": "any",
        "value": "qat2613+a53@gmail.com",
        "key": "randomEmail"
      },
      {
        "type": "any",
        "value": "https://oauth.pstmn.io/v1/callback",
        "key": "Callback_URL"
      },
      {
        "type": "any",
        "value": "https://accounts.google.com/o/oauth2/v2/auth",
        "key": "Auth_URL"
      },
      {
        "type": "any",
        "value": "https://oauth2.googleapis.com/token",
        "key": "Access_Token_URL"
      },
      {
        "type": "any",
        "value": "847150036765-hcs8r97s5ogh6kna315brgaap0p508p5.apps.googleusercontent.com",
        "key": "Client_ID"
      },
      {
        "type": "any",
        "value": "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",
        "key": "Client_Secret"
      },
      {
        "type": "any",
        "value": "https://www.googleapis.com/auth/gmail.readonly",
        "key": "Scope"
      },
      {
        "type": "any",
        "value": "ya29.a0AfB_byChUW-OZ1mtHZhS01JxKQO3zmkxB6m-POy7LWPIIT_gaQLtuaptNeiq4xPm9QbifftVAK6bW6OMjEwQOFo5q5aVZ-pdX4OUWu2AIhAGdrks2l80T-EnpZ5oiNNi_KnpVLGbURGxIbiV86MGnuJTxloCyqwSj08aCgYKAQESARESFQGOcNnCMXWZVvxV4VP-ecdPZ4tFLA0170",
        "key": "access_token"
      },
      {
        "type": "any",
        "value": "ya29.a0AfB_byChUW-OZ1mtHZhS01JxKQO3zmkxB6m-POy7LWPIIT_gaQLtuaptNeiq4xPm9QbifftVAK6bW6OMjEwQOFo5q5aVZ-pdX4OUWu2AIhAGdrks2l80T-EnpZ5oiNNi_KnpVLGbURGxIbiV86MGnuJTxloCyqwSj08aCgYKAQESARESFQGOcNnCMXWZVvxV4VP-ecdPZ4tFLA0170",
        "key": "refresh_token"
      },
      {
        "type": "any",
        "value": "",
        "key": "expiry_time"
      }
    ]
  },
  "globals": {
    "id": "2468d9ad-27a2-474b-9846-21f000ce5847",
    "values": []
  },
  "run": {
    "stats": {
      "iterations": {
        "total": 1,
        "pending": 0,
        "failed": 0
      },
      "items": {
        "total": 12,
        "pending": 0,
        "failed": 0
      },
      "scripts": {
        "total": 48,
        "pending": 0,
        "failed": 4
      },
      "prerequests": {
        "total": 12,
        "pending": 0,
        "failed": 0
      },
      "requests": {
        "total": 12,
        "pending": 0,
        "failed": 0
      },
      "tests": {
        "total": 12,
        "pending": 0,
        "failed": 0
      },
      "assertions": {
        "total": 28,
        "pending": 0,
        "failed": 9
      },
      "testScripts": {
        "total": 24,
        "pending": 0,
        "failed": 4
      },
      "prerequestScripts": {
        "total": 24,
        "pending": 0,
        "failed": 0
      }
    },
    "timings": {
      "responseAverage": 436.8333333333333,
      "responseMin": 248,
      "responseMax": 1579,
      "responseSd": 350.2876992162617,
      "dnsAverage": 671.4152285882404,
      "dnsMin": 79.38819992542267,
      "dnsMax": 770.0864000320435,
      "dnsSd": 241.69402235999578,
      "firstByteAverage": 323.0042083164056,
      "firstByteMin": 239.77509999275208,
      "firstByteMax": 546.5602999925613,
      "firstByteSd": 79.26930251881691,
      "started": 1698733436780,
      "completed": 1698733443201
    },
    "executions": [
      {
        "cursor": {
          "position": 0,
          "iteration": 0,
          "length": 12,
          "cycles": 1,
          "empty": false,
          "eof": false,
          "bof": true,
          "cr": false,
          "ref": "21a15edd-5c1f-4550-b8ca-64a9c08d9216",
          "httpRequestId": "2107fc1f-7d02-40bc-a177-4ef5541a603f"
        },
        "item": {
          "id": "90407c19-d06c-4337-abb9-4dfc2fa17fc8",
          "name": "health_check",
          "request": {
            "url": {
              "path": [
                "health-check"
              ],
              "host": [
                "{{exp_url}}"
              ],
              "query": [],
              "variable": []
            },
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "b075fb8f-9483-4909-a4a4-cf6344c6642b",
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Check the Status code 200\", function(){\r",
                  "    pm.response.to.have.status(200);\r",
                  "});\r",
                  "\r",
                  "var jsonData = pm.response.json();\r",
                  "\r",
                  "pm.test(\"Check the success code in body\", function(){\r",
                  "    pm.expect(jsonData.success).to.eql(true);\r",
                  "});\r",
                  "\r",
                  "pm.test(\"Check the Status code in body\", function(){\r",
                  "    pm.expect(jsonData.status).to.eql(200);\r",
                  "});\r",
                  "\r",
                  "pm.test(\"Check the message in body\", function(){\r",
                  "    pm.expect(jsonData.message).to.eql(\"Notes API is Running\");\r",
                  "});\r",
                  "\r",
                  "\r",
                  ""
                ],
                "_lastExecutionId": "dcf22f24-f95a-4d61-981a-68f2474c0b1d"
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "id": "15079d7d-2fc3-468b-b923-1fd697b2156e",
                "type": "text/javascript",
                "exec": [
                  ""
                ],
                "_lastExecutionId": "a57965c9-dfeb-425b-a87b-14b41a981af7"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "https",
            "path": [
              "notes",
              "api",
              "health-check"
            ],
            "host": [
              "practice",
              "expandtesting",
              "com"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.33.0",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "01442c79-dd56-4f93-be4e-4c79127de198",
              "system": true
            },
            {
              "key": "Host",
              "value": "practice.expandtesting.com",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            }
          ],
          "method": "GET"
        },
        "response": {
          "id": "e955230e-f852-46ba-aa68-8c70251edbd6",
          "status": "OK",
          "code": 200,
          "header": [
            {
              "key": "access-control-allow-origin",
              "value": "*"
            },
            {
              "key": "access-control-allow-credentials",
              "value": "true"
            },
            {
              "key": "access-control-allow-methods",
              "value": "GET, POST, PUT, DELETE, PATCH"
            },
            {
              "key": "access-control-allow-headers",
              "value": "Origin, X-Requested-With, Authorization, Content-Type, Accept, X-Auth-Token"
            },
            {
              "key": "content-type",
              "value": "application/json; charset=utf-8"
            },
            {
              "key": "content-encoding",
              "value": "br"
            },
            {
              "key": "etag",
              "value": "W/\"3e-FE3Nfnlblw5s6WOK197+HBp7tw8\""
            },
            {
              "key": "set-cookie",
              "value": "express:sess=eyJmbGFzaCI6e319; path=/; httponly"
            },
            {
              "key": "set-cookie",
              "value": "express:sess.sig=tdt42nQZiQvICqmrvHQ1_16fHk0; path=/; httponly"
            },
            {
              "key": "date",
              "value": "Tue, 31 Oct 2023 06:23:02 GMT"
            },
            {
              "key": "connection",
              "value": "keep-alive"
            },
            {
              "key": "keep-alive",
              "value": "timeout=5"
            },
            {
              "key": "transfer-encoding",
              "value": "chunked"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              115,
              117,
              99,
              99,
              101,
              115,
              115,
              34,
              58,
              116,
              114,
              117,
              101,
              44,
              34,
              115,
              116,
              97,
              116,
              117,
              115,
              34,
              58,
              50,
              48,
              48,
              44,
              34,
              109,
              101,
              115,
              115,
              97,
              103,
              101,
              34,
              58,
              34,
              78,
              111,
              116,
              101,
              115,
              32,
              65,
              80,
              73,
              32,
              105,
              115,
              32,
              82,
              117,
              110,
              110,
              105,
              110,
              103,
              34,
              125
            ]
          },
          "cookie": [],
          "responseTime": 1579,
          "responseSize": 62
        },
        "id": "90407c19-d06c-4337-abb9-4dfc2fa17fc8",
        "assertions": [
          {
            "assertion": "Check the Status code 200",
            "skipped": false
          },
          {
            "assertion": "Check the success code in body",
            "skipped": false
          },
          {
            "assertion": "Check the Status code in body",
            "skipped": false
          },
          {
            "assertion": "Check the message in body",
            "skipped": false
          }
        ]
      },
      {
        "cursor": {
          "ref": "f70c212e-54ae-4c80-84bf-295f5d6f7f9a",
          "length": 12,
          "cycles": 1,
          "position": 1,
          "iteration": 0,
          "httpRequestId": "862306ad-af84-4909-a2fc-5aa4c4d48310"
        },
        "item": {
          "id": "d3b70abb-4c44-4d96-b946-e8ef2e19907f",
          "name": "RegisterUser",
          "request": {
            "url": {
              "path": [
                "users",
                "register"
              ],
              "host": [
                "{{exp_url}}"
              ],
              "query": [],
              "variable": []
            },
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\r\n    \"name\":\"{{$randomFullName}}\",\r\n    \"email\":\"{{randomEmail}}\",\r\n    \"password\":\"{{$randomPassword}}\"\r\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "4f0c3c3d-4171-4bea-b8a8-3fd567809f0d",
                "type": "text/javascript",
                "exec": [
                  "var jsonData = pm.response.json();\r",
                  "\r",
                  "pm.test(\"Check the success msg is true in body?\", function(){\r",
                  "    pm.expect(jsonData.success).to.eql(true);\r",
                  "});\r",
                  "\r",
                  "pm.test(\"Check the body message\", function(){\r",
                  "    pm.expect(jsonData.message).to.eql(\"User account created successfully\");\r",
                  "});\r",
                  "\r",
                  "pm.test(\"Verify the values are not null\", function(){\r",
                  "    pm.expect(jsonData.data.id, \"Id is not null\").to.not.be.null;\r",
                  "    pm.expect(jsonData.data.name, \"name is not null\").to.not.be.null;\r",
                  "    pm.expect(jsonData.data.email, \"email is not null\").to.not.be.null;\r",
                  "});\r",
                  "\r",
                  "pm.test(\"response property matching an environment variable\", function(){\r",
                  "    pm.expect(jsonData.name).to.eql(pm.environment.get(\"name\"));\r",
                  "});\r",
                  "\r",
                  "pm.test(\"Check the response time\", function(){\r",
                  "    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
                  "});\r",
                  "\r",
                  "pm.environment.set(\"id\", jsonData.data.id);\r",
                  "pm.environment.set(\"name\", jsonData.data.name);\r",
                  "\r",
                  "let password = JSON.parse(pm.request.body.raw).password;\r",
                  "pm.environment.set('password', password);\r",
                  "\r",
                  "message = [\r",
                  "    \"Access token is not valid or has expired, you will need to login\",\r",
                  "    \"No authentication token specified in x-auth-token header\",\r",
                  "    \"User name must be between 4 and 30 characters\",\r",
                  "    \"Phone number should be between 8 and 20 digits\",\r",
                  "    \"Unauthorized Request\",\r",
                  "    \"Internal Error Server\",\r",
                  "    \"Profile updated successful\",\r",
                  "    \"User account created successfully\",\r",
                  "    \"Not Found\",\r",
                  "    \"Bad Request\",\r",
                  "    \"An account already exists with the same email address\"\r",
                  "];\r",
                  "\r",
                  "status = [400,401,404,409,500,200,201];\r",
                  "\r",
                  "if (jsonData.success === false) {\r",
                  "    pm.test(`**** E R R O R ***** ${jsonData.message}`, function(){\r",
                  "        pm.expect(jsonData.message).to.be.oneOf(message);\r",
                  "    });\r",
                  "\r",
                  "    pm.test(`Check the multiple error status code ${jsonData.status}`, function(){\r",
                  "        pm.expect(pm.response.code).to.be.oneOf(status);\r",
                  "    });\r",
                  "}\r",
                  "else {\r",
                  "    pm.test(`*** S U C C E S S *** ${jsonData.message}`, function(){\r",
                  "        pm.expect(jsonData.message).to.be.oneOf(message);\r",
                  "    });\r",
                  "\r",
                  "    pm.test(`Check the Status code ${jsonData.status}`, function(){\r",
                  "        pm.expect(pm.response.code).to.be.oneOf(status);\r",
                  "    });\r",
                  "}"
                ],
                "_lastExecutionId": "2fbfcb58-035a-4d0d-afa2-7fc9d5239e13"
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "id": "3483ef69-d6b6-4835-8746-973a3f7a159e",
                "type": "text/javascript",
                "exec": [
                  "\r",
                  "// // Define the incrementEmail function\r",
                  "// function incrementEmail(email) {\r",
                  "//     const match = email.match(/\\+a(\\d+)/);\r",
                  "\r",
                  "//     if (match) {\r",
                  "//         const currentNumber = parseInt(match[1]);\r",
                  "//         const nextNumber = currentNumber + 1;\r",
                  "//         const incrementedEmail = email.replace(/\\+a\\d+/, `+a${nextNumber}`);\r",
                  "//         return incrementedEmail;\r",
                  "//     }\r",
                  "\r",
                  "//     return email;\r",
                  "// }\r",
                  "\r",
                  "\r",
                  "// const originalEmail = pm.environment.get(\"email\");\r",
                  "\r",
                  "\r",
                  "// if (originalEmail) {\r",
                  "//     // Use the incrementEmail function to get the incremented email\r",
                  "//     const incrementedEmail = incrementEmail(originalEmail);\r",
                  "\r",
                  "//     // Set the incremented email back to the environment\r",
                  "//     pm.environment.set(\"email\", incrementedEmail);\r",
                  "\r",
                  "//     console.log(\"OriginalEmail:\", originalEmail);\r",
                  "//     console.log(\"IncrementedEmail:\", incrementedEmail);\r",
                  "// } else {\r",
                  "//     console.error(\"Email environment variable not found.\");\r",
                  "// }\r",
                  "\r",
                  "// console.log(pm.environment.get(\"email\"));\r",
                  "\r",
                  "\r",
                  "// -------------------------------------------------------------------\r",
                  "// Define the base part of the email address\r",
                  "const baseEmail = pm.environment.get(\"baseEmail\");\r",
                  "\r",
                  "// Generate a random number between min and max (inclusive)\r",
                  "function getRandomNumber(min, max) {\r",
                  "    return Math.floor(Math.random() * (max - min + 1)) + min;\r",
                  "}\r",
                  "\r",
                  "// Generate a random sequence like +a151, +a152, +a153, and so on\r",
                  "const randomSequence = `+a${getRandomNumber(1, 999)}`;\r",
                  "\r",
                  "// Combine the base and random sequence to create the random email address\r",
                  "const randomEmail = `${baseEmail}${randomSequence}@gmail.com`;\r",
                  "\r",
                  "// Set the random email address as an environment variable for your request\r",
                  "pm.environment.set('randomEmail', randomEmail);\r",
                  "\r",
                  "\r",
                  ""
                ],
                "_lastExecutionId": "f0df73d6-9875-49de-aaed-2ffb46745ff0"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "https",
            "path": [
              "notes",
              "api",
              "users",
              "register"
            ],
            "host": [
              "practice",
              "expandtesting",
              "com"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "Content-Type",
              "value": "application/json",
              "system": true
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.33.0",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "9e8a8e29-4d65-4347-8195-4f95bc710d03",
              "system": true
            },
            {
              "key": "Host",
              "value": "practice.expandtesting.com",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            },
            {
              "key": "Content-Length",
              "value": "107",
              "system": true
            },
            {
              "key": "Cookie",
              "value": "express:sess=eyJmbGFzaCI6e319; express:sess.sig=tdt42nQZiQvICqmrvHQ1_16fHk0",
              "system": true
            }
          ],
          "method": "POST",
          "body": {
            "mode": "raw",
            "raw": "{\r\n    \"name\":\"Howard Wunsch I\",\r\n    \"email\":\"qat2613+a53@gmail.com\",\r\n    \"password\":\"td0liWDUxRGT6NQ\"\r\n}",
            "options": {
              "raw": {
                "language": "json"
              }
            }
          }
        },
        "response": {
          "id": "8a4b7889-655d-47e4-a8a2-b0808cd2491b",
          "status": "Conflict",
          "code": 409,
          "header": [
            {
              "key": "access-control-allow-origin",
              "value": "*"
            },
            {
              "key": "access-control-allow-credentials",
              "value": "true"
            },
            {
              "key": "access-control-allow-methods",
              "value": "GET, POST, PUT, DELETE, PATCH"
            },
            {
              "key": "access-control-allow-headers",
              "value": "Origin, X-Requested-With, Authorization, Content-Type, Accept, X-Auth-Token"
            },
            {
              "key": "content-type",
              "value": "application/json; charset=utf-8"
            },
            {
              "key": "content-encoding",
              "value": "br"
            },
            {
              "key": "etag",
              "value": "W/\"60-1FDx49viOvdCVw+AmA0rzVYpPoA\""
            },
            {
              "key": "date",
              "value": "Tue, 31 Oct 2023 06:23:03 GMT"
            },
            {
              "key": "connection",
              "value": "keep-alive"
            },
            {
              "key": "keep-alive",
              "value": "timeout=5"
            },
            {
              "key": "transfer-encoding",
              "value": "chunked"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              115,
              117,
              99,
              99,
              101,
              115,
              115,
              34,
              58,
              102,
              97,
              108,
              115,
              101,
              44,
              34,
              115,
              116,
              97,
              116,
              117,
              115,
              34,
              58,
              52,
              48,
              57,
              44,
              34,
              109,
              101,
              115,
              115,
              97,
              103,
              101,
              34,
              58,
              34,
              65,
              110,
              32,
              97,
              99,
              99,
              111,
              117,
              110,
              116,
              32,
              97,
              108,
              114,
              101,
              97,
              100,
              121,
              32,
              101,
              120,
              105,
              115,
              116,
              115,
              32,
              119,
              105,
              116,
              104,
              32,
              116,
              104,
              101,
              32,
              115,
              97,
              109,
              101,
              32,
              101,
              109,
              97,
              105,
              108,
              32,
              97,
              100,
              100,
              114,
              101,
              115,
              115,
              34,
              125
            ]
          },
          "cookie": [],
          "responseTime": 334,
          "responseSize": 96
        },
        "id": "d3b70abb-4c44-4d96-b946-e8ef2e19907f",
        "assertions": [
          {
            "assertion": "Check the success msg is true in body?",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "Check the success msg is true in body?",
              "message": "expected false to deeply equal true",
              "stack": "AssertionError: expected false to deeply equal true\n   at Object.eval sandbox-script.js:1:2)"
            }
          },
          {
            "assertion": "Check the body message",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "Check the body message",
              "message": "expected 'An account already exists with the sa…' to deeply equal 'User account created successfully'",
              "stack": "AssertionError: expected 'An account already exists with the sa…' to deeply equal 'User account created successfully'\n   at Object.eval sandbox-script.js:2:2)"
            }
          },
          {
            "assertion": "Verify the values are not null",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 2,
              "test": "Verify the values are not null",
              "message": "Cannot read properties of undefined (reading 'id')",
              "stack": "TypeError: Cannot read properties of undefined (reading 'id')\n   at Object.eval sandbox-script.js:3:2)"
            }
          },
          {
            "assertion": "response property matching an environment variable",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 3,
              "test": "response property matching an environment variable",
              "message": "expected undefined to deeply equal ''",
              "stack": "AssertionError: expected undefined to deeply equal ''\n   at Object.eval sandbox-script.js:4:2)"
            }
          },
          {
            "assertion": "Check the response time",
            "skipped": false
          }
        ],
        "testScript": [
          {
            "error": {
              "type": "Error",
              "name": "TypeError",
              "message": "Cannot read properties of undefined (reading 'id')",
              "checksum": "7968b7e0e6adfbc32cfd96627c083201",
              "id": "a0809002-50dc-476f-b224-ca591d1bf9de",
              "timestamp": 1698733438935,
              "stacktrace": []
            }
          }
        ]
      },
      {
        "cursor": {
          "ref": "8c680752-290f-4c38-ace4-856b0bd8cb56",
          "length": 12,
          "cycles": 1,
          "position": 2,
          "iteration": 0,
          "httpRequestId": "69d50afe-4b0f-4382-9214-badf24234ead"
        },
        "item": {
          "id": "1da8b1e7-3198-4c60-9c34-4a1e8b7e8b15",
          "name": "UserLogin",
          "request": {
            "url": {
              "path": [
                "users",
                "login"
              ],
              "host": [
                "{{exp_url}}"
              ],
              "query": [],
              "variable": []
            },
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\r\n    \"email\":\"{{randomEmail}}\",\r\n    \"password\":\"{{password}}\"\r\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "cc8daf67-c0f2-4843-9223-e47d8fe754ec",
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Check the status code is 200\", function(){\r",
                  "    pm.response.to.have.status(200);\r",
                  "});\r",
                  "\r",
                  "var jsonData = pm.response.json();\r",
                  "\r",
                  "pm.test(\"Check the success message\", function(){\r",
                  "    pm.expect(jsonData.success).to.eql(true);\r",
                  "});\r",
                  "\r",
                  "pm.test(\"Check the body message\", function(){\r",
                  "    pm.expect(jsonData.message).to.eql(\"Login successful\");\r",
                  "});\r",
                  "\r",
                  "pm.environment.set(\"exp_token\", jsonData.data.token);\r",
                  "\r",
                  "pm.test(\"Verify the values are not null\", function(){\r",
                  "    pm.expect(jsonData.data.id, \"Id is not a null\").to.not.be.null;\r",
                  "    pm.expect(jsonData.data.name, \"name is not a null\").to.not.be.null;\r",
                  "    pm.expect(jsonData.data.email, \"email is not a null\").to.not.be.null;\r",
                  "    pm.expect(jsonData.data.token, \"token is not a null\").to.not.be.null;\r",
                  "});\r",
                  "\r",
                  "pm.test(\"Check the response time\", function(){\r",
                  "    pm.expect(pm.response.responseTime).to.below(2000);\r",
                  "});\r",
                  "\r",
                  ""
                ],
                "_lastExecutionId": "4a906166-3676-408b-bc6f-6c09add962a5"
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "id": "98d0941e-d03e-4ab7-a7b0-84826ad7708a",
                "type": "text/javascript",
                "exec": [
                  ""
                ],
                "_lastExecutionId": "2f4a3493-6a43-4652-8c74-458390f9ecf9"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "https",
            "path": [
              "notes",
              "api",
              "users",
              "login"
            ],
            "host": [
              "practice",
              "expandtesting",
              "com"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "Content-Type",
              "value": "application/json",
              "system": true
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.33.0",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "95cb3406-7946-4f36-a289-0153e8211d3b",
              "system": true
            },
            {
              "key": "Host",
              "value": "practice.expandtesting.com",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            },
            {
              "key": "Content-Length",
              "value": "61",
              "system": true
            },
            {
              "key": "Cookie",
              "value": "express:sess=eyJmbGFzaCI6e319; express:sess.sig=tdt42nQZiQvICqmrvHQ1_16fHk0",
              "system": true
            }
          ],
          "method": "POST",
          "body": {
            "mode": "raw",
            "raw": "{\r\n    \"email\":\"qat2613+a53@gmail.com\",\r\n    \"password\":\"\"\r\n}",
            "options": {
              "raw": {
                "language": "json"
              }
            }
          }
        },
        "response": {
          "id": "f347e9b9-312e-4b4c-b42d-3e56b660903c",
          "status": "Bad Request",
          "code": 400,
          "header": [
            {
              "key": "access-control-allow-origin",
              "value": "*"
            },
            {
              "key": "access-control-allow-credentials",
              "value": "true"
            },
            {
              "key": "access-control-allow-methods",
              "value": "GET, POST, PUT, DELETE, PATCH"
            },
            {
              "key": "access-control-allow-headers",
              "value": "Origin, X-Requested-With, Authorization, Content-Type, Accept, X-Auth-Token"
            },
            {
              "key": "content-type",
              "value": "application/json; charset=utf-8"
            },
            {
              "key": "content-encoding",
              "value": "br"
            },
            {
              "key": "etag",
              "value": "W/\"57-ga9Obemf7qKhR/hJ6piFBY3CIZ0\""
            },
            {
              "key": "date",
              "value": "Tue, 31 Oct 2023 06:23:03 GMT"
            },
            {
              "key": "connection",
              "value": "keep-alive"
            },
            {
              "key": "keep-alive",
              "value": "timeout=5"
            },
            {
              "key": "transfer-encoding",
              "value": "chunked"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              115,
              117,
              99,
              99,
              101,
              115,
              115,
              34,
              58,
              102,
              97,
              108,
              115,
              101,
              44,
              34,
              115,
              116,
              97,
              116,
              117,
              115,
              34,
              58,
              52,
              48,
              48,
              44,
              34,
              109,
              101,
              115,
              115,
              97,
              103,
              101,
              34,
              58,
              34,
              80,
              97,
              115,
              115,
              119,
              111,
              114,
              100,
              32,
              109,
              117,
              115,
              116,
              32,
              98,
              101,
              32,
              98,
              101,
              116,
              119,
              101,
              101,
              110,
              32,
              54,
              32,
              97,
              110,
              100,
              32,
              51,
              48,
              32,
              99,
              104,
              97,
              114,
              97,
              99,
              116,
              101,
              114,
              115,
              34,
              125
            ]
          },
          "cookie": [],
          "responseTime": 304,
          "responseSize": 87
        },
        "id": "1da8b1e7-3198-4c60-9c34-4a1e8b7e8b15",
        "assertions": [
          {
            "assertion": "Check the status code is 200",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "Check the status code is 200",
              "message": "expected response to have status code 200 but got 400",
              "stack": "AssertionError: expected response to have status code 200 but got 400\n   at Object.eval sandbox-script.js:1:3)"
            }
          },
          {
            "assertion": "Check the success message",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "Check the success message",
              "message": "expected false to deeply equal true",
              "stack": "AssertionError: expected false to deeply equal true\n   at Object.eval sandbox-script.js:2:3)"
            }
          },
          {
            "assertion": "Check the body message",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "Check the body message",
              "message": "expected 'Password must be between 6 and 30 cha…' to deeply equal 'Login successful'",
              "stack": "AssertionError: expected 'Password must be between 6 and 30 cha…' to deeply equal 'Login successful'\n   at Object.eval sandbox-script.js:3:3)"
            }
          }
        ],
        "testScript": [
          {
            "error": {
              "type": "Error",
              "name": "TypeError",
              "message": "Cannot read properties of undefined (reading 'token')",
              "checksum": "f359f9c4d4796d6510f032fd446b6817",
              "id": "368e5023-4cb4-4ed5-834d-9e2bdfbbe2ad",
              "timestamp": 1698733439341,
              "stacktrace": []
            }
          }
        ]
      },
      {
        "cursor": {
          "ref": "c189986f-4bd9-4887-aaf5-782b48ce358c",
          "length": 12,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "d6d7efe8-4eb3-48d1-98c8-49a46b66e17b"
        },
        "item": {
          "id": "3f4af57c-fb9c-4a3c-8c2b-0f9b603b0679",
          "name": "GetProfile",
          "request": {
            "url": {
              "path": [
                "users",
                "profile"
              ],
              "host": [
                "{{exp_url}}"
              ],
              "query": [],
              "variable": []
            },
            "method": "GET",
            "auth": {
              "type": "apikey",
              "apikey": [
                {
                  "type": "string",
                  "value": "{{exp_token}}",
                  "key": "value"
                },
                {
                  "type": "string",
                  "value": "header",
                  "key": "in"
                },
                {
                  "type": "string",
                  "value": "x-auth-token",
                  "key": "key"
                }
              ]
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "56a6399c-71a1-414d-b876-9262a848415f",
                "type": "text/javascript",
                "exec": [
                  "\r",
                  "let jsonData = pm.response.json();\r",
                  "message = [\r",
                  "    \"Access token is not valid or has expired, you will need to login\",\r",
                  "    \"No authentication token specified in x-auth-token header\",\r",
                  "    \"Bad Request\",\r",
                  "    \"Unauthorized Request\",\r",
                  "    \"Internal Error Server\",\r",
                  "    \"Profile successful\",\r",
                  "    \"Not Found\"\r",
                  "]\r",
                  "\r",
                  "status = [400,401,404,500,200,201]\r",
                  "\r",
                  "if (jsonData.success === false) {\r",
                  "    pm.test(`**** E R R O R ***** ${jsonData.message}`, function(){\r",
                  "        // pm.expect(jsonData.message).to.eql(\"No authentication token specified in x-auth-token header\");\r",
                  "        pm.expect(jsonData.message).to.be.oneOf(message);\r",
                  "    });\r",
                  "\r",
                  "    pm.test(`Check the multiple error status code ${jsonData.status}`, function(){\r",
                  "        pm.expect(pm.response.code).to.be.oneOf(status);\r",
                  "    });\r",
                  "\r",
                  "\r",
                  "}\r",
                  "else {\r",
                  "    pm.test(`*** S U C C E S S *** ${jsonData.message}`, function(){\r",
                  "        // pm.expect(jsonData.message).to.equal(\"Profile successful\");\r",
                  "        pm.expect(jsonData.message).to.be.oneOf(message);\r",
                  "    });\r",
                  "\r",
                  "    pm.test(\"Check the response time\", function(){\r",
                  "    pm.expect(pm.response.responseTime).to.be.below(6000);\r",
                  "    });\r",
                  "\r",
                  "    pm.test(`Check the Status code ${jsonData.status}`, function(){\r",
                  "        pm.expect(pm.response.code).to.be.oneOf(status);\r",
                  "    });\r",
                  "\r",
                  "    pm.test(\"Body matches multiple string\",function(){\r",
                  "    pm.expect(pm.response.text()).to.include(\"id\");\r",
                  "    pm.expect(pm.response.text()).to.include(\"name\");\r",
                  "    pm.expect(pm.response.text()).to.include(\"email\");\r",
                  "});\r",
                  "\r",
                  "}\r",
                  "\r",
                  ""
                ],
                "_lastExecutionId": "55d3989d-79a3-476b-87c3-020290feeec2"
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "id": "5b6727ff-6213-4350-874c-dbaeeb0d0d03",
                "type": "text/javascript",
                "exec": [
                  ""
                ],
                "_lastExecutionId": "5e07b22a-eb37-441e-b764-c112f7fde3f7"
              }
            }
          ],
          "protocolProfileBehavior": {
            "disabledSystemHeaders": {}
          }
        },
        "request": {
          "url": {
            "protocol": "https",
            "path": [
              "notes",
              "api",
              "users",
              "profile"
            ],
            "host": [
              "practice",
              "expandtesting",
              "com"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "x-auth-token",
              "value": "",
              "system": true
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.33.0",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "dc583e7f-7b67-4616-8d96-bf5e94c67f63",
              "system": true
            },
            {
              "key": "Host",
              "value": "practice.expandtesting.com",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            },
            {
              "key": "Cookie",
              "value": "express:sess=eyJmbGFzaCI6e319; express:sess.sig=tdt42nQZiQvICqmrvHQ1_16fHk0",
              "system": true
            }
          ],
          "method": "GET",
          "auth": {
            "type": "apikey",
            "apikey": [
              {
                "type": "string",
                "value": "",
                "key": "value"
              },
              {
                "type": "string",
                "value": "header",
                "key": "in"
              },
              {
                "type": "string",
                "value": "x-auth-token",
                "key": "key"
              }
            ]
          }
        },
        "response": {
          "id": "e62eab24-f200-4b29-9eb1-b9a97f798fd3",
          "status": "Unauthorized",
          "code": 401,
          "header": [
            {
              "key": "access-control-allow-origin",
              "value": "*"
            },
            {
              "key": "access-control-allow-credentials",
              "value": "true"
            },
            {
              "key": "access-control-allow-methods",
              "value": "GET, POST, PUT, DELETE, PATCH"
            },
            {
              "key": "access-control-allow-headers",
              "value": "Origin, X-Requested-With, Authorization, Content-Type, Accept, X-Auth-Token"
            },
            {
              "key": "content-type",
              "value": "application/json; charset=utf-8"
            },
            {
              "key": "content-encoding",
              "value": "br"
            },
            {
              "key": "etag",
              "value": "W/\"63-kaKfzTW2quBGOpz1E3SeBltpHeE\""
            },
            {
              "key": "date",
              "value": "Tue, 31 Oct 2023 06:23:03 GMT"
            },
            {
              "key": "connection",
              "value": "keep-alive"
            },
            {
              "key": "keep-alive",
              "value": "timeout=5"
            },
            {
              "key": "transfer-encoding",
              "value": "chunked"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              115,
              117,
              99,
              99,
              101,
              115,
              115,
              34,
              58,
              102,
              97,
              108,
              115,
              101,
              44,
              34,
              115,
              116,
              97,
              116,
              117,
              115,
              34,
              58,
              52,
              48,
              49,
              44,
              34,
              109,
              101,
              115,
              115,
              97,
              103,
              101,
              34,
              58,
              34,
              78,
              111,
              32,
              97,
              117,
              116,
              104,
              101,
              110,
              116,
              105,
              99,
              97,
              116,
              105,
              111,
              110,
              32,
              116,
              111,
              107,
              101,
              110,
              32,
              115,
              112,
              101,
              99,
              105,
              102,
              105,
              101,
              100,
              32,
              105,
              110,
              32,
              120,
              45,
              97,
              117,
              116,
              104,
              45,
              116,
              111,
              107,
              101,
              110,
              32,
              104,
              101,
              97,
              100,
              101,
              114,
              34,
              125
            ]
          },
          "cookie": [],
          "responseTime": 328,
          "responseSize": 99
        },
        "id": "3f4af57c-fb9c-4a3c-8c2b-0f9b603b0679",
        "assertions": [
          {
            "assertion": "**** E R R O R ***** No authentication token specified in x-auth-token header",
            "skipped": false
          },
          {
            "assertion": "Check the multiple error status code 401",
            "skipped": false
          }
        ]
      },
      {
        "cursor": {
          "ref": "a16eda3d-cf06-4e43-8b6b-5a2f59f2b62f",
          "length": 12,
          "cycles": 1,
          "position": 4,
          "iteration": 0,
          "httpRequestId": "bc1d5c1e-e7b1-40b5-86a8-1f734761c295"
        },
        "item": {
          "id": "ee9d7916-0288-4df6-a4d2-05ed9c78c4f1",
          "name": "UpdateProfile",
          "request": {
            "url": {
              "path": [
                "users",
                "profile"
              ],
              "host": [
                "{{exp_url}}"
              ],
              "query": [],
              "variable": []
            },
            "method": "PATCH",
            "body": {
              "mode": "raw",
              "raw": "{\r\n    \"name\":\"{{name}}\",\r\n    \"phone\":\"{{random_number}}\",\r\n    \"company\":\"{{$randomCompanyName}}\"\r\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "auth": {
              "type": "apikey",
              "apikey": [
                {
                  "type": "string",
                  "value": "{{exp_token}}",
                  "key": "value"
                },
                {
                  "type": "string",
                  "value": "header",
                  "key": "in"
                },
                {
                  "type": "string",
                  "value": "x-auth-token",
                  "key": "key"
                }
              ]
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "6ab7e932-eb9b-4edc-9edc-b8d42e4162ad",
                "type": "text/javascript",
                "exec": [
                  "let jsonData = pm.response.json();\r",
                  "message = [\r",
                  "    \"Access token is not valid or has expired, you will need to login\",\r",
                  "    \"No authentication token specified in x-auth-token header\",\r",
                  "    \"User name must be between 4 and 30 characters\",\r",
                  "    \"Phone number should be between 8 and 20 digits\",\r",
                  "    \"Unauthorized Request\",\r",
                  "    \"Internal Error Server\",\r",
                  "    \"Profile updated successful\",\r",
                  "    \"Not Found\",\r",
                  "    \"Bad Request\"\r",
                  "]\r",
                  "\r",
                  "status = [400,401,404,500,200,201]\r",
                  "// var jsonData1 = pm.response.json();\r",
                  "// pm.environment.set(\"phoneNumber\", jsonData1.data.phone);\r",
                  "\r",
                  "if (jsonData.success === false) {\r",
                  "    pm.test(`**** E R R O R ***** ${jsonData.message}`, function(){\r",
                  "        // pm.expect(jsonData.message).to.eql(\"No authentication token specified in x-auth-token header\");\r",
                  "        pm.expect(jsonData.message).to.be.oneOf(message);\r",
                  "    });\r",
                  "\r",
                  "    pm.test(`Check the multiple error status code ${jsonData.status}`, function(){\r",
                  "        pm.expect(pm.response.code).to.be.oneOf(status);\r",
                  "    });\r",
                  "\r",
                  "\r",
                  "}\r",
                  "else {\r",
                  "    pm.test(`*** S U C C E S S *** ${jsonData.message}`, function(){\r",
                  "        // pm.expect(jsonData.message).to.equal(\"Profile successful\");\r",
                  "        pm.expect(jsonData.message).to.be.oneOf(message);\r",
                  "    });\r",
                  "\r",
                  "    pm.test(\"Check the response time\", function(){\r",
                  "    pm.expect(pm.response.responseTime).to.be.below(6000);\r",
                  "    });\r",
                  "\r",
                  "    pm.test(`Check the Status code ${jsonData.status}`, function(){\r",
                  "        pm.expect(pm.response.code).to.be.oneOf(status);\r",
                  "    });\r",
                  "\r",
                  "    pm.test(\"Body matches multiple string\",function(){\r",
                  "    pm.expect(pm.response.text()).to.include(\"id\");\r",
                  "    pm.expect(pm.response.text()).to.include(\"name\");\r",
                  "    pm.expect(pm.response.text()).to.include(\"email\");\r",
                  "});\r",
                  "\r",
                  "}\r",
                  "\r",
                  ""
                ],
                "_lastExecutionId": "bf535ed4-ea27-433b-95ed-0405878d634c"
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "id": "1dd9ce14-2fea-48d5-b628-446e36acb961",
                "type": "text/javascript",
                "exec": [
                  "pm.environment.set(\"random_number\",_.random(1000000000,9999999999));\r",
                  "\r",
                  "\r",
                  ""
                ],
                "_lastExecutionId": "81adb337-1695-4fed-b265-391f869dd222"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "https",
            "path": [
              "notes",
              "api",
              "users",
              "profile"
            ],
            "host": [
              "practice",
              "expandtesting",
              "com"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "Content-Type",
              "value": "application/json",
              "system": true
            },
            {
              "key": "x-auth-token",
              "value": "",
              "system": true
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.33.0",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "a6afb188-d730-4811-9ee8-6be6848c269a",
              "system": true
            },
            {
              "key": "Host",
              "value": "practice.expandtesting.com",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            },
            {
              "key": "Content-Length",
              "value": "76",
              "system": true
            },
            {
              "key": "Cookie",
              "value": "express:sess=eyJmbGFzaCI6e319; express:sess.sig=tdt42nQZiQvICqmrvHQ1_16fHk0",
              "system": true
            }
          ],
          "method": "PATCH",
          "body": {
            "mode": "raw",
            "raw": "{\r\n    \"name\":\"\",\r\n    \"phone\":\"2902252969\",\r\n    \"company\":\"Schaden LLC\"\r\n}",
            "options": {
              "raw": {
                "language": "json"
              }
            }
          },
          "auth": {
            "type": "apikey",
            "apikey": [
              {
                "type": "string",
                "value": "",
                "key": "value"
              },
              {
                "type": "string",
                "value": "header",
                "key": "in"
              },
              {
                "type": "string",
                "value": "x-auth-token",
                "key": "key"
              }
            ]
          }
        },
        "response": {
          "id": "07b6c8e5-838d-481b-9a6e-8324d635cc54",
          "status": "Unauthorized",
          "code": 401,
          "header": [
            {
              "key": "access-control-allow-origin",
              "value": "*"
            },
            {
              "key": "access-control-allow-credentials",
              "value": "true"
            },
            {
              "key": "access-control-allow-methods",
              "value": "GET, POST, PUT, DELETE, PATCH"
            },
            {
              "key": "access-control-allow-headers",
              "value": "Origin, X-Requested-With, Authorization, Content-Type, Accept, X-Auth-Token"
            },
            {
              "key": "content-type",
              "value": "application/json; charset=utf-8"
            },
            {
              "key": "content-encoding",
              "value": "br"
            },
            {
              "key": "etag",
              "value": "W/\"63-kaKfzTW2quBGOpz1E3SeBltpHeE\""
            },
            {
              "key": "date",
              "value": "Tue, 31 Oct 2023 06:23:04 GMT"
            },
            {
              "key": "connection",
              "value": "keep-alive"
            },
            {
              "key": "keep-alive",
              "value": "timeout=5"
            },
            {
              "key": "transfer-encoding",
              "value": "chunked"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              115,
              117,
              99,
              99,
              101,
              115,
              115,
              34,
              58,
              102,
              97,
              108,
              115,
              101,
              44,
              34,
              115,
              116,
              97,
              116,
              117,
              115,
              34,
              58,
              52,
              48,
              49,
              44,
              34,
              109,
              101,
              115,
              115,
              97,
              103,
              101,
              34,
              58,
              34,
              78,
              111,
              32,
              97,
              117,
              116,
              104,
              101,
              110,
              116,
              105,
              99,
              97,
              116,
              105,
              111,
              110,
              32,
              116,
              111,
              107,
              101,
              110,
              32,
              115,
              112,
              101,
              99,
              105,
              102,
              105,
              101,
              100,
              32,
              105,
              110,
              32,
              120,
              45,
              97,
              117,
              116,
              104,
              45,
              116,
              111,
              107,
              101,
              110,
              32,
              104,
              101,
              97,
              100,
              101,
              114,
              34,
              125
            ]
          },
          "cookie": [],
          "responseTime": 301,
          "responseSize": 99
        },
        "id": "ee9d7916-0288-4df6-a4d2-05ed9c78c4f1",
        "assertions": [
          {
            "assertion": "**** E R R O R ***** No authentication token specified in x-auth-token header",
            "skipped": false
          },
          {
            "assertion": "Check the multiple error status code 401",
            "skipped": false
          }
        ]
      },
      {
        "cursor": {
          "ref": "9347b181-aa7d-47a6-9677-3a62f1960f90",
          "length": 12,
          "cycles": 1,
          "position": 5,
          "iteration": 0,
          "httpRequestId": "c98a6aec-f32b-4bb9-b8ff-ea8845b6a2ae"
        },
        "item": {
          "id": "03c5b9ed-2c86-4338-932a-d93a799c2d8d",
          "name": "ForgotPassword",
          "request": {
            "url": {
              "path": [
                "users",
                "forgot-password"
              ],
              "host": [
                "{{exp_url}}"
              ],
              "query": [],
              "variable": []
            },
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\r\n    \"email\":\"{{randomEmail}}\"\r\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "auth": {
              "type": "apikey",
              "apikey": [
                {
                  "type": "string",
                  "value": "{{exp_token}}",
                  "key": "value"
                },
                {
                  "type": "string",
                  "value": "header",
                  "key": "in"
                },
                {
                  "type": "string",
                  "value": "x-auth-token",
                  "key": "key"
                }
              ]
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "72c44319-e1e0-49ac-91f7-f3f0cd439f93",
                "type": "text/javascript",
                "exec": [
                  "let jsonData = pm.response.json();\r",
                  "let jsonEmail = JSON.parse(pm.request.body.raw).email;\r",
                  "\r",
                  "message = [\r",
                  "    \"Access token is not valid or has expired, you will need to login\",\r",
                  "    \"No authentication token specified in x-auth-token header\",\r",
                  "    \"Unauthorized Request\",\r",
                  "    \"Internal Error Server\",\r",
                  "    `Password reset link successfully sent to ${pm.environment.get(\"email\")}. Please verify by clicking on the given link`,\r",
                  "    \"Not Found\",\r",
                  "    \"Bad Request\",\r",
                  "    \"A valid email address is required\"\r",
                  "]\r",
                  "\r",
                  "status = [400,401,404,500,200,201]\r",
                  "// var jsonData1 = pm.response.json();\r",
                  "// pm.environment.set(\"phoneNumber\", jsonData1.data.phone);\r",
                  "\r",
                  "if (jsonData.success === false) {\r",
                  "    pm.test(`**** E R R O R ***** ${jsonData.message}`, function(){\r",
                  "        // pm.expect(jsonData.message).to.eql(\"No authentication token specified in x-auth-token header\");\r",
                  "        pm.expect(jsonData.message).to.be.oneOf(message);\r",
                  "    });\r",
                  "\r",
                  "    pm.test(`Check the multiple error status code ${jsonData.status}`, function(){\r",
                  "        pm.expect(pm.response.code).to.be.oneOf(status);\r",
                  "    });\r",
                  "\r",
                  "\r",
                  "}\r",
                  "else {\r",
                  "    pm.test(`*** S U C C E S S *** ${jsonData.message}`, function(){\r",
                  "        // pm.expect(jsonData.message).to.equal(\"Profile successful\");\r",
                  "        pm.expect(jsonData.message).to.be.oneOf(message);\r",
                  "    });\r",
                  "\r",
                  "    pm.test(\"Check the response time\", function(){\r",
                  "    pm.expect(pm.response.responseTime).to.be.below(6000);\r",
                  "    });\r",
                  "\r",
                  "    pm.test(`Check the Status code ${jsonData.status}`, function(){\r",
                  "        pm.expect(pm.response.code).to.be.oneOf(status);\r",
                  "    });\r",
                  "\r",
                  "    pm.test(\"Body matches multiple string\",function(){\r",
                  "    pm.expect(pm.response.text()).to.include(\"message\");\r",
                  "});\r",
                  "\r",
                  "}\r",
                  "\r",
                  ""
                ],
                "_lastExecutionId": "a3803636-b917-4048-8873-b62ae1f022d6"
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "id": "6236deb0-9668-46d8-bb96-97cc86eeb0fa",
                "type": "text/javascript",
                "exec": [
                  ""
                ],
                "_lastExecutionId": "148f797c-8661-4a45-97c4-527fe81fce77"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "https",
            "path": [
              "notes",
              "api",
              "users",
              "forgot-password"
            ],
            "host": [
              "practice",
              "expandtesting",
              "com"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "Content-Type",
              "value": "application/json",
              "system": true
            },
            {
              "key": "x-auth-token",
              "value": "",
              "system": true
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.33.0",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "1901d8bf-1a98-473d-a83d-2fc62ce03196",
              "system": true
            },
            {
              "key": "Host",
              "value": "practice.expandtesting.com",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            },
            {
              "key": "Content-Length",
              "value": "41",
              "system": true
            },
            {
              "key": "Cookie",
              "value": "express:sess=eyJmbGFzaCI6e319; express:sess.sig=tdt42nQZiQvICqmrvHQ1_16fHk0",
              "system": true
            }
          ],
          "method": "POST",
          "body": {
            "mode": "raw",
            "raw": "{\r\n    \"email\":\"qat2613+a53@gmail.com\"\r\n}",
            "options": {
              "raw": {
                "language": "json"
              }
            }
          },
          "auth": {
            "type": "apikey",
            "apikey": [
              {
                "type": "string",
                "value": "",
                "key": "value"
              },
              {
                "type": "string",
                "value": "header",
                "key": "in"
              },
              {
                "type": "string",
                "value": "x-auth-token",
                "key": "key"
              }
            ]
          }
        },
        "response": {
          "id": "656e359c-3e95-4e53-b9b3-41a81a41cb7e",
          "status": "OK",
          "code": 200,
          "header": [
            {
              "key": "access-control-allow-origin",
              "value": "*"
            },
            {
              "key": "access-control-allow-credentials",
              "value": "true"
            },
            {
              "key": "access-control-allow-methods",
              "value": "GET, POST, PUT, DELETE, PATCH"
            },
            {
              "key": "access-control-allow-headers",
              "value": "Origin, X-Requested-With, Authorization, Content-Type, Accept, X-Auth-Token"
            },
            {
              "key": "content-type",
              "value": "application/json; charset=utf-8"
            },
            {
              "key": "content-encoding",
              "value": "br"
            },
            {
              "key": "etag",
              "value": "W/\"95-u07KDGYenV2hRROC4Y7FEu+PwdQ\""
            },
            {
              "key": "date",
              "value": "Tue, 31 Oct 2023 06:23:04 GMT"
            },
            {
              "key": "connection",
              "value": "keep-alive"
            },
            {
              "key": "keep-alive",
              "value": "timeout=5"
            },
            {
              "key": "transfer-encoding",
              "value": "chunked"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              115,
              117,
              99,
              99,
              101,
              115,
              115,
              34,
              58,
              116,
              114,
              117,
              101,
              44,
              34,
              115,
              116,
              97,
              116,
              117,
              115,
              34,
              58,
              50,
              48,
              48,
              44,
              34,
              109,
              101,
              115,
              115,
              97,
              103,
              101,
              34,
              58,
              34,
              80,
              97,
              115,
              115,
              119,
              111,
              114,
              100,
              32,
              114,
              101,
              115,
              101,
              116,
              32,
              108,
              105,
              110,
              107,
              32,
              115,
              117,
              99,
              99,
              101,
              115,
              115,
              102,
              117,
              108,
              108,
              121,
              32,
              115,
              101,
              110,
              116,
              32,
              116,
              111,
              32,
              113,
              97,
              116,
              50,
              54,
              49,
              51,
              43,
              97,
              53,
              51,
              64,
              103,
              109,
              97,
              105,
              108,
              46,
              99,
              111,
              109,
              46,
              32,
              80,
              108,
              101,
              97,
              115,
              101,
              32,
              118,
              101,
              114,
              105,
              102,
              121,
              32,
              98,
              121,
              32,
              99,
              108,
              105,
              99,
              107,
              105,
              110,
              103,
              32,
              111,
              110,
              32,
              116,
              104,
              101,
              32,
              103,
              105,
              118,
              101,
              110,
              32,
              108,
              105,
              110,
              107,
              34,
              125
            ]
          },
          "cookie": [],
          "responseTime": 416,
          "responseSize": 149
        },
        "id": "03c5b9ed-2c86-4338-932a-d93a799c2d8d",
        "assertions": [
          {
            "assertion": "*** S U C C E S S *** Password reset link successfully sent to qat2613+a53@gmail.com. Please verify by clicking on the given link",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "*** S U C C E S S *** Password reset link successfully sent to qat2613+a53@gmail.com. Please verify by clicking on the given link",
              "message": "expected 'Password reset link successfully sent…' to be one of [ …(8) ]",
              "stack": "AssertionError: expected 'Password reset link successfully sent…' to be one of [ …(8) ]\n   at Object.eval sandbox-script.js:1:6)"
            }
          },
          {
            "assertion": "Check the response time",
            "skipped": false
          },
          {
            "assertion": "Check the Status code 200",
            "skipped": false
          },
          {
            "assertion": "Body matches multiple string",
            "skipped": false
          }
        ]
      },
      {
        "cursor": {
          "ref": "4b7c04fa-e9dc-4fc5-a07a-9a99fb0ebb50",
          "length": 12,
          "cycles": 1,
          "position": 6,
          "iteration": 0,
          "httpRequestId": "b572384c-f30b-4b31-bdd3-80d8c58296ed"
        },
        "item": {
          "id": "eea8198b-64d4-43e4-b554-aefaae2516cd",
          "name": "GetEmailMessage",
          "request": {
            "url": {
              "protocol": "https",
              "path": [
                "gmail",
                "v1",
                "users",
                "{{user_email_id}}",
                "messages",
                ""
              ],
              "host": [
                "gmail",
                "googleapis",
                "com"
              ],
              "query": [],
              "variable": []
            },
            "method": "GET",
            "auth": {
              "type": "oauth2",
              "oauth2": [
                {
                  "type": "boolean",
                  "value": false,
                  "key": "useBrowser"
                },
                {
                  "type": "string",
                  "value": "{{Scope}}",
                  "key": "scope"
                },
                {
                  "type": "string",
                  "value": "{{Client_Secret}}",
                  "key": "clientSecret"
                },
                {
                  "type": "string",
                  "value": "{{Client_ID}}",
                  "key": "clientId"
                },
                {
                  "type": "string",
                  "value": "{{Access_Token_URL}}",
                  "key": "accessTokenUrl"
                },
                {
                  "type": "string",
                  "value": "{{Auth_URL}}",
                  "key": "authUrl"
                },
                {
                  "type": "string",
                  "value": "{{Callback_URL}}",
                  "key": "redirect_uri"
                },
                {
                  "type": "string",
                  "value": "authorization_code",
                  "key": "grant_type"
                },
                {
                  "type": "string",
                  "value": "email_token",
                  "key": "tokenName"
                },
                {
                  "type": "string",
                  "value": "header",
                  "key": "addTokenTo"
                }
              ]
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "705020a4-73b3-44df-86ff-a5984e094d10",
                "type": "text/javascript",
                "exec": [
                  "var jsonData = pm.response.json();\r",
                  "pm.environment.set(\"messageId\", jsonData.messages[0].id);\r",
                  "\r",
                  ""
                ],
                "_lastExecutionId": "eeef6f2d-f5fd-4a00-be9c-25555c6fa5bc"
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "id": "cdf7837a-853f-442c-8e05-996129213a95",
                "type": "text/javascript",
                "exec": [
                  "var newRefreshToken = pm.environment.get(\"access_token\");\r",
                  "\r",
                  "pm.environment.set(\"refresh_token\", newRefreshToken);"
                ],
                "_lastExecutionId": "94790536-1730-42ee-886b-f2872e8a5fee"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "https",
            "path": [
              "gmail",
              "v1",
              "users",
              "qat2613@gmail.com",
              "messages",
              ""
            ],
            "host": [
              "gmail",
              "googleapis",
              "com"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.33.0",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "cdcd6dd8-1bc8-4264-8fec-2d815833fa31",
              "system": true
            },
            {
              "key": "Host",
              "value": "gmail.googleapis.com",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            }
          ],
          "method": "GET",
          "auth": {
            "type": "oauth2",
            "oauth2": [
              {
                "type": "boolean",
                "value": false,
                "key": "useBrowser"
              },
              {
                "type": "string",
                "value": "https://www.googleapis.com/auth/gmail.readonly",
                "key": "scope"
              },
              {
                "type": "string",
                "value": "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",
                "key": "clientSecret"
              },
              {
                "type": "string",
                "value": "847150036765-hcs8r97s5ogh6kna315brgaap0p508p5.apps.googleusercontent.com",
                "key": "clientId"
              },
              {
                "type": "string",
                "value": "https://oauth2.googleapis.com/token",
                "key": "accessTokenUrl"
              },
              {
                "type": "string",
                "value": "https://accounts.google.com/o/oauth2/v2/auth",
                "key": "authUrl"
              },
              {
                "type": "string",
                "value": "https://oauth.pstmn.io/v1/callback",
                "key": "redirect_uri"
              },
              {
                "type": "string",
                "value": "authorization_code",
                "key": "grant_type"
              },
              {
                "type": "string",
                "value": "email_token",
                "key": "tokenName"
              },
              {
                "type": "string",
                "value": "header",
                "key": "addTokenTo"
              }
            ]
          }
        },
        "response": {
          "id": "737e6187-09cc-4fa3-8b09-f8574b17eccb",
          "status": "Unauthorized",
          "code": 401,
          "header": [
            {
              "key": "WWW-Authenticate",
              "value": "Bearer realm=\"https://accounts.google.com/\""
            },
            {
              "key": "Vary",
              "value": "Origin"
            },
            {
              "key": "Vary",
              "value": "X-Origin"
            },
            {
              "key": "Vary",
              "value": "Referer"
            },
            {
              "key": "Content-Type",
              "value": "application/json; charset=UTF-8"
            },
            {
              "key": "Content-Encoding",
              "value": "gzip"
            },
            {
              "key": "Date",
              "value": "Tue, 31 Oct 2023 06:23:05 GMT"
            },
            {
              "key": "Server",
              "value": "ESF"
            },
            {
              "key": "Cache-Control",
              "value": "private"
            },
            {
              "key": "X-XSS-Protection",
              "value": "0"
            },
            {
              "key": "X-Frame-Options",
              "value": "SAMEORIGIN"
            },
            {
              "key": "X-Content-Type-Options",
              "value": "nosniff"
            },
            {
              "key": "Alt-Svc",
              "value": "h3=\":443\"; ma=2592000,h3-29=\":443\"; ma=2592000"
            },
            {
              "key": "Transfer-Encoding",
              "value": "chunked"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              10,
              32,
              32,
              34,
              101,
              114,
              114,
              111,
              114,
              34,
              58,
              32,
              123,
              10,
              32,
              32,
              32,
              32,
              34,
              99,
              111,
              100,
              101,
              34,
              58,
              32,
              52,
              48,
              49,
              44,
              10,
              32,
              32,
              32,
              32,
              34,
              109,
              101,
              115,
              115,
              97,
              103,
              101,
              34,
              58,
              32,
              34,
              82,
              101,
              113,
              117,
              101,
              115,
              116,
              32,
              105,
              115,
              32,
              109,
              105,
              115,
              115,
              105,
              110,
              103,
              32,
              114,
              101,
              113,
              117,
              105,
              114,
              101,
              100,
              32,
              97,
              117,
              116,
              104,
              101,
              110,
              116,
              105,
              99,
              97,
              116,
              105,
              111,
              110,
              32,
              99,
              114,
              101,
              100,
              101,
              110,
              116,
              105,
              97,
              108,
              46,
              32,
              69,
              120,
              112,
              101,
              99,
              116,
              101,
              100,
              32,
              79,
              65,
              117,
              116,
              104,
              32,
              50,
              32,
              97,
              99,
              99,
              101,
              115,
              115,
              32,
              116,
              111,
              107,
              101,
              110,
              44,
              32,
              108,
              111,
              103,
              105,
              110,
              32,
              99,
              111,
              111,
              107,
              105,
              101,
              32,
              111,
              114,
              32,
              111,
              116,
              104,
              101,
              114,
              32,
              118,
              97,
              108,
              105,
              100,
              32,
              97,
              117,
              116,
              104,
              101,
              110,
              116,
              105,
              99,
              97,
              116,
              105,
              111,
              110,
              32,
              99,
              114,
              101,
              100,
              101,
              110,
              116,
              105,
              97,
              108,
              46,
              32,
              83,
              101,
              101,
              32,
              104,
              116,
              116,
              112,
              115,
              58,
              47,
              47,
              100,
              101,
              118,
              101,
              108,
              111,
              112,
              101,
              114,
              115,
              46,
              103,
              111,
              111,
              103,
              108,
              101,
              46,
              99,
              111,
              109,
              47,
              105,
              100,
              101,
              110,
              116,
              105,
              116,
              121,
              47,
              115,
              105,
              103,
              110,
              45,
              105,
              110,
              47,
              119,
              101,
              98,
              47,
              100,
              101,
              118,
              99,
              111,
              110,
              115,
              111,
              108,
              101,
              45,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              46,
              34,
              44,
              10,
              32,
              32,
              32,
              32,
              34,
              101,
              114,
              114,
              111,
              114,
              115,
              34,
              58,
              32,
              91,
              10,
              32,
              32,
              32,
              32,
              32,
              32,
              123,
              10,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              34,
              109,
              101,
              115,
              115,
              97,
              103,
              101,
              34,
              58,
              32,
              34,
              76,
              111,
              103,
              105,
              110,
              32,
              82,
              101,
              113,
              117,
              105,
              114,
              101,
              100,
              46,
              34,
              44,
              10,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              34,
              100,
              111,
              109,
              97,
              105,
              110,
              34,
              58,
              32,
              34,
              103,
              108,
              111,
              98,
              97,
              108,
              34,
              44,
              10,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              34,
              114,
              101,
              97,
              115,
              111,
              110,
              34,
              58,
              32,
              34,
              114,
              101,
              113,
              117,
              105,
              114,
              101,
              100,
              34,
              44,
              10,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              34,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              34,
              58,
              32,
              34,
              65,
              117,
              116,
              104,
              111,
              114,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              34,
              44,
              10,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              34,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              84,
              121,
              112,
              101,
              34,
              58,
              32,
              34,
              104,
              101,
              97,
              100,
              101,
              114,
              34,
              10,
              32,
              32,
              32,
              32,
              32,
              32,
              125,
              10,
              32,
              32,
              32,
              32,
              93,
              44,
              10,
              32,
              32,
              32,
              32,
              34,
              115,
              116,
              97,
              116,
              117,
              115,
              34,
              58,
              32,
              34,
              85,
              78,
              65,
              85,
              84,
              72,
              69,
              78,
              84,
              73,
              67,
              65,
              84,
              69,
              68,
              34,
              44,
              10,
              32,
              32,
              32,
              32,
              34,
              100,
              101,
              116,
              97,
              105,
              108,
              115,
              34,
              58,
              32,
              91,
              10,
              32,
              32,
              32,
              32,
              32,
              32,
              123,
              10,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              34,
              64,
              116,
              121,
              112,
              101,
              34,
              58,
              32,
              34,
              116,
              121,
              112,
              101,
              46,
              103,
              111,
              111,
              103,
              108,
              101,
              97,
              112,
              105,
              115,
              46,
              99,
              111,
              109,
              47,
              103,
              111,
              111,
              103,
              108,
              101,
              46,
              114,
              112,
              99,
              46,
              69,
              114,
              114,
              111,
              114,
              73,
              110,
              102,
              111,
              34,
              44,
              10,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              34,
              114,
              101,
              97,
              115,
              111,
              110,
              34,
              58,
              32,
              34,
              67,
              82,
              69,
              68,
              69,
              78,
              84,
              73,
              65,
              76,
              83,
              95,
              77,
              73,
              83,
              83,
              73,
              78,
              71,
              34,
              44,
              10,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              34,
              100,
              111,
              109,
              97,
              105,
              110,
              34,
              58,
              32,
              34,
              103,
              111,
              111,
              103,
              108,
              101,
              97,
              112,
              105,
              115,
              46,
              99,
              111,
              109,
              34,
              44,
              10,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              34,
              109,
              101,
              116,
              97,
              100,
              97,
              116,
              97,
              34,
              58,
              32,
              123,
              10,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              34,
              109,
              101,
              116,
              104,
              111,
              100,
              34,
              58,
              32,
              34,
              99,
              97,
              114,
              105,
              98,
              111,
              117,
              46,
              97,
              112,
              105,
              46,
              112,
              114,
              111,
              116,
              111,
              46,
              77,
              97,
              105,
              108,
              98,
              111,
              120,
              83,
              101,
              114,
              118,
              105,
              99,
              101,
              46,
              76,
              105,
              115,
              116,
              77,
              101,
              115,
              115,
              97,
              103,
              101,
              115,
              34,
              44,
              10,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              34,
              115,
              101,
              114,
              118,
              105,
              99,
              101,
              34,
              58,
              32,
              34,
              103,
              109,
              97,
              105,
              108,
              46,
              103,
              111,
              111,
              103,
              108,
              101,
              97,
              112,
              105,
              115,
              46,
              99,
              111,
              109,
              34,
              10,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              125,
              10,
              32,
              32,
              32,
              32,
              32,
              32,
              125,
              10,
              32,
              32,
              32,
              32,
              93,
              10,
              32,
              32,
              125,
              10,
              125,
              10
            ]
          },
          "cookie": [],
          "responseTime": 505,
          "responseSize": 832
        },
        "id": "eea8198b-64d4-43e4-b554-aefaae2516cd",
        "testScript": [
          {
            "error": {
              "type": "Error",
              "name": "TypeError",
              "message": "Cannot read properties of undefined (reading '0')",
              "checksum": "47716cbf29f9fc789b5db8a9dae9103d",
              "id": "4e4a055c-6588-4e5c-8460-c64beb168e82",
              "timestamp": 1698733441268,
              "stacktrace": []
            }
          }
        ]
      },
      {
        "cursor": {
          "ref": "f26ffd76-85bb-4791-bb51-59aca8552d66",
          "length": 12,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "0a724cb3-db9e-48f7-95ad-3b903b00d840"
        },
        "item": {
          "id": "f053ddc8-a8a6-4796-a23f-c89737b34582",
          "name": "GetMessageByID",
          "request": {
            "url": {
              "protocol": "https",
              "path": [
                "gmail",
                "v1",
                "users",
                "{{user_email_id}}",
                "messages",
                "{{messageId}}"
              ],
              "host": [
                "gmail",
                "googleapis",
                "com"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Content-Type",
                "value": "multipart/mixed"
              }
            ],
            "method": "GET",
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "type": "string",
                  "value": "{{access_token}}",
                  "key": "token"
                }
              ]
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "d94857cd-ae23-40c6-ae38-5f7aaca3e833",
                "type": "text/javascript",
                "exec": [
                  "\r",
                  "const response = pm.response.json();\r",
                  "\r",
                  "pm.environment.set(\"message_Body\", response.payload.body.data);\r",
                  "\r",
                  "var atob = require('atob');\r",
                  "\r",
                  "\r",
                  "var base64Data = pm.environment.get(\"message_Body\");\r",
                  "var decodedData = atob(base64Data);\r",
                  "postman.setEnvironmentVariable(\"rest_password\",decodedData);\r",
                  "var tokenRegex = /Reset password link: (https:\\/\\/practice\\.expandtesting\\.com\\/notes\\/app\\/reset-password\\/([\\w\\d]+))[^ ]+/;\r",
                  "var tokenMatch = decodedData.match(tokenRegex);\r",
                  "if (tokenMatch && tokenMatch[2]) {\r",
                  "    var resetPasswordToken = tokenMatch[2];\r",
                  "    \r",
                  "    // Set the reset password link as a Postman environment variable for later use\r",
                  "    pm.environment.set(\"resetPasswordToken\", resetPasswordToken);\r",
                  "    \r",
                  "    // Log the reset password link\r",
                  "    console.log(\"Reset Password Token: \" + resetPasswordToken);\r",
                  "} else {\r",
                  "    console.log(\"Reset password token not found in the response.\");\r",
                  "}\r",
                  "console.log(decodedData);\r",
                  "\r",
                  "\r",
                  "\r",
                  "\r",
                  "\r",
                  "\r",
                  "\r",
                  "\r",
                  "\r",
                  "\r",
                  "\r",
                  ""
                ],
                "_lastExecutionId": "4816be40-7f3a-489e-b23c-14c698a58ddc"
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "id": "8349aa22-c992-434e-9e35-e5fc8ef4a245",
                "type": "text/javascript",
                "exec": [
                  ""
                ],
                "_lastExecutionId": "e5ddbcb0-9830-4e57-9232-851987938e7d"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "https",
            "path": [
              "gmail",
              "v1",
              "users",
              "qat2613@gmail.com",
              "messages",
              ""
            ],
            "host": [
              "gmail",
              "googleapis",
              "com"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "Content-Type",
              "value": "multipart/mixed"
            },
            {
              "key": "Authorization",
              "value": "Bearer ya29.a0AfB_byChUW-OZ1mtHZhS01JxKQO3zmkxB6m-POy7LWPIIT_gaQLtuaptNeiq4xPm9QbifftVAK6bW6OMjEwQOFo5q5aVZ-pdX4OUWu2AIhAGdrks2l80T-EnpZ5oiNNi_KnpVLGbURGxIbiV86MGnuJTxloCyqwSj08aCgYKAQESARESFQGOcNnCMXWZVvxV4VP-ecdPZ4tFLA0170",
              "system": true
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.33.0",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "48fe63da-1da7-40d9-828b-6c0e993e875a",
              "system": true
            },
            {
              "key": "Host",
              "value": "gmail.googleapis.com",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            }
          ],
          "method": "GET",
          "auth": {
            "type": "bearer",
            "bearer": [
              {
                "type": "string",
                "value": "ya29.a0AfB_byChUW-OZ1mtHZhS01JxKQO3zmkxB6m-POy7LWPIIT_gaQLtuaptNeiq4xPm9QbifftVAK6bW6OMjEwQOFo5q5aVZ-pdX4OUWu2AIhAGdrks2l80T-EnpZ5oiNNi_KnpVLGbURGxIbiV86MGnuJTxloCyqwSj08aCgYKAQESARESFQGOcNnCMXWZVvxV4VP-ecdPZ4tFLA0170",
                "key": "token"
              }
            ]
          }
        },
        "response": {
          "id": "a689a3e1-ef5f-4a4a-9d79-96671c81895f",
          "status": "Unauthorized",
          "code": 401,
          "header": [
            {
              "key": "WWW-Authenticate",
              "value": "Bearer realm=\"https://accounts.google.com/\", error=\"invalid_token\""
            },
            {
              "key": "Vary",
              "value": "Origin"
            },
            {
              "key": "Vary",
              "value": "X-Origin"
            },
            {
              "key": "Vary",
              "value": "Referer"
            },
            {
              "key": "Content-Type",
              "value": "application/json; charset=UTF-8"
            },
            {
              "key": "Content-Encoding",
              "value": "gzip"
            },
            {
              "key": "Date",
              "value": "Tue, 31 Oct 2023 06:23:05 GMT"
            },
            {
              "key": "Server",
              "value": "ESF"
            },
            {
              "key": "Cache-Control",
              "value": "private"
            },
            {
              "key": "X-XSS-Protection",
              "value": "0"
            },
            {
              "key": "X-Frame-Options",
              "value": "SAMEORIGIN"
            },
            {
              "key": "X-Content-Type-Options",
              "value": "nosniff"
            },
            {
              "key": "Alt-Svc",
              "value": "h3=\":443\"; ma=2592000,h3-29=\":443\"; ma=2592000"
            },
            {
              "key": "Transfer-Encoding",
              "value": "chunked"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              10,
              32,
              32,
              34,
              101,
              114,
              114,
              111,
              114,
              34,
              58,
              32,
              123,
              10,
              32,
              32,
              32,
              32,
              34,
              99,
              111,
              100,
              101,
              34,
              58,
              32,
              52,
              48,
              49,
              44,
              10,
              32,
              32,
              32,
              32,
              34,
              109,
              101,
              115,
              115,
              97,
              103,
              101,
              34,
              58,
              32,
              34,
              82,
              101,
              113,
              117,
              101,
              115,
              116,
              32,
              104,
              97,
              100,
              32,
              105,
              110,
              118,
              97,
              108,
              105,
              100,
              32,
              97,
              117,
              116,
              104,
              101,
              110,
              116,
              105,
              99,
              97,
              116,
              105,
              111,
              110,
              32,
              99,
              114,
              101,
              100,
              101,
              110,
              116,
              105,
              97,
              108,
              115,
              46,
              32,
              69,
              120,
              112,
              101,
              99,
              116,
              101,
              100,
              32,
              79,
              65,
              117,
              116,
              104,
              32,
              50,
              32,
              97,
              99,
              99,
              101,
              115,
              115,
              32,
              116,
              111,
              107,
              101,
              110,
              44,
              32,
              108,
              111,
              103,
              105,
              110,
              32,
              99,
              111,
              111,
              107,
              105,
              101,
              32,
              111,
              114,
              32,
              111,
              116,
              104,
              101,
              114,
              32,
              118,
              97,
              108,
              105,
              100,
              32,
              97,
              117,
              116,
              104,
              101,
              110,
              116,
              105,
              99,
              97,
              116,
              105,
              111,
              110,
              32,
              99,
              114,
              101,
              100,
              101,
              110,
              116,
              105,
              97,
              108,
              46,
              32,
              83,
              101,
              101,
              32,
              104,
              116,
              116,
              112,
              115,
              58,
              47,
              47,
              100,
              101,
              118,
              101,
              108,
              111,
              112,
              101,
              114,
              115,
              46,
              103,
              111,
              111,
              103,
              108,
              101,
              46,
              99,
              111,
              109,
              47,
              105,
              100,
              101,
              110,
              116,
              105,
              116,
              121,
              47,
              115,
              105,
              103,
              110,
              45,
              105,
              110,
              47,
              119,
              101,
              98,
              47,
              100,
              101,
              118,
              99,
              111,
              110,
              115,
              111,
              108,
              101,
              45,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              46,
              34,
              44,
              10,
              32,
              32,
              32,
              32,
              34,
              101,
              114,
              114,
              111,
              114,
              115,
              34,
              58,
              32,
              91,
              10,
              32,
              32,
              32,
              32,
              32,
              32,
              123,
              10,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              34,
              109,
              101,
              115,
              115,
              97,
              103,
              101,
              34,
              58,
              32,
              34,
              73,
              110,
              118,
              97,
              108,
              105,
              100,
              32,
              67,
              114,
              101,
              100,
              101,
              110,
              116,
              105,
              97,
              108,
              115,
              34,
              44,
              10,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              34,
              100,
              111,
              109,
              97,
              105,
              110,
              34,
              58,
              32,
              34,
              103,
              108,
              111,
              98,
              97,
              108,
              34,
              44,
              10,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              34,
              114,
              101,
              97,
              115,
              111,
              110,
              34,
              58,
              32,
              34,
              97,
              117,
              116,
              104,
              69,
              114,
              114,
              111,
              114,
              34,
              44,
              10,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              34,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              34,
              58,
              32,
              34,
              65,
              117,
              116,
              104,
              111,
              114,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              34,
              44,
              10,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              34,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              84,
              121,
              112,
              101,
              34,
              58,
              32,
              34,
              104,
              101,
              97,
              100,
              101,
              114,
              34,
              10,
              32,
              32,
              32,
              32,
              32,
              32,
              125,
              10,
              32,
              32,
              32,
              32,
              93,
              44,
              10,
              32,
              32,
              32,
              32,
              34,
              115,
              116,
              97,
              116,
              117,
              115,
              34,
              58,
              32,
              34,
              85,
              78,
              65,
              85,
              84,
              72,
              69,
              78,
              84,
              73,
              67,
              65,
              84,
              69,
              68,
              34,
              10,
              32,
              32,
              125,
              10,
              125,
              10
            ]
          },
          "cookie": [],
          "responseTime": 248,
          "responseSize": 507
        },
        "id": "f053ddc8-a8a6-4796-a23f-c89737b34582",
        "testScript": [
          {
            "error": {
              "type": "Error",
              "name": "TypeError",
              "message": "Cannot read properties of undefined (reading 'body')",
              "checksum": "84cdf816575ab0f9f940280bf048b20c",
              "id": "3e26f58c-fbdc-430e-b817-53e241a55863",
              "timestamp": 1698733441595,
              "stacktrace": []
            }
          }
        ]
      },
      {
        "cursor": {
          "ref": "068a60bb-08bc-4630-8a16-c88e2d3f4ffc",
          "length": 12,
          "cycles": 1,
          "position": 8,
          "iteration": 0,
          "httpRequestId": "1e4b9461-e264-4f8f-8c0b-09a970a796eb"
        },
        "item": {
          "id": "8d884a10-0abd-48de-9b8a-47bfc7ff13cd",
          "name": "verify-reset-password-token",
          "request": {
            "url": {
              "path": [
                "users",
                "verify-reset-password-token"
              ],
              "host": [
                "{{exp_url}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "accept",
                "value": "application/json"
              },
              {
                "key": "Content-Type",
                "value": "application/x-www-form-urlencoded"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "urlencoded",
              "urlencoded": [
                {
                  "key": "token",
                  "value": "{{resetPasswordToken}}"
                }
              ]
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "799e647c-efdd-4528-bf8c-ec8d1e1a4b55",
                "type": "text/javascript",
                "exec": [
                  "let jsonData = pm.response.json();\r",
                  "\r",
                  "message = [\r",
                  "    \"The provided password reset token is valid\",\r",
                  "    \"Bad Request\",\r",
                  "    \"Internal Error Server\",\r",
                  "    \"The provided password reset token is invalid or has expired\"\r",
                  "]\r",
                  "\r",
                  "status = [200,400,401,500]\r",
                  "\r",
                  "if (jsonData.success === false) {\r",
                  "    pm.test(`**** E R R O R ***** ${jsonData.message}`, function(){\r",
                  "        // pm.expect(jsonData.message).to.eql(\"No authentication token specified in x-auth-token header\");\r",
                  "        pm.expect(jsonData.message).to.be.oneOf(message);\r",
                  "    });\r",
                  "\r",
                  "    pm.test(`Check the multiple error status code ${jsonData.status}`, function(){\r",
                  "        pm.expect(pm.response.code).to.be.oneOf(status);\r",
                  "    });\r",
                  "\r",
                  "\r",
                  "}\r",
                  "else {\r",
                  "    pm.test(`*** S U C C E S S *** ${jsonData.message}`, function(){\r",
                  "        // pm.expect(jsonData.message).to.equal(\"Profile successful\");\r",
                  "        pm.expect(jsonData.message).to.be.oneOf(message);\r",
                  "    });\r",
                  "\r",
                  "    pm.test(\"Check the response time\", function(){\r",
                  "    pm.expect(pm.response.responseTime).to.be.below(6000);\r",
                  "    });\r",
                  "\r",
                  "    pm.test(`Check the Status code ${jsonData.status}`, function(){\r",
                  "        pm.expect(pm.response.code).to.be.oneOf(status);\r",
                  "    });\r",
                  "\r",
                  "    pm.test(\"Body matches multiple string\",function(){\r",
                  "    pm.expect(pm.response.text()).to.include(\"message\");\r",
                  "});\r",
                  "\r",
                  "}\r",
                  "\r",
                  ""
                ],
                "_lastExecutionId": "c1d6d515-485d-45cb-ab2b-15662e3830f7"
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "id": "46fb041c-0790-4ccb-a117-d6dcbb44aa15",
                "type": "text/javascript",
                "exec": [
                  ""
                ],
                "_lastExecutionId": "48a955fd-f392-4b00-9034-2a273d9fea6d"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "https",
            "path": [
              "notes",
              "api",
              "users",
              "verify-reset-password-token"
            ],
            "host": [
              "practice",
              "expandtesting",
              "com"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "accept",
              "value": "application/json"
            },
            {
              "key": "Content-Type",
              "value": "application/x-www-form-urlencoded"
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.33.0",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "cb79ee2a-f808-4011-9b2d-47ec00869d8f",
              "system": true
            },
            {
              "key": "Host",
              "value": "practice.expandtesting.com",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            },
            {
              "key": "Content-Length",
              "value": "6",
              "system": true
            },
            {
              "key": "Cookie",
              "value": "express:sess=eyJmbGFzaCI6e319; express:sess.sig=tdt42nQZiQvICqmrvHQ1_16fHk0",
              "system": true
            }
          ],
          "method": "POST",
          "body": {
            "mode": "urlencoded",
            "urlencoded": [
              {
                "key": "token",
                "value": ""
              }
            ]
          }
        },
        "response": {
          "id": "d4317121-0bf7-4713-bdc3-960b0558f80d",
          "status": "Unauthorized",
          "code": 401,
          "header": [
            {
              "key": "access-control-allow-origin",
              "value": "*"
            },
            {
              "key": "access-control-allow-credentials",
              "value": "true"
            },
            {
              "key": "access-control-allow-methods",
              "value": "GET, POST, PUT, DELETE, PATCH"
            },
            {
              "key": "access-control-allow-headers",
              "value": "Origin, X-Requested-With, Authorization, Content-Type, Accept, X-Auth-Token"
            },
            {
              "key": "content-type",
              "value": "application/json; charset=utf-8"
            },
            {
              "key": "content-encoding",
              "value": "br"
            },
            {
              "key": "etag",
              "value": "W/\"66-NT6rAcg1B9oukcUYUcaBm5tuJ1I\""
            },
            {
              "key": "date",
              "value": "Tue, 31 Oct 2023 06:23:06 GMT"
            },
            {
              "key": "connection",
              "value": "keep-alive"
            },
            {
              "key": "keep-alive",
              "value": "timeout=5"
            },
            {
              "key": "transfer-encoding",
              "value": "chunked"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              115,
              117,
              99,
              99,
              101,
              115,
              115,
              34,
              58,
              102,
              97,
              108,
              115,
              101,
              44,
              34,
              115,
              116,
              97,
              116,
              117,
              115,
              34,
              58,
              52,
              48,
              49,
              44,
              34,
              109,
              101,
              115,
              115,
              97,
              103,
              101,
              34,
              58,
              34,
              84,
              104,
              101,
              32,
              112,
              114,
              111,
              118,
              105,
              100,
              101,
              100,
              32,
              112,
              97,
              115,
              115,
              119,
              111,
              114,
              100,
              32,
              114,
              101,
              115,
              101,
              116,
              32,
              116,
              111,
              107,
              101,
              110,
              32,
              105,
              115,
              32,
              105,
              110,
              118,
              97,
              108,
              105,
              100,
              32,
              111,
              114,
              32,
              104,
              97,
              115,
              32,
              101,
              120,
              112,
              105,
              114,
              101,
              100,
              34,
              125
            ]
          },
          "cookie": [],
          "responseTime": 333,
          "responseSize": 102
        },
        "id": "8d884a10-0abd-48de-9b8a-47bfc7ff13cd",
        "assertions": [
          {
            "assertion": "**** E R R O R ***** The provided password reset token is invalid or has expired",
            "skipped": false
          },
          {
            "assertion": "Check the multiple error status code 401",
            "skipped": false
          }
        ]
      },
      {
        "cursor": {
          "ref": "80593e73-a090-4aad-9755-d2e996545b42",
          "length": 12,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "a0acc42c-dd69-4df1-a085-da89620ae20f"
        },
        "item": {
          "id": "740f7a4b-9db6-4b38-a333-0ad712a2b2a2",
          "name": "reset-password",
          "request": {
            "url": {
              "protocol": "https",
              "path": [
                "notes",
                "api",
                "users",
                "reset-password"
              ],
              "host": [
                "practice",
                "expandtesting",
                "com"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "accept",
                "value": "application/json"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\r\n    \"token\":\"{{resetPasswordToken}}\",\r\n    \"newPassword\":\"{{$randomPassword}}\"\r\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "7cdc8324-5612-42e4-8f85-49037412238b",
                "type": "text/javascript",
                "exec": [
                  "let jsonData = pm.response.json();\r",
                  "\r",
                  "let newPassword = JSON.parse(pm.request.body.raw).newPassword;\r",
                  "pm.environment.set('password', newPassword);\r",
                  "\r",
                  "\r",
                  "message = [\r",
                  "    \"The password has been successfully reset\",\r",
                  "    \"Token must be between 64 characters\",\r",
                  "    \"Bad Request\",\r",
                  "    \"The password was successfully updated\",\r",
                  "    \"Internal Error Server\",\r",
                  "    \"New password must be between 6 and 30 characters\",\r",
                  "    \"The password reset token is invalid or has expired\"\r",
                  "]\r",
                  "\r",
                  "status = [200,400,401,500]\r",
                  "\r",
                  "if (jsonData.success === false) {\r",
                  "    pm.test(`**** E R R O R ***** ${jsonData.message}`, function(){\r",
                  "        // pm.expect(jsonData.message).to.eql(\"No authentication token specified in x-auth-token header\");\r",
                  "        pm.expect(jsonData.message).to.be.oneOf(message);\r",
                  "    });\r",
                  "\r",
                  "    pm.test(`Check the multiple error status code ${jsonData.status}`, function(){\r",
                  "        pm.expect(pm.response.code).to.be.oneOf(status);\r",
                  "    });\r",
                  "\r",
                  "\r",
                  "}\r",
                  "else {\r",
                  "    pm.test(`*** S U C C E S S *** ${jsonData.message}`, function(){\r",
                  "        // pm.expect(jsonData.message).to.equal(\"Profile successful\");\r",
                  "        pm.expect(jsonData.message).to.be.oneOf(message);\r",
                  "    });\r",
                  "\r",
                  "    pm.test(\"Check the response time\", function(){\r",
                  "    pm.expect(pm.response.responseTime).to.be.below(6000);\r",
                  "    });\r",
                  "\r",
                  "    pm.test(`Check the Status code ${jsonData.status}`, function(){\r",
                  "        pm.expect(pm.response.code).to.be.oneOf(status);\r",
                  "    });\r",
                  "\r",
                  "    pm.test(\"Body matches multiple string\",function(){\r",
                  "    pm.expect(pm.response.text()).to.include(\"message\");\r",
                  "});\r",
                  "\r",
                  "}\r",
                  "\r",
                  "\r",
                  ""
                ],
                "_lastExecutionId": "5d234639-2098-4725-8401-094ce8fa851b"
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "id": "1268a1ec-48a3-4dfd-8fc8-3c14d0fa7f28",
                "type": "text/javascript",
                "exec": [
                  ""
                ],
                "_lastExecutionId": "3e5db1d1-0c8c-4a29-8797-f14a01a4bedc"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "https",
            "path": [
              "notes",
              "api",
              "users",
              "reset-password"
            ],
            "host": [
              "practice",
              "expandtesting",
              "com"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "accept",
              "value": "application/json"
            },
            {
              "key": "Content-Type",
              "value": "application/json",
              "system": true
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.33.0",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "ba3de1aa-dc06-401d-ac59-2d81ea04e976",
              "system": true
            },
            {
              "key": "Host",
              "value": "practice.expandtesting.com",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            },
            {
              "key": "Content-Length",
              "value": "58",
              "system": true
            },
            {
              "key": "Cookie",
              "value": "express:sess=eyJmbGFzaCI6e319; express:sess.sig=tdt42nQZiQvICqmrvHQ1_16fHk0",
              "system": true
            }
          ],
          "method": "POST",
          "body": {
            "mode": "raw",
            "raw": "{\r\n    \"token\":\"\",\r\n    \"newPassword\":\"sX7oT2_SwNNwNsg\"\r\n}",
            "options": {
              "raw": {
                "language": "json"
              }
            }
          }
        },
        "response": {
          "id": "be2ace72-eac5-4965-9b2f-dd03dd25b485",
          "status": "Bad Request",
          "code": 400,
          "header": [
            {
              "key": "access-control-allow-origin",
              "value": "*"
            },
            {
              "key": "access-control-allow-credentials",
              "value": "true"
            },
            {
              "key": "access-control-allow-methods",
              "value": "GET, POST, PUT, DELETE, PATCH"
            },
            {
              "key": "access-control-allow-headers",
              "value": "Origin, X-Requested-With, Authorization, Content-Type, Accept, X-Auth-Token"
            },
            {
              "key": "content-type",
              "value": "application/json; charset=utf-8"
            },
            {
              "key": "content-encoding",
              "value": "br"
            },
            {
              "key": "etag",
              "value": "W/\"4e-BEuIlQyiJYZodMnKNdmPABKE/TA\""
            },
            {
              "key": "date",
              "value": "Tue, 31 Oct 2023 06:23:06 GMT"
            },
            {
              "key": "connection",
              "value": "keep-alive"
            },
            {
              "key": "keep-alive",
              "value": "timeout=5"
            },
            {
              "key": "transfer-encoding",
              "value": "chunked"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              115,
              117,
              99,
              99,
              101,
              115,
              115,
              34,
              58,
              102,
              97,
              108,
              115,
              101,
              44,
              34,
              115,
              116,
              97,
              116,
              117,
              115,
              34,
              58,
              52,
              48,
              48,
              44,
              34,
              109,
              101,
              115,
              115,
              97,
              103,
              101,
              34,
              58,
              34,
              84,
              111,
              107,
              101,
              110,
              32,
              109,
              117,
              115,
              116,
              32,
              98,
              101,
              32,
              98,
              101,
              116,
              119,
              101,
              101,
              110,
              32,
              54,
              52,
              32,
              99,
              104,
              97,
              114,
              97,
              99,
              116,
              101,
              114,
              115,
              34,
              125
            ]
          },
          "cookie": [],
          "responseTime": 301,
          "responseSize": 78
        },
        "id": "740f7a4b-9db6-4b38-a333-0ad712a2b2a2",
        "assertions": [
          {
            "assertion": "**** E R R O R ***** Token must be between 64 characters",
            "skipped": false
          },
          {
            "assertion": "Check the multiple error status code 400",
            "skipped": false
          }
        ]
      },
      {
        "cursor": {
          "ref": "19928888-b432-4486-ae97-7400c57e5176",
          "length": 12,
          "cycles": 1,
          "position": 10,
          "iteration": 0,
          "httpRequestId": "02be1ec7-23b9-464d-8f88-b8051eeae762"
        },
        "item": {
          "id": "93821c3b-e028-4eda-a749-05d87d7e6a94",
          "name": "change-password",
          "request": {
            "url": {
              "path": [
                "users",
                "change-password"
              ],
              "host": [
                "{{exp_url}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "accept",
                "value": "application/json"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\r\n    \"currentPassword\":\"{{password}}\",\r\n    \"newPassword\":\"{{$randomPassword}}\"\r\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "auth": {
              "type": "apikey",
              "apikey": [
                {
                  "type": "string",
                  "value": "{{exp_token}}",
                  "key": "value"
                },
                {
                  "type": "string",
                  "value": "x-auth-token",
                  "key": "key"
                }
              ]
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "3eca22f1-7d4a-4832-8b68-54badb876aa6",
                "type": "text/javascript",
                "exec": [
                  "pm.environment.get(\"password\");\r",
                  "\r",
                  "let newPassword = JSON.parse(pm.request.body.raw).newPassword;\r",
                  "pm.environment.set('password', newPassword);\r",
                  "\r",
                  "let jsonData = pm.response.json();\r",
                  "message = [\r",
                  "    \"The password has been successfully reset\",\r",
                  "    \"Token must be between 64 characters\",\r",
                  "    \"Bad Request\",\r",
                  "    \"The password was successfully updated\",\r",
                  "    \"Internal Error Server\",\r",
                  "    \"New password must be between 6 and 30 characters\",\r",
                  "    \"The password reset token is invalid or has expired\"\r",
                  "]\r",
                  "\r",
                  "status = [200,400,401,500]\r",
                  "\r",
                  "if (jsonData.success === false) {\r",
                  "    pm.test(`**** E R R O R ***** ${jsonData.message}`, function(){\r",
                  "        // pm.expect(jsonData.message).to.eql(\"No authentication token specified in x-auth-token header\");\r",
                  "        pm.expect(jsonData.message).to.be.oneOf(message);\r",
                  "    });\r",
                  "\r",
                  "    pm.test(`Check the multiple error status code ${jsonData.status}`, function(){\r",
                  "        pm.expect(pm.response.code).to.be.oneOf(status);\r",
                  "    });\r",
                  "\r",
                  "\r",
                  "}\r",
                  "else {\r",
                  "    pm.test(`*** S U C C E S S *** ${jsonData.message}`, function(){\r",
                  "        // pm.expect(jsonData.message).to.equal(\"Profile successful\");\r",
                  "        pm.expect(jsonData.message).to.be.oneOf(message);\r",
                  "    });\r",
                  "\r",
                  "    pm.test(\"Check the response time\", function(){\r",
                  "    pm.expect(pm.response.responseTime).to.be.below(6000);\r",
                  "    });\r",
                  "\r",
                  "    pm.test(`Check the Status code ${jsonData.status}`, function(){\r",
                  "        pm.expect(pm.response.code).to.be.oneOf(status);\r",
                  "    });\r",
                  "\r",
                  "    pm.test(\"Body matches multiple string\",function(){\r",
                  "    pm.expect(pm.response.text()).to.include(\"message\");\r",
                  "});\r",
                  "\r",
                  "}\r",
                  ""
                ],
                "_lastExecutionId": "64be3638-86ca-4200-b966-7a137b03eb2e"
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "id": "aa473681-09fc-4673-a2fe-7012cf4e42e9",
                "type": "text/javascript",
                "exec": [
                  "console.log(pm.environment.get(\"password\"));\r",
                  "\r",
                  "\r",
                  "\r",
                  ""
                ],
                "_lastExecutionId": "fb6fc291-ccb6-46ad-9bb8-0e4bf2cf736d"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "https",
            "path": [
              "notes",
              "api",
              "users",
              "change-password"
            ],
            "host": [
              "practice",
              "expandtesting",
              "com"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "accept",
              "value": "application/json"
            },
            {
              "key": "Content-Type",
              "value": "application/json",
              "system": true
            },
            {
              "key": "x-auth-token",
              "value": "",
              "system": true
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.33.0",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "a1e316f4-b2fc-4ad8-8242-71c0618e6f63",
              "system": true
            },
            {
              "key": "Host",
              "value": "practice.expandtesting.com",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            },
            {
              "key": "Content-Length",
              "value": "83",
              "system": true
            },
            {
              "key": "Cookie",
              "value": "express:sess=eyJmbGFzaCI6e319; express:sess.sig=tdt42nQZiQvICqmrvHQ1_16fHk0",
              "system": true
            }
          ],
          "method": "POST",
          "body": {
            "mode": "raw",
            "raw": "{\r\n    \"currentPassword\":\"sX7oT2_SwNNwNsg\",\r\n    \"newPassword\":\"v8cIXvw3VhH98Ib\"\r\n}",
            "options": {
              "raw": {
                "language": "json"
              }
            }
          },
          "auth": {
            "type": "apikey",
            "apikey": [
              {
                "type": "string",
                "value": "",
                "key": "value"
              },
              {
                "type": "string",
                "value": "x-auth-token",
                "key": "key"
              }
            ]
          }
        },
        "response": {
          "id": "e99389cc-fd76-4c04-a759-f53da8c2896a",
          "status": "Unauthorized",
          "code": 401,
          "header": [
            {
              "key": "access-control-allow-origin",
              "value": "*"
            },
            {
              "key": "access-control-allow-credentials",
              "value": "true"
            },
            {
              "key": "access-control-allow-methods",
              "value": "GET, POST, PUT, DELETE, PATCH"
            },
            {
              "key": "access-control-allow-headers",
              "value": "Origin, X-Requested-With, Authorization, Content-Type, Accept, X-Auth-Token"
            },
            {
              "key": "content-type",
              "value": "application/json; charset=utf-8"
            },
            {
              "key": "content-encoding",
              "value": "br"
            },
            {
              "key": "etag",
              "value": "W/\"63-kaKfzTW2quBGOpz1E3SeBltpHeE\""
            },
            {
              "key": "date",
              "value": "Tue, 31 Oct 2023 06:23:06 GMT"
            },
            {
              "key": "connection",
              "value": "keep-alive"
            },
            {
              "key": "keep-alive",
              "value": "timeout=5"
            },
            {
              "key": "transfer-encoding",
              "value": "chunked"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              115,
              117,
              99,
              99,
              101,
              115,
              115,
              34,
              58,
              102,
              97,
              108,
              115,
              101,
              44,
              34,
              115,
              116,
              97,
              116,
              117,
              115,
              34,
              58,
              52,
              48,
              49,
              44,
              34,
              109,
              101,
              115,
              115,
              97,
              103,
              101,
              34,
              58,
              34,
              78,
              111,
              32,
              97,
              117,
              116,
              104,
              101,
              110,
              116,
              105,
              99,
              97,
              116,
              105,
              111,
              110,
              32,
              116,
              111,
              107,
              101,
              110,
              32,
              115,
              112,
              101,
              99,
              105,
              102,
              105,
              101,
              100,
              32,
              105,
              110,
              32,
              120,
              45,
              97,
              117,
              116,
              104,
              45,
              116,
              111,
              107,
              101,
              110,
              32,
              104,
              101,
              97,
              100,
              101,
              114,
              34,
              125
            ]
          },
          "cookie": [],
          "responseTime": 297,
          "responseSize": 99
        },
        "id": "93821c3b-e028-4eda-a749-05d87d7e6a94",
        "assertions": [
          {
            "assertion": "**** E R R O R ***** No authentication token specified in x-auth-token header",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "**** E R R O R ***** No authentication token specified in x-auth-token header",
              "message": "expected 'No authentication token specified in …' to be one of [ …(7) ]",
              "stack": "AssertionError: expected 'No authentication token specified in …' to be one of [ …(7) ]\n   at Object.eval sandbox-script.js:1:11)"
            }
          },
          {
            "assertion": "Check the multiple error status code 401",
            "skipped": false
          }
        ]
      },
      {
        "cursor": {
          "ref": "dc17e21c-6c1e-484e-8928-fe1cfa0772cb",
          "length": 12,
          "cycles": 1,
          "position": 11,
          "iteration": 0,
          "httpRequestId": "ddfff249-01e5-4cdf-97e5-020b02123e95"
        },
        "item": {
          "id": "f4c8e78d-5700-43a2-8e20-cb1a0de26ce9",
          "name": "UserLogout",
          "request": {
            "url": {
              "path": [
                "users",
                "logout"
              ],
              "host": [
                "{{exp_url}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "accept",
                "value": "application/json"
              }
            ],
            "method": "DELETE",
            "auth": {
              "type": "apikey",
              "apikey": [
                {
                  "type": "string",
                  "value": "{{exp_token}}",
                  "key": "value"
                },
                {
                  "type": "string",
                  "value": "x-auth-token",
                  "key": "key"
                }
              ]
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "43a38bb6-0063-463b-9a7b-ea0674d209fe",
                "type": "text/javascript",
                "exec": [
                  "let jsonData = pm.response.json();\r",
                  "message = [\r",
                  "    \"User has been successfully logged out\",\r",
                  "    \"Token must be between 64 characters\",\r",
                  "    \"Bad Request\",\r",
                  "    \"Access token is not valid or has expired, you will need to login\",\r",
                  "    \"No authentication token specified in x-auth-token header\",\r",
                  "    \"Internal Error Server\",\r",
                  "    \"Successful Request\",\r",
                  "    \"Unauthorized Request\"\r",
                  "]\r",
                  "\r",
                  "status = [200,400,401,500]\r",
                  "\r",
                  "if (jsonData.success === false) {\r",
                  "    pm.test(`**** E R R O R ***** ${jsonData.message}`, function(){\r",
                  "        // pm.expect(jsonData.message).to.eql(\"No authentication token specified in x-auth-token header\");\r",
                  "        pm.expect(jsonData.message).to.be.oneOf(message);\r",
                  "    });\r",
                  "\r",
                  "    pm.test(`Check the multiple error status code ${jsonData.status}`, function(){\r",
                  "        pm.expect(pm.response.code).to.be.oneOf(status);\r",
                  "    });\r",
                  "\r",
                  "\r",
                  "}\r",
                  "else {\r",
                  "    pm.test(`*** S U C C E S S *** ${jsonData.message}`, function(){\r",
                  "        // pm.expect(jsonData.message).to.equal(\"Profile successful\");\r",
                  "        pm.expect(jsonData.message).to.be.oneOf(message);\r",
                  "    });\r",
                  "\r",
                  "    pm.test(\"Check the response time\", function(){\r",
                  "    pm.expect(pm.response.responseTime).to.be.below(6000);\r",
                  "    });\r",
                  "\r",
                  "    pm.test(`Check the Status code ${jsonData.status}`, function(){\r",
                  "        pm.expect(pm.response.code).to.be.oneOf(status);\r",
                  "    });\r",
                  "\r",
                  "    pm.test(\"Body matches multiple string\",function(){\r",
                  "    pm.expect(pm.response.text()).to.include(\"message\");\r",
                  "});\r",
                  "\r",
                  "}\r",
                  "\r",
                  "postman.setNextRequest(null);"
                ],
                "_lastExecutionId": "c7d982d4-a8dc-460f-a106-6e0c01643e82"
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "id": "e8ae662d-a080-4bf5-a817-754113435b5e",
                "type": "text/javascript",
                "exec": [
                  ""
                ],
                "_lastExecutionId": "0b0d404e-4117-40fc-9982-a95619506052"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "https",
            "path": [
              "notes",
              "api",
              "users",
              "logout"
            ],
            "host": [
              "practice",
              "expandtesting",
              "com"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "accept",
              "value": "application/json"
            },
            {
              "key": "x-auth-token",
              "value": "",
              "system": true
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.33.0",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "50e5a233-bbf0-4aab-b627-cd83f4b0ce79",
              "system": true
            },
            {
              "key": "Host",
              "value": "practice.expandtesting.com",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            },
            {
              "key": "Cookie",
              "value": "express:sess=eyJmbGFzaCI6e319; express:sess.sig=tdt42nQZiQvICqmrvHQ1_16fHk0",
              "system": true
            }
          ],
          "method": "DELETE",
          "auth": {
            "type": "apikey",
            "apikey": [
              {
                "type": "string",
                "value": "",
                "key": "value"
              },
              {
                "type": "string",
                "value": "x-auth-token",
                "key": "key"
              }
            ]
          }
        },
        "response": {
          "id": "5a6fcd5a-6268-4a0d-b316-fd10666772f5",
          "status": "Unauthorized",
          "code": 401,
          "header": [
            {
              "key": "access-control-allow-origin",
              "value": "*"
            },
            {
              "key": "access-control-allow-credentials",
              "value": "true"
            },
            {
              "key": "access-control-allow-methods",
              "value": "GET, POST, PUT, DELETE, PATCH"
            },
            {
              "key": "access-control-allow-headers",
              "value": "Origin, X-Requested-With, Authorization, Content-Type, Accept, X-Auth-Token"
            },
            {
              "key": "content-type",
              "value": "application/json; charset=utf-8"
            },
            {
              "key": "content-encoding",
              "value": "br"
            },
            {
              "key": "etag",
              "value": "W/\"63-kaKfzTW2quBGOpz1E3SeBltpHeE\""
            },
            {
              "key": "date",
              "value": "Tue, 31 Oct 2023 06:23:07 GMT"
            },
            {
              "key": "connection",
              "value": "keep-alive"
            },
            {
              "key": "keep-alive",
              "value": "timeout=5"
            },
            {
              "key": "transfer-encoding",
              "value": "chunked"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              115,
              117,
              99,
              99,
              101,
              115,
              115,
              34,
              58,
              102,
              97,
              108,
              115,
              101,
              44,
              34,
              115,
              116,
              97,
              116,
              117,
              115,
              34,
              58,
              52,
              48,
              49,
              44,
              34,
              109,
              101,
              115,
              115,
              97,
              103,
              101,
              34,
              58,
              34,
              78,
              111,
              32,
              97,
              117,
              116,
              104,
              101,
              110,
              116,
              105,
              99,
              97,
              116,
              105,
              111,
              110,
              32,
              116,
              111,
              107,
              101,
              110,
              32,
              115,
              112,
              101,
              99,
              105,
              102,
              105,
              101,
              100,
              32,
              105,
              110,
              32,
              120,
              45,
              97,
              117,
              116,
              104,
              45,
              116,
              111,
              107,
              101,
              110,
              32,
              104,
              101,
              97,
              100,
              101,
              114,
              34,
              125
            ]
          },
          "cookie": [],
          "responseTime": 296,
          "responseSize": 99
        },
        "id": "f4c8e78d-5700-43a2-8e20-cb1a0de26ce9",
        "assertions": [
          {
            "assertion": "**** E R R O R ***** No authentication token specified in x-auth-token header",
            "skipped": false
          },
          {
            "assertion": "Check the multiple error status code 401",
            "skipped": false
          }
        ]
      }
    ],
    "transfers": {
      "responseTotal": 2309
    },
    "failures": [
      {
        "error": {
          "name": "AssertionError",
          "index": 0,
          "test": "Check the success msg is true in body?",
          "message": "expected false to deeply equal true",
          "stack": "AssertionError: expected false to deeply equal true\n   at Object.eval sandbox-script.js:1:2)",
          "checksum": "60f8fb2f58ec9e0399a8c4318b5f5e12",
          "id": "f511faaf-0c19-4a83-93cb-f0030a4ad4bd",
          "timestamp": 1698733438928,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 1,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 2,
              "native": false
            }
          ]
        },
        "at": "assertion:0 in test-script",
        "source": {
          "id": "d3b70abb-4c44-4d96-b946-e8ef2e19907f",
          "name": "RegisterUser",
          "request": {
            "url": {
              "path": [
                "users",
                "register"
              ],
              "host": [
                "{{exp_url}}"
              ],
              "query": [],
              "variable": []
            },
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\r\n    \"name\":\"{{$randomFullName}}\",\r\n    \"email\":\"{{randomEmail}}\",\r\n    \"password\":\"{{$randomPassword}}\"\r\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "4f0c3c3d-4171-4bea-b8a8-3fd567809f0d",
                "type": "text/javascript",
                "exec": [
                  "var jsonData = pm.response.json();\r",
                  "\r",
                  "pm.test(\"Check the success msg is true in body?\", function(){\r",
                  "    pm.expect(jsonData.success).to.eql(true);\r",
                  "});\r",
                  "\r",
                  "pm.test(\"Check the body message\", function(){\r",
                  "    pm.expect(jsonData.message).to.eql(\"User account created successfully\");\r",
                  "});\r",
                  "\r",
                  "pm.test(\"Verify the values are not null\", function(){\r",
                  "    pm.expect(jsonData.data.id, \"Id is not null\").to.not.be.null;\r",
                  "    pm.expect(jsonData.data.name, \"name is not null\").to.not.be.null;\r",
                  "    pm.expect(jsonData.data.email, \"email is not null\").to.not.be.null;\r",
                  "});\r",
                  "\r",
                  "pm.test(\"response property matching an environment variable\", function(){\r",
                  "    pm.expect(jsonData.name).to.eql(pm.environment.get(\"name\"));\r",
                  "});\r",
                  "\r",
                  "pm.test(\"Check the response time\", function(){\r",
                  "    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
                  "});\r",
                  "\r",
                  "pm.environment.set(\"id\", jsonData.data.id);\r",
                  "pm.environment.set(\"name\", jsonData.data.name);\r",
                  "\r",
                  "let password = JSON.parse(pm.request.body.raw).password;\r",
                  "pm.environment.set('password', password);\r",
                  "\r",
                  "message = [\r",
                  "    \"Access token is not valid or has expired, you will need to login\",\r",
                  "    \"No authentication token specified in x-auth-token header\",\r",
                  "    \"User name must be between 4 and 30 characters\",\r",
                  "    \"Phone number should be between 8 and 20 digits\",\r",
                  "    \"Unauthorized Request\",\r",
                  "    \"Internal Error Server\",\r",
                  "    \"Profile updated successful\",\r",
                  "    \"User account created successfully\",\r",
                  "    \"Not Found\",\r",
                  "    \"Bad Request\",\r",
                  "    \"An account already exists with the same email address\"\r",
                  "];\r",
                  "\r",
                  "status = [400,401,404,409,500,200,201];\r",
                  "\r",
                  "if (jsonData.success === false) {\r",
                  "    pm.test(`**** E R R O R ***** ${jsonData.message}`, function(){\r",
                  "        pm.expect(jsonData.message).to.be.oneOf(message);\r",
                  "    });\r",
                  "\r",
                  "    pm.test(`Check the multiple error status code ${jsonData.status}`, function(){\r",
                  "        pm.expect(pm.response.code).to.be.oneOf(status);\r",
                  "    });\r",
                  "}\r",
                  "else {\r",
                  "    pm.test(`*** S U C C E S S *** ${jsonData.message}`, function(){\r",
                  "        pm.expect(jsonData.message).to.be.oneOf(message);\r",
                  "    });\r",
                  "\r",
                  "    pm.test(`Check the Status code ${jsonData.status}`, function(){\r",
                  "        pm.expect(pm.response.code).to.be.oneOf(status);\r",
                  "    });\r",
                  "}"
                ],
                "_lastExecutionId": "2fbfcb58-035a-4d0d-afa2-7fc9d5239e13"
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "id": "3483ef69-d6b6-4835-8746-973a3f7a159e",
                "type": "text/javascript",
                "exec": [
                  "\r",
                  "// // Define the incrementEmail function\r",
                  "// function incrementEmail(email) {\r",
                  "//     const match = email.match(/\\+a(\\d+)/);\r",
                  "\r",
                  "//     if (match) {\r",
                  "//         const currentNumber = parseInt(match[1]);\r",
                  "//         const nextNumber = currentNumber + 1;\r",
                  "//         const incrementedEmail = email.replace(/\\+a\\d+/, `+a${nextNumber}`);\r",
                  "//         return incrementedEmail;\r",
                  "//     }\r",
                  "\r",
                  "//     return email;\r",
                  "// }\r",
                  "\r",
                  "\r",
                  "// const originalEmail = pm.environment.get(\"email\");\r",
                  "\r",
                  "\r",
                  "// if (originalEmail) {\r",
                  "//     // Use the incrementEmail function to get the incremented email\r",
                  "//     const incrementedEmail = incrementEmail(originalEmail);\r",
                  "\r",
                  "//     // Set the incremented email back to the environment\r",
                  "//     pm.environment.set(\"email\", incrementedEmail);\r",
                  "\r",
                  "//     console.log(\"OriginalEmail:\", originalEmail);\r",
                  "//     console.log(\"IncrementedEmail:\", incrementedEmail);\r",
                  "// } else {\r",
                  "//     console.error(\"Email environment variable not found.\");\r",
                  "// }\r",
                  "\r",
                  "// console.log(pm.environment.get(\"email\"));\r",
                  "\r",
                  "\r",
                  "// -------------------------------------------------------------------\r",
                  "// Define the base part of the email address\r",
                  "const baseEmail = pm.environment.get(\"baseEmail\");\r",
                  "\r",
                  "// Generate a random number between min and max (inclusive)\r",
                  "function getRandomNumber(min, max) {\r",
                  "    return Math.floor(Math.random() * (max - min + 1)) + min;\r",
                  "}\r",
                  "\r",
                  "// Generate a random sequence like +a151, +a152, +a153, and so on\r",
                  "const randomSequence = `+a${getRandomNumber(1, 999)}`;\r",
                  "\r",
                  "// Combine the base and random sequence to create the random email address\r",
                  "const randomEmail = `${baseEmail}${randomSequence}@gmail.com`;\r",
                  "\r",
                  "// Set the random email address as an environment variable for your request\r",
                  "pm.environment.set('randomEmail', randomEmail);\r",
                  "\r",
                  "\r",
                  ""
                ],
                "_lastExecutionId": "f0df73d6-9875-49de-aaed-2ffb46745ff0"
              }
            }
          ]
        },
        "parent": {
          "_": {
            "postman_id": "723ea9c3-0635-4605-b90c-d6d9e9835d8c",
            "exporter_id": "13852941",
            "collection_link": "https://galactic-astronaut-894425.postman.co/workspace/b6dafb4f-3507-4e58-a32d-dd31bf6ab148/collection/13852941-723ea9c3-0635-4605-b90c-d6d9e9835d8c?action=share&source=collection_link&creator=13852941"
          },
          "item": [
            {
              "id": "90407c19-d06c-4337-abb9-4dfc2fa17fc8",
              "name": "health_check",
              "request": {
                "url": {
                  "path": [
                    "health-check"
                  ],
                  "host": [
                    "{{exp_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "b075fb8f-9483-4909-a4a4-cf6344c6642b",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Check the Status code 200\", function(){\r",
                      "    pm.response.to.have.status(200);\r",
                      "});\r",
                      "\r",
                      "var jsonData = pm.response.json();\r",
                      "\r",
                      "pm.test(\"Check the success code in body\", function(){\r",
                      "    pm.expect(jsonData.success).to.eql(true);\r",
                      "});\r",
                      "\r",
                      "pm.test(\"Check the Status code in body\", function(){\r",
                      "    pm.expect(jsonData.status).to.eql(200);\r",
                      "});\r",
                      "\r",
                      "pm.test(\"Check the message in body\", function(){\r",
                      "    pm.expect(jsonData.message).to.eql(\"Notes API is Running\");\r",
                      "});\r",
                      "\r",
                      "\r",
                      ""
                    ],
                    "_lastExecutionId": "dcf22f24-f95a-4d61-981a-68f2474c0b1d"
                  }
                },
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "15079d7d-2fc3-468b-b923-1fd697b2156e",
                    "type": "text/javascript",
                    "exec": [
                      ""
                    ],
                    "_lastExecutionId": "a57965c9-dfeb-425b-a87b-14b41a981af7"
                  }
                }
              ]
            },
            {
              "id": "d3b70abb-4c44-4d96-b946-e8ef2e19907f",
              "name": "RegisterUser",
              "request": {
                "url": {
                  "path": [
                    "users",
                    "register"
                  ],
                  "host": [
                    "{{exp_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n    \"name\":\"{{$randomFullName}}\",\r\n    \"email\":\"{{randomEmail}}\",\r\n    \"password\":\"{{$randomPassword}}\"\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "4f0c3c3d-4171-4bea-b8a8-3fd567809f0d",
                    "type": "text/javascript",
                    "exec": [
                      "var jsonData = pm.response.json();\r",
                      "\r",
                      "pm.test(\"Check the success msg is true in body?\", function(){\r",
                      "    pm.expect(jsonData.success).to.eql(true);\r",
                      "});\r",
                      "\r",
                      "pm.test(\"Check the body message\", function(){\r",
                      "    pm.expect(jsonData.message).to.eql(\"User account created successfully\");\r",
                      "});\r",
                      "\r",
                      "pm.test(\"Verify the values are not null\", function(){\r",
                      "    pm.expect(jsonData.data.id, \"Id is not null\").to.not.be.null;\r",
                      "    pm.expect(jsonData.data.name, \"name is not null\").to.not.be.null;\r",
                      "    pm.expect(jsonData.data.email, \"email is not null\").to.not.be.null;\r",
                      "});\r",
                      "\r",
                      "pm.test(\"response property matching an environment variable\", function(){\r",
                      "    pm.expect(jsonData.name).to.eql(pm.environment.get(\"name\"));\r",
                      "});\r",
                      "\r",
                      "pm.test(\"Check the response time\", function(){\r",
                      "    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
                      "});\r",
                      "\r",
                      "pm.environment.set(\"id\", jsonData.data.id);\r",
                      "pm.environment.set(\"name\", jsonData.data.name);\r",
                      "\r",
                      "let password = JSON.parse(pm.request.body.raw).password;\r",
                      "pm.environment.set('password', password);\r",
                      "\r",
                      "message = [\r",
                      "    \"Access token is not valid or has expired, you will need to login\",\r",
                      "    \"No authentication token specified in x-auth-token header\",\r",
                      "    \"User name must be between 4 and 30 characters\",\r",
                      "    \"Phone number should be between 8 and 20 digits\",\r",
                      "    \"Unauthorized Request\",\r",
                      "    \"Internal Error Server\",\r",
                      "    \"Profile updated successful\",\r",
                      "    \"User account created successfully\",\r",
                      "    \"Not Found\",\r",
                      "    \"Bad Request\",\r",
                      "    \"An account already exists with the same email address\"\r",
                      "];\r",
                      "\r",
                      "status = [400,401,404,409,500,200,201];\r",
                      "\r",
                      "if (jsonData.success === false) {\r",
                      "    pm.test(`**** E R R O R ***** ${jsonData.message}`, function(){\r",
                      "        pm.expect(jsonData.message).to.be.oneOf(message);\r",
                      "    });\r",
                      "\r",
                      "    pm.test(`Check the multiple error status code ${jsonData.status}`, function(){\r",
                      "        pm.expect(pm.response.code).to.be.oneOf(status);\r",
                      "    });\r",
                      "}\r",
                      "else {\r",
                      "    pm.test(`*** S U C C E S S *** ${jsonData.message}`, function(){\r",
                      "        pm.expect(jsonData.message).to.be.oneOf(message);\r",
                      "    });\r",
                      "\r",
                      "    pm.test(`Check the Status code ${jsonData.status}`, function(){\r",
                      "        pm.expect(pm.response.code).to.be.oneOf(status);\r",
                      "    });\r",
                      "}"
                    ],
                    "_lastExecutionId": "2fbfcb58-035a-4d0d-afa2-7fc9d5239e13"
                  }
                },
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "3483ef69-d6b6-4835-8746-973a3f7a159e",
                    "type": "text/javascript",
                    "exec": [
                      "\r",
                      "// // Define the incrementEmail function\r",
                      "// function incrementEmail(email) {\r",
                      "//     const match = email.match(/\\+a(\\d+)/);\r",
                      "\r",
                      "//     if (match) {\r",
                      "//         const currentNumber = parseInt(match[1]);\r",
                      "//         const nextNumber = currentNumber + 1;\r",
                      "//         const incrementedEmail = email.replace(/\\+a\\d+/, `+a${nextNumber}`);\r",
                      "//         return incrementedEmail;\r",
                      "//     }\r",
                      "\r",
                      "//     return email;\r",
                      "// }\r",
                      "\r",
                      "\r",
                      "// const originalEmail = pm.environment.get(\"email\");\r",
                      "\r",
                      "\r",
                      "// if (originalEmail) {\r",
                      "//     // Use the incrementEmail function to get the incremented email\r",
                      "//     const incrementedEmail = incrementEmail(originalEmail);\r",
                      "\r",
                      "//     // Set the incremented email back to the environment\r",
                      "//     pm.environment.set(\"email\", incrementedEmail);\r",
                      "\r",
                      "//     console.log(\"OriginalEmail:\", originalEmail);\r",
                      "//     console.log(\"IncrementedEmail:\", incrementedEmail);\r",
                      "// } else {\r",
                      "//     console.error(\"Email environment variable not found.\");\r",
                      "// }\r",
                      "\r",
                      "// console.log(pm.environment.get(\"email\"));\r",
                      "\r",
                      "\r",
                      "// -------------------------------------------------------------------\r",
                      "// Define the base part of the email address\r",
                      "const baseEmail = pm.environment.get(\"baseEmail\");\r",
                      "\r",
                      "// Generate a random number between min and max (inclusive)\r",
                      "function getRandomNumber(min, max) {\r",
                      "    return Math.floor(Math.random() * (max - min + 1)) + min;\r",
                      "}\r",
                      "\r",
                      "// Generate a random sequence like +a151, +a152, +a153, and so on\r",
                      "const randomSequence = `+a${getRandomNumber(1, 999)}`;\r",
                      "\r",
                      "// Combine the base and random sequence to create the random email address\r",
                      "const randomEmail = `${baseEmail}${randomSequence}@gmail.com`;\r",
                      "\r",
                      "// Set the random email address as an environment variable for your request\r",
                      "pm.environment.set('randomEmail', randomEmail);\r",
                      "\r",
                      "\r",
                      ""
                    ],
                    "_lastExecutionId": "f0df73d6-9875-49de-aaed-2ffb46745ff0"
                  }
                }
              ]
            },
            {
              "id": "1da8b1e7-3198-4c60-9c34-4a1e8b7e8b15",
              "name": "UserLogin",
              "request": {
                "url": {
                  "path": [
                    "users",
                    "login"
                  ],
                  "host": [
                    "{{exp_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n    \"email\":\"{{randomEmail}}\",\r\n    \"password\":\"{{password}}\"\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "cc8daf67-c0f2-4843-9223-e47d8fe754ec",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Check the status code is 200\", function(){\r",
                      "    pm.response.to.have.status(200);\r",
                      "});\r",
                      "\r",
                      "var jsonData = pm.response.json();\r",
                      "\r",
                      "pm.test(\"Check the success message\", function(){\r",
                      "    pm.expect(jsonData.success).to.eql(true);\r",
                      "});\r",
                      "\r",
                      "pm.test(\"Check the body message\", function(){\r",
                      "    pm.expect(jsonData.message).to.eql(\"Login successful\");\r",
                      "});\r",
                      "\r",
                      "pm.environment.set(\"exp_token\", jsonData.data.token);\r",
                      "\r",
                      "pm.test(\"Verify the values are not null\", function(){\r",
                      "    pm.expect(jsonData.data.id, \"Id is not a null\").to.not.be.null;\r",
                      "    pm.expect(jsonData.data.name, \"name is not a null\").to.not.be.null;\r",
                      "    pm.expect(jsonData.data.email, \"email is not a null\").to.not.be.null;\r",
                      "    pm.expect(jsonData.data.token, \"token is not a null\").to.not.be.null;\r",
                      "});\r",
                      "\r",
                      "pm.test(\"Check the response time\", function(){\r",
                      "    pm.expect(pm.response.responseTime).to.below(2000);\r",
                      "});\r",
                      "\r",
                      ""
                    ],
                    "_lastExecutionId": "4a906166-3676-408b-bc6f-6c09add962a5"
                  }
                },
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "98d0941e-d03e-4ab7-a7b0-84826ad7708a",
                    "type": "text/javascript",
                    "exec": [
                      ""
                    ],
                    "_lastExecutionId": "2f4a3493-6a43-4652-8c74-458390f9ecf9"
                  }
                }
              ]
            },
            {
              "id": "3f4af57c-fb9c-4a3c-8c2b-0f9b603b0679",
              "name": "GetProfile",
              "request": {
                "url": {
                  "path": [
                    "users",
                    "profile"
                  ],
                  "host": [
                    "{{exp_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET",
                "auth": {
                  "type": "apikey",
                  "apikey": [
                    {
                      "type": "string",
                      "value": "{{exp_token}}",
                      "key": "value"
                    },
                    {
                      "type": "string",
                      "value": "header",
                      "key": "in"
                    },
                    {
                      "type": "string",
                      "value": "x-auth-token",
                      "key": "key"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "56a6399c-71a1-414d-b876-9262a848415f",
                    "type": "text/javascript",
                    "exec": [
                      "\r",
                      "let jsonData = pm.response.json();\r",
                      "message = [\r",
                      "    \"Access token is not valid or has expired, you will need to login\",\r",
                      "    \"No authentication token specified in x-auth-token header\",\r",
                      "    \"Bad Request\",\r",
                      "    \"Unauthorized Request\",\r",
                      "    \"Internal Error Server\",\r",
                      "    \"Profile successful\",\r",
                      "    \"Not Found\"\r",
                      "]\r",
                      "\r",
                      "status = [400,401,404,500,200,201]\r",
                      "\r",
                      "if (jsonData.success === false) {\r",
                      "    pm.test(`**** E R R O R ***** ${jsonData.message}`, function(){\r",
                      "        // pm.expect(jsonData.message).to.eql(\"No authentication token specified in x-auth-token header\");\r",
                      "        pm.expect(jsonData.message).to.be.oneOf(message);\r",
                      "    });\r",
                      "\r",
                      "    pm.test(`Check the multiple error status code ${jsonData.status}`, function(){\r",
                      "        pm.expect(pm.response.code).to.be.oneOf(status);\r",
                      "    });\r",
                      "\r",
                      "\r",
                      "}\r",
                      "else {\r",
                      "    pm.test(`*** S U C C E S S *** ${jsonData.message}`, function(){\r",
                      "        // pm.expect(jsonData.message).to.equal(\"Profile successful\");\r",
                      "        pm.expect(jsonData.message).to.be.oneOf(message);\r",
                      "    });\r",
                      "\r",
                      "    pm.test(\"Check the response time\", function(){\r",
                      "    pm.expect(pm.response.responseTime).to.be.below(6000);\r",
                      "    });\r",
                      "\r",
                      "    pm.test(`Check the Status code ${jsonData.status}`, function(){\r",
                      "        pm.expect(pm.response.code).to.be.oneOf(status);\r",
                      "    });\r",
                      "\r",
                      "    pm.test(\"Body matches multiple string\",function(){\r",
                      "    pm.expect(pm.response.text()).to.include(\"id\");\r",
                      "    pm.expect(pm.response.text()).to.include(\"name\");\r",
                      "    pm.expect(pm.response.text()).to.include(\"email\");\r",
                      "});\r",
                      "\r",
                      "}\r",
                      "\r",
                      ""
                    ],
                    "_lastExecutionId": "55d3989d-79a3-476b-87c3-020290feeec2"
                  }
                },
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "5b6727ff-6213-4350-874c-dbaeeb0d0d03",
                    "type": "text/javascript",
                    "exec": [
                      ""
                    ],
                    "_lastExecutionId": "5e07b22a-eb37-441e-b764-c112f7fde3f7"
                  }
                }
              ],
              "protocolProfileBehavior": {
                "disabledSystemHeaders": {}
              }
            },
            {
              "id": "ee9d7916-0288-4df6-a4d2-05ed9c78c4f1",
              "name": "UpdateProfile",
              "request": {
                "url": {
                  "path": [
                    "users",
                    "profile"
                  ],
                  "host": [
                    "{{exp_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "PATCH",
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n    \"name\":\"{{name}}\",\r\n    \"phone\":\"{{random_number}}\",\r\n    \"company\":\"{{$randomCompanyName}}\"\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "auth": {
                  "type": "apikey",
                  "apikey": [
                    {
                      "type": "string",
                      "value": "{{exp_token}}",
                      "key": "value"
                    },
                    {
                      "type": "string",
                      "value": "header",
                      "key": "in"
                    },
                    {
                      "type": "string",
                      "value": "x-auth-token",
                      "key": "key"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "6ab7e932-eb9b-4edc-9edc-b8d42e4162ad",
                    "type": "text/javascript",
                    "exec": [
                      "let jsonData = pm.response.json();\r",
                      "message = [\r",
                      "    \"Access token is not valid or has expired, you will need to login\",\r",
                      "    \"No authentication token specified in x-auth-token header\",\r",
                      "    \"User name must be between 4 and 30 characters\",\r",
                      "    \"Phone number should be between 8 and 20 digits\",\r",
                      "    \"Unauthorized Request\",\r",
                      "    \"Internal Error Server\",\r",
                      "    \"Profile updated successful\",\r",
                      "    \"Not Found\",\r",
                      "    \"Bad Request\"\r",
                      "]\r",
                      "\r",
                      "status = [400,401,404,500,200,201]\r",
                      "// var jsonData1 = pm.response.json();\r",
                      "// pm.environment.set(\"phoneNumber\", jsonData1.data.phone);\r",
                      "\r",
                      "if (jsonData.success === false) {\r",
                      "    pm.test(`**** E R R O R ***** ${jsonData.message}`, function(){\r",
                      "        // pm.expect(jsonData.message).to.eql(\"No authentication token specified in x-auth-token header\");\r",
                      "        pm.expect(jsonData.message).to.be.oneOf(message);\r",
                      "    });\r",
                      "\r",
                      "    pm.test(`Check the multiple error status code ${jsonData.status}`, function(){\r",
                      "        pm.expect(pm.response.code).to.be.oneOf(status);\r",
                      "    });\r",
                      "\r",
                      "\r",
                      "}\r",
                      "else {\r",
                      "    pm.test(`*** S U C C E S S *** ${jsonData.message}`, function(){\r",
                      "        // pm.expect(jsonData.message).to.equal(\"Profile successful\");\r",
                      "        pm.expect(jsonData.message).to.be.oneOf(message);\r",
                      "    });\r",
                      "\r",
                      "    pm.test(\"Check the response time\", function(){\r",
                      "    pm.expect(pm.response.responseTime).to.be.below(6000);\r",
                      "    });\r",
                      "\r",
                      "    pm.test(`Check the Status code ${jsonData.status}`, function(){\r",
                      "        pm.expect(pm.response.code).to.be.oneOf(status);\r",
                      "    });\r",
                      "\r",
                      "    pm.test(\"Body matches multiple string\",function(){\r",
                      "    pm.expect(pm.response.text()).to.include(\"id\");\r",
                      "    pm.expect(pm.response.text()).to.include(\"name\");\r",
                      "    pm.expect(pm.response.text()).to.include(\"email\");\r",
                      "});\r",
                      "\r",
                      "}\r",
                      "\r",
                      ""
                    ],
                    "_lastExecutionId": "bf535ed4-ea27-433b-95ed-0405878d634c"
                  }
                },
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "1dd9ce14-2fea-48d5-b628-446e36acb961",
                    "type": "text/javascript",
                    "exec": [
                      "pm.environment.set(\"random_number\",_.random(1000000000,9999999999));\r",
                      "\r",
                      "\r",
                      ""
                    ],
                    "_lastExecutionId": "81adb337-1695-4fed-b265-391f869dd222"
                  }
                }
              ]
            },
            {
              "id": "03c5b9ed-2c86-4338-932a-d93a799c2d8d",
              "name": "ForgotPassword",
              "request": {
                "url": {
                  "path": [
                    "users",
                    "forgot-password"
                  ],
                  "host": [
                    "{{exp_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n    \"email\":\"{{randomEmail}}\"\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "auth": {
                  "type": "apikey",
                  "apikey": [
                    {
                      "type": "string",
                      "value": "{{exp_token}}",
                      "key": "value"
                    },
                    {
                      "type": "string",
                      "value": "header",
                      "key": "in"
                    },
                    {
                      "type": "string",
                      "value": "x-auth-token",
                      "key": "key"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "72c44319-e1e0-49ac-91f7-f3f0cd439f93",
                    "type": "text/javascript",
                    "exec": [
                      "let jsonData = pm.response.json();\r",
                      "let jsonEmail = JSON.parse(pm.request.body.raw).email;\r",
                      "\r",
                      "message = [\r",
                      "    \"Access token is not valid or has expired, you will need to login\",\r",
                      "    \"No authentication token specified in x-auth-token header\",\r",
                      "    \"Unauthorized Request\",\r",
                      "    \"Internal Error Server\",\r",
                      "    `Password reset link successfully sent to ${pm.environment.get(\"email\")}. Please verify by clicking on the given link`,\r",
                      "    \"Not Found\",\r",
                      "    \"Bad Request\",\r",
                      "    \"A valid email address is required\"\r",
                      "]\r",
                      "\r",
                      "status = [400,401,404,500,200,201]\r",
                      "// var jsonData1 = pm.response.json();\r",
                      "// pm.environment.set(\"phoneNumber\", jsonData1.data.phone);\r",
                      "\r",
                      "if (jsonData.success === false) {\r",
                      "    pm.test(`**** E R R O R ***** ${jsonData.message}`, function(){\r",
                      "        // pm.expect(jsonData.message).to.eql(\"No authentication token specified in x-auth-token header\");\r",
                      "        pm.expect(jsonData.message).to.be.oneOf(message);\r",
                      "    });\r",
                      "\r",
                      "    pm.test(`Check the multiple error status code ${jsonData.status}`, function(){\r",
                      "        pm.expect(pm.response.code).to.be.oneOf(status);\r",
                      "    });\r",
                      "\r",
                      "\r",
                      "}\r",
                      "else {\r",
                      "    pm.test(`*** S U C C E S S *** ${jsonData.message}`, function(){\r",
                      "        // pm.expect(jsonData.message).to.equal(\"Profile successful\");\r",
                      "        pm.expect(jsonData.message).to.be.oneOf(message);\r",
                      "    });\r",
                      "\r",
                      "    pm.test(\"Check the response time\", function(){\r",
                      "    pm.expect(pm.response.responseTime).to.be.below(6000);\r",
                      "    });\r",
                      "\r",
                      "    pm.test(`Check the Status code ${jsonData.status}`, function(){\r",
                      "        pm.expect(pm.response.code).to.be.oneOf(status);\r",
                      "    });\r",
                      "\r",
                      "    pm.test(\"Body matches multiple string\",function(){\r",
                      "    pm.expect(pm.response.text()).to.include(\"message\");\r",
                      "});\r",
                      "\r",
                      "}\r",
                      "\r",
                      ""
                    ],
                    "_lastExecutionId": "a3803636-b917-4048-8873-b62ae1f022d6"
                  }
                },
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "6236deb0-9668-46d8-bb96-97cc86eeb0fa",
                    "type": "text/javascript",
                    "exec": [
                      ""
                    ],
                    "_lastExecutionId": "148f797c-8661-4a45-97c4-527fe81fce77"
                  }
                }
              ]
            },
            {
              "id": "eea8198b-64d4-43e4-b554-aefaae2516cd",
              "name": "GetEmailMessage",
              "request": {
                "url": {
                  "protocol": "https",
                  "path": [
                    "gmail",
                    "v1",
                    "users",
                    "{{user_email_id}}",
                    "messages",
                    ""
                  ],
                  "host": [
                    "gmail",
                    "googleapis",
                    "com"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET",
                "auth": {
                  "type": "oauth2",
                  "oauth2": [
                    {
                      "type": "boolean",
                      "value": false,
                      "key": "useBrowser"
                    },
                    {
                      "type": "string",
                      "value": "{{Scope}}",
                      "key": "scope"
                    },
                    {
                      "type": "string",
                      "value": "{{Client_Secret}}",
                      "key": "clientSecret"
                    },
                    {
                      "type": "string",
                      "value": "{{Client_ID}}",
                      "key": "clientId"
                    },
                    {
                      "type": "string",
                      "value": "{{Access_Token_URL}}",
                      "key": "accessTokenUrl"
                    },
                    {
                      "type": "string",
                      "value": "{{Auth_URL}}",
                      "key": "authUrl"
                    },
                    {
                      "type": "string",
                      "value": "{{Callback_URL}}",
                      "key": "redirect_uri"
                    },
                    {
                      "type": "string",
                      "value": "authorization_code",
                      "key": "grant_type"
                    },
                    {
                      "type": "string",
                      "value": "email_token",
                      "key": "tokenName"
                    },
                    {
                      "type": "string",
                      "value": "header",
                      "key": "addTokenTo"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "705020a4-73b3-44df-86ff-a5984e094d10",
                    "type": "text/javascript",
                    "exec": [
                      "var jsonData = pm.response.json();\r",
                      "pm.environment.set(\"messageId\", jsonData.messages[0].id);\r",
                      "\r",
                      ""
                    ],
                    "_lastExecutionId": "eeef6f2d-f5fd-4a00-be9c-25555c6fa5bc"
                  }
                },
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "cdf7837a-853f-442c-8e05-996129213a95",
                    "type": "text/javascript",
                    "exec": [
                      "var newRefreshToken = pm.environment.get(\"access_token\");\r",
                      "\r",
                      "pm.environment.set(\"refresh_token\", newRefreshToken);"
                    ],
                    "_lastExecutionId": "94790536-1730-42ee-886b-f2872e8a5fee"
                  }
                }
              ]
            },
            {
              "id": "f053ddc8-a8a6-4796-a23f-c89737b34582",
              "name": "GetMessageByID",
              "request": {
                "url": {
                  "protocol": "https",
                  "path": [
                    "gmail",
                    "v1",
                    "users",
                    "{{user_email_id}}",
                    "messages",
                    "{{messageId}}"
                  ],
                  "host": [
                    "gmail",
                    "googleapis",
                    "com"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "multipart/mixed"
                  }
                ],
                "method": "GET",
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "{{access_token}}",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "d94857cd-ae23-40c6-ae38-5f7aaca3e833",
                    "type": "text/javascript",
                    "exec": [
                      "\r",
                      "const response = pm.response.json();\r",
                      "\r",
                      "pm.environment.set(\"message_Body\", response.payload.body.data);\r",
                      "\r",
                      "var atob = require('atob');\r",
                      "\r",
                      "\r",
                      "var base64Data = pm.environment.get(\"message_Body\");\r",
                      "var decodedData = atob(base64Data);\r",
                      "postman.setEnvironmentVariable(\"rest_password\",decodedData);\r",
                      "var tokenRegex = /Reset password link: (https:\\/\\/practice\\.expandtesting\\.com\\/notes\\/app\\/reset-password\\/([\\w\\d]+))[^ ]+/;\r",
                      "var tokenMatch = decodedData.match(tokenRegex);\r",
                      "if (tokenMatch && tokenMatch[2]) {\r",
                      "    var resetPasswordToken = tokenMatch[2];\r",
                      "    \r",
                      "    // Set the reset password link as a Postman environment variable for later use\r",
                      "    pm.environment.set(\"resetPasswordToken\", resetPasswordToken);\r",
                      "    \r",
                      "    // Log the reset password link\r",
                      "    console.log(\"Reset Password Token: \" + resetPasswordToken);\r",
                      "} else {\r",
                      "    console.log(\"Reset password token not found in the response.\");\r",
                      "}\r",
                      "console.log(decodedData);\r",
                      "\r",
                      "\r",
                      "\r",
                      "\r",
                      "\r",
                      "\r",
                      "\r",
                      "\r",
                      "\r",
                      "\r",
                      "\r",
                      ""
                    ],
                    "_lastExecutionId": "4816be40-7f3a-489e-b23c-14c698a58ddc"
                  }
                },
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "8349aa22-c992-434e-9e35-e5fc8ef4a245",
                    "type": "text/javascript",
                    "exec": [
                      ""
                    ],
                    "_lastExecutionId": "e5ddbcb0-9830-4e57-9232-851987938e7d"
                  }
                }
              ]
            },
            {
              "id": "8d884a10-0abd-48de-9b8a-47bfc7ff13cd",
              "name": "verify-reset-password-token",
              "request": {
                "url": {
                  "path": [
                    "users",
                    "verify-reset-password-token"
                  ],
                  "host": [
                    "{{exp_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "accept",
                    "value": "application/json"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/x-www-form-urlencoded"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "urlencoded",
                  "urlencoded": [
                    {
                      "key": "token",
                      "value": "{{resetPasswordToken}}"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "799e647c-efdd-4528-bf8c-ec8d1e1a4b55",
                    "type": "text/javascript",
                    "exec": [
                      "let jsonData = pm.response.json();\r",
                      "\r",
                      "message = [\r",
                      "    \"The provided password reset token is valid\",\r",
                      "    \"Bad Request\",\r",
                      "    \"Internal Error Server\",\r",
                      "    \"The provided password reset token is invalid or has expired\"\r",
                      "]\r",
                      "\r",
                      "status = [200,400,401,500]\r",
                      "\r",
                      "if (jsonData.success === false) {\r",
                      "    pm.test(`**** E R R O R ***** ${jsonData.message}`, function(){\r",
                      "        // pm.expect(jsonData.message).to.eql(\"No authentication token specified in x-auth-token header\");\r",
                      "        pm.expect(jsonData.message).to.be.oneOf(message);\r",
                      "    });\r",
                      "\r",
                      "    pm.test(`Check the multiple error status code ${jsonData.status}`, function(){\r",
                      "        pm.expect(pm.response.code).to.be.oneOf(status);\r",
                      "    });\r",
                      "\r",
                      "\r",
                      "}\r",
                      "else {\r",
                      "    pm.test(`*** S U C C E S S *** ${jsonData.message}`, function(){\r",
                      "        // pm.expect(jsonData.message).to.equal(\"Profile successful\");\r",
                      "        pm.expect(jsonData.message).to.be.oneOf(message);\r",
                      "    });\r",
                      "\r",
                      "    pm.test(\"Check the response time\", function(){\r",
                      "    pm.expect(pm.response.responseTime).to.be.below(6000);\r",
                      "    });\r",
                      "\r",
                      "    pm.test(`Check the Status code ${jsonData.status}`, function(){\r",
                      "        pm.expect(pm.response.code).to.be.oneOf(status);\r",
                      "    });\r",
                      "\r",
                      "    pm.test(\"Body matches multiple string\",function(){\r",
                      "    pm.expect(pm.response.text()).to.include(\"message\");\r",
                      "});\r",
                      "\r",
                      "}\r",
                      "\r",
                      ""
                    ],
                    "_lastExecutionId": "c1d6d515-485d-45cb-ab2b-15662e3830f7"
                  }
                },
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "46fb041c-0790-4ccb-a117-d6dcbb44aa15",
                    "type": "text/javascript",
                    "exec": [
                      ""
                    ],
                    "_lastExecutionId": "48a955fd-f392-4b00-9034-2a273d9fea6d"
                  }
                }
              ]
            },
            {
              "id": "740f7a4b-9db6-4b38-a333-0ad712a2b2a2",
              "name": "reset-password",
              "request": {
                "url": {
                  "protocol": "https",
                  "path": [
                    "notes",
                    "api",
                    "users",
                    "reset-password"
                  ],
                  "host": [
                    "practice",
                    "expandtesting",
                    "com"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "accept",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n    \"token\":\"{{resetPasswordToken}}\",\r\n    \"newPassword\":\"{{$randomPassword}}\"\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "7cdc8324-5612-42e4-8f85-49037412238b",
                    "type": "text/javascript",
                    "exec": [
                      "let jsonData = pm.response.json();\r",
                      "\r",
                      "let newPassword = JSON.parse(pm.request.body.raw).newPassword;\r",
                      "pm.environment.set('password', newPassword);\r",
                      "\r",
                      "\r",
                      "message = [\r",
                      "    \"The password has been successfully reset\",\r",
                      "    \"Token must be between 64 characters\",\r",
                      "    \"Bad Request\",\r",
                      "    \"The password was successfully updated\",\r",
                      "    \"Internal Error Server\",\r",
                      "    \"New password must be between 6 and 30 characters\",\r",
                      "    \"The password reset token is invalid or has expired\"\r",
                      "]\r",
                      "\r",
                      "status = [200,400,401,500]\r",
                      "\r",
                      "if (jsonData.success === false) {\r",
                      "    pm.test(`**** E R R O R ***** ${jsonData.message}`, function(){\r",
                      "        // pm.expect(jsonData.message).to.eql(\"No authentication token specified in x-auth-token header\");\r",
                      "        pm.expect(jsonData.message).to.be.oneOf(message);\r",
                      "    });\r",
                      "\r",
                      "    pm.test(`Check the multiple error status code ${jsonData.status}`, function(){\r",
                      "        pm.expect(pm.response.code).to.be.oneOf(status);\r",
                      "    });\r",
                      "\r",
                      "\r",
                      "}\r",
                      "else {\r",
                      "    pm.test(`*** S U C C E S S *** ${jsonData.message}`, function(){\r",
                      "        // pm.expect(jsonData.message).to.equal(\"Profile successful\");\r",
                      "        pm.expect(jsonData.message).to.be.oneOf(message);\r",
                      "    });\r",
                      "\r",
                      "    pm.test(\"Check the response time\", function(){\r",
                      "    pm.expect(pm.response.responseTime).to.be.below(6000);\r",
                      "    });\r",
                      "\r",
                      "    pm.test(`Check the Status code ${jsonData.status}`, function(){\r",
                      "        pm.expect(pm.response.code).to.be.oneOf(status);\r",
                      "    });\r",
                      "\r",
                      "    pm.test(\"Body matches multiple string\",function(){\r",
                      "    pm.expect(pm.response.text()).to.include(\"message\");\r",
                      "});\r",
                      "\r",
                      "}\r",
                      "\r",
                      "\r",
                      ""
                    ],
                    "_lastExecutionId": "5d234639-2098-4725-8401-094ce8fa851b"
                  }
                },
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "1268a1ec-48a3-4dfd-8fc8-3c14d0fa7f28",
                    "type": "text/javascript",
                    "exec": [
                      ""
                    ],
                    "_lastExecutionId": "3e5db1d1-0c8c-4a29-8797-f14a01a4bedc"
                  }
                }
              ]
            },
            {
              "id": "93821c3b-e028-4eda-a749-05d87d7e6a94",
              "name": "change-password",
              "request": {
                "url": {
                  "path": [
                    "users",
                    "change-password"
                  ],
                  "host": [
                    "{{exp_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "accept",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n    \"currentPassword\":\"{{password}}\",\r\n    \"newPassword\":\"{{$randomPassword}}\"\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "auth": {
                  "type": "apikey",
                  "apikey": [
                    {
                      "type": "string",
                      "value": "{{exp_token}}",
                      "key": "value"
                    },
                    {
                      "type": "string",
                      "value": "x-auth-token",
                      "key": "key"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "3eca22f1-7d4a-4832-8b68-54badb876aa6",
                    "type": "text/javascript",
                    "exec": [
                      "pm.environment.get(\"password\");\r",
                      "\r",
                      "let newPassword = JSON.parse(pm.request.body.raw).newPassword;\r",
                      "pm.environment.set('password', newPassword);\r",
                      "\r",
                      "let jsonData = pm.response.json();\r",
                      "message = [\r",
                      "    \"The password has been successfully reset\",\r",
                      "    \"Token must be between 64 characters\",\r",
                      "    \"Bad Request\",\r",
                      "    \"The password was successfully updated\",\r",
                      "    \"Internal Error Server\",\r",
                      "    \"New password must be between 6 and 30 characters\",\r",
                      "    \"The password reset token is invalid or has expired\"\r",
                      "]\r",
                      "\r",
                      "status = [200,400,401,500]\r",
                      "\r",
                      "if (jsonData.success === false) {\r",
                      "    pm.test(`**** E R R O R ***** ${jsonData.message}`, function(){\r",
                      "        // pm.expect(jsonData.message).to.eql(\"No authentication token specified in x-auth-token header\");\r",
                      "        pm.expect(jsonData.message).to.be.oneOf(message);\r",
                      "    });\r",
                      "\r",
                      "    pm.test(`Check the multiple error status code ${jsonData.status}`, function(){\r",
                      "        pm.expect(pm.response.code).to.be.oneOf(status);\r",
                      "    });\r",
                      "\r",
                      "\r",
                      "}\r",
                      "else {\r",
                      "    pm.test(`*** S U C C E S S *** ${jsonData.message}`, function(){\r",
                      "        // pm.expect(jsonData.message).to.equal(\"Profile successful\");\r",
                      "        pm.expect(jsonData.message).to.be.oneOf(message);\r",
                      "    });\r",
                      "\r",
                      "    pm.test(\"Check the response time\", function(){\r",
                      "    pm.expect(pm.response.responseTime).to.be.below(6000);\r",
                      "    });\r",
                      "\r",
                      "    pm.test(`Check the Status code ${jsonData.status}`, function(){\r",
                      "        pm.expect(pm.response.code).to.be.oneOf(status);\r",
                      "    });\r",
                      "\r",
                      "    pm.test(\"Body matches multiple string\",function(){\r",
                      "    pm.expect(pm.response.text()).to.include(\"message\");\r",
                      "});\r",
                      "\r",
                      "}\r",
                      ""
                    ],
                    "_lastExecutionId": "64be3638-86ca-4200-b966-7a137b03eb2e"
                  }
                },
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "aa473681-09fc-4673-a2fe-7012cf4e42e9",
                    "type": "text/javascript",
                    "exec": [
                      "console.log(pm.environment.get(\"password\"));\r",
                      "\r",
                      "\r",
                      "\r",
                      ""
                    ],
                    "_lastExecutionId": "fb6fc291-ccb6-46ad-9bb8-0e4bf2cf736d"
                  }
                }
              ]
            },
            {
              "id": "f4c8e78d-5700-43a2-8e20-cb1a0de26ce9",
              "name": "UserLogout",
              "request": {
                "url": {
                  "path": [
                    "users",
                    "logout"
                  ],
                  "host": [
                    "{{exp_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "accept",
                    "value": "application/json"
                  }
                ],
                "method": "DELETE",
                "auth": {
                  "type": "apikey",
                  "apikey": [
                    {
                      "type": "string",
                      "value": "{{exp_token}}",
                      "key": "value"
                    },
                    {
                      "type": "string",
                      "value": "x-auth-token",
                      "key": "key"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "43a38bb6-0063-463b-9a7b-ea0674d209fe",
                    "type": "text/javascript",
                    "exec": [
                      "let jsonData = pm.response.json();\r",
                      "message = [\r",
                      "    \"User has been successfully logged out\",\r",
                      "    \"Token must be between 64 characters\",\r",
                      "    \"Bad Request\",\r",
                      "    \"Access token is not valid or has expired, you will need to login\",\r",
                      "    \"No authentication token specified in x-auth-token header\",\r",
                      "    \"Internal Error Server\",\r",
                      "    \"Successful Request\",\r",
                      "    \"Unauthorized Request\"\r",
                      "]\r",
                      "\r",
                      "status = [200,400,401,500]\r",
                      "\r",
                      "if (jsonData.success === false) {\r",
                      "    pm.test(`**** E R R O R ***** ${jsonData.message}`, function(){\r",
                      "        // pm.expect(jsonData.message).to.eql(\"No authentication token specified in x-auth-token header\");\r",
                      "        pm.expect(jsonData.message).to.be.oneOf(message);\r",
                      "    });\r",
                      "\r",
                      "    pm.test(`Check the multiple error status code ${jsonData.status}`, function(){\r",
                      "        pm.expect(pm.response.code).to.be.oneOf(status);\r",
                      "    });\r",
                      "\r",
                      "\r",
                      "}\r",
                      "else {\r",
                      "    pm.test(`*** S U C C E S S *** ${jsonData.message}`, function(){\r",
                      "        // pm.expect(jsonData.message).to.equal(\"Profile successful\");\r",
                      "        pm.expect(jsonData.message).to.be.oneOf(message);\r",
                      "    });\r",
                      "\r",
                      "    pm.test(\"Check the response time\", function(){\r",
                      "    pm.expect(pm.response.responseTime).to.be.below(6000);\r",
                      "    });\r",
                      "\r",
                      "    pm.test(`Check the Status code ${jsonData.status}`, function(){\r",
                      "        pm.expect(pm.response.code).to.be.oneOf(status);\r",
                      "    });\r",
                      "\r",
                      "    pm.test(\"Body matches multiple string\",function(){\r",
                      "    pm.expect(pm.response.text()).to.include(\"message\");\r",
                      "});\r",
                      "\r",
                      "}\r",
                      "\r",
                      "postman.setNextRequest(null);"
                    ],
                    "_lastExecutionId": "c7d982d4-a8dc-460f-a106-6e0c01643e82"
                  }
                },
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "e8ae662d-a080-4bf5-a817-754113435b5e",
                    "type": "text/javascript",
                    "exec": [
                      ""
                    ],
                    "_lastExecutionId": "0b0d404e-4117-40fc-9982-a95619506052"
                  }
                }
              ]
            }
          ],
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "3380df96-f386-44be-9dc8-eb145a929d13",
                "type": "text/javascript",
                "exec": [
                  ""
                ],
                "_lastExecutionId": "c2613397-fddf-4d46-99b6-9ffc9166e0a8"
              }
            },
            {
              "listen": "test",
              "script": {
                "id": "18c4e0bb-9477-4e5f-b627-d550e666c7d3",
                "type": "text/javascript",
                "exec": [
                  ""
                ],
                "_lastExecutionId": "78225eb1-cbe5-408b-978b-a1bf2d2b693c"
              }
            }
          ],
          "variable": [
            {
              "type": "string",
              "value": "https://practice.expandtesting.com/notes/api",
              "key": "exp_url"
            }
          ],
          "info": {
            "_postman_id": "723ea9c3-0635-4605-b90c-d6d9e9835d8c",
            "name": "expandtesting",
            "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
          }
        },
        "cursor": {
          "ref": "f70c212e-54ae-4c80-84bf-295f5d6f7f9a",
          "length": 12,
          "cycles": 1,
          "position": 1,
          "iteration": 0,
          "httpRequestId": "862306ad-af84-4909-a2fc-5aa4c4d48310",
          "scriptId": "4f0c3c3d-4171-4bea-b8a8-3fd567809f0d",
          "execution": "2fbfcb58-035a-4d0d-afa2-7fc9d5239e13"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 1,
          "test": "Check the body message",
          "message": "expected 'An account already exists with the sa…' to deeply equal 'User account created successfully'",
          "stack": "AssertionError: expected 'An account already exists with the sa…' to deeply equal 'User account created successfully'\n   at Object.eval sandbox-script.js:2:2)",
          "checksum": "dc4fd8b5fc54cc8e50e15ef7843118bd",
          "id": "f3b064e4-2e0c-44fa-a1ee-5e13eb5e58d1",
          "timestamp": 1698733438931,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 2,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 2,
              "native": false
            }
          ]
        },
        "at": "assertion:1 in test-script",
        "source": {
          "id": "d3b70abb-4c44-4d96-b946-e8ef2e19907f",
          "name": "RegisterUser",
          "request": {
            "url": {
              "path": [
                "users",
                "register"
              ],
              "host": [
                "{{exp_url}}"
              ],
              "query": [],
              "variable": []
            },
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\r\n    \"name\":\"{{$randomFullName}}\",\r\n    \"email\":\"{{randomEmail}}\",\r\n    \"password\":\"{{$randomPassword}}\"\r\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "4f0c3c3d-4171-4bea-b8a8-3fd567809f0d",
                "type": "text/javascript",
                "exec": [
                  "var jsonData = pm.response.json();\r",
                  "\r",
                  "pm.test(\"Check the success msg is true in body?\", function(){\r",
                  "    pm.expect(jsonData.success).to.eql(true);\r",
                  "});\r",
                  "\r",
                  "pm.test(\"Check the body message\", function(){\r",
                  "    pm.expect(jsonData.message).to.eql(\"User account created successfully\");\r",
                  "});\r",
                  "\r",
                  "pm.test(\"Verify the values are not null\", function(){\r",
                  "    pm.expect(jsonData.data.id, \"Id is not null\").to.not.be.null;\r",
                  "    pm.expect(jsonData.data.name, \"name is not null\").to.not.be.null;\r",
                  "    pm.expect(jsonData.data.email, \"email is not null\").to.not.be.null;\r",
                  "});\r",
                  "\r",
                  "pm.test(\"response property matching an environment variable\", function(){\r",
                  "    pm.expect(jsonData.name).to.eql(pm.environment.get(\"name\"));\r",
                  "});\r",
                  "\r",
                  "pm.test(\"Check the response time\", function(){\r",
                  "    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
                  "});\r",
                  "\r",
                  "pm.environment.set(\"id\", jsonData.data.id);\r",
                  "pm.environment.set(\"name\", jsonData.data.name);\r",
                  "\r",
                  "let password = JSON.parse(pm.request.body.raw).password;\r",
                  "pm.environment.set('password', password);\r",
                  "\r",
                  "message = [\r",
                  "    \"Access token is not valid or has expired, you will need to login\",\r",
                  "    \"No authentication token specified in x-auth-token header\",\r",
                  "    \"User name must be between 4 and 30 characters\",\r",
                  "    \"Phone number should be between 8 and 20 digits\",\r",
                  "    \"Unauthorized Request\",\r",
                  "    \"Internal Error Server\",\r",
                  "    \"Profile updated successful\",\r",
                  "    \"User account created successfully\",\r",
                  "    \"Not Found\",\r",
                  "    \"Bad Request\",\r",
                  "    \"An account already exists with the same email address\"\r",
                  "];\r",
                  "\r",
                  "status = [400,401,404,409,500,200,201];\r",
                  "\r",
                  "if (jsonData.success === false) {\r",
                  "    pm.test(`**** E R R O R ***** ${jsonData.message}`, function(){\r",
                  "        pm.expect(jsonData.message).to.be.oneOf(message);\r",
                  "    });\r",
                  "\r",
                  "    pm.test(`Check the multiple error status code ${jsonData.status}`, function(){\r",
                  "        pm.expect(pm.response.code).to.be.oneOf(status);\r",
                  "    });\r",
                  "}\r",
                  "else {\r",
                  "    pm.test(`*** S U C C E S S *** ${jsonData.message}`, function(){\r",
                  "        pm.expect(jsonData.message).to.be.oneOf(message);\r",
                  "    });\r",
                  "\r",
                  "    pm.test(`Check the Status code ${jsonData.status}`, function(){\r",
                  "        pm.expect(pm.response.code).to.be.oneOf(status);\r",
                  "    });\r",
                  "}"
                ],
                "_lastExecutionId": "2fbfcb58-035a-4d0d-afa2-7fc9d5239e13"
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "id": "3483ef69-d6b6-4835-8746-973a3f7a159e",
                "type": "text/javascript",
                "exec": [
                  "\r",
                  "// // Define the incrementEmail function\r",
                  "// function incrementEmail(email) {\r",
                  "//     const match = email.match(/\\+a(\\d+)/);\r",
                  "\r",
                  "//     if (match) {\r",
                  "//         const currentNumber = parseInt(match[1]);\r",
                  "//         const nextNumber = currentNumber + 1;\r",
                  "//         const incrementedEmail = email.replace(/\\+a\\d+/, `+a${nextNumber}`);\r",
                  "//         return incrementedEmail;\r",
                  "//     }\r",
                  "\r",
                  "//     return email;\r",
                  "// }\r",
                  "\r",
                  "\r",
                  "// const originalEmail = pm.environment.get(\"email\");\r",
                  "\r",
                  "\r",
                  "// if (originalEmail) {\r",
                  "//     // Use the incrementEmail function to get the incremented email\r",
                  "//     const incrementedEmail = incrementEmail(originalEmail);\r",
                  "\r",
                  "//     // Set the incremented email back to the environment\r",
                  "//     pm.environment.set(\"email\", incrementedEmail);\r",
                  "\r",
                  "//     console.log(\"OriginalEmail:\", originalEmail);\r",
                  "//     console.log(\"IncrementedEmail:\", incrementedEmail);\r",
                  "// } else {\r",
                  "//     console.error(\"Email environment variable not found.\");\r",
                  "// }\r",
                  "\r",
                  "// console.log(pm.environment.get(\"email\"));\r",
                  "\r",
                  "\r",
                  "// -------------------------------------------------------------------\r",
                  "// Define the base part of the email address\r",
                  "const baseEmail = pm.environment.get(\"baseEmail\");\r",
                  "\r",
                  "// Generate a random number between min and max (inclusive)\r",
                  "function getRandomNumber(min, max) {\r",
                  "    return Math.floor(Math.random() * (max - min + 1)) + min;\r",
                  "}\r",
                  "\r",
                  "// Generate a random sequence like +a151, +a152, +a153, and so on\r",
                  "const randomSequence = `+a${getRandomNumber(1, 999)}`;\r",
                  "\r",
                  "// Combine the base and random sequence to create the random email address\r",
                  "const randomEmail = `${baseEmail}${randomSequence}@gmail.com`;\r",
                  "\r",
                  "// Set the random email address as an environment variable for your request\r",
                  "pm.environment.set('randomEmail', randomEmail);\r",
                  "\r",
                  "\r",
                  ""
                ],
                "_lastExecutionId": "f0df73d6-9875-49de-aaed-2ffb46745ff0"
              }
            }
          ]
        },
        "parent": {
          "_": {
            "postman_id": "723ea9c3-0635-4605-b90c-d6d9e9835d8c",
            "exporter_id": "13852941",
            "collection_link": "https://galactic-astronaut-894425.postman.co/workspace/b6dafb4f-3507-4e58-a32d-dd31bf6ab148/collection/13852941-723ea9c3-0635-4605-b90c-d6d9e9835d8c?action=share&source=collection_link&creator=13852941"
          },
          "item": [
            {
              "id": "90407c19-d06c-4337-abb9-4dfc2fa17fc8",
              "name": "health_check",
              "request": {
                "url": {
                  "path": [
                    "health-check"
                  ],
                  "host": [
                    "{{exp_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "b075fb8f-9483-4909-a4a4-cf6344c6642b",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Check the Status code 200\", function(){\r",
                      "    pm.response.to.have.status(200);\r",
                      "});\r",
                      "\r",
                      "var jsonData = pm.response.json();\r",
                      "\r",
                      "pm.test(\"Check the success code in body\", function(){\r",
                      "    pm.expect(jsonData.success).to.eql(true);\r",
                      "});\r",
                      "\r",
                      "pm.test(\"Check the Status code in body\", function(){\r",
                      "    pm.expect(jsonData.status).to.eql(200);\r",
                      "});\r",
                      "\r",
                      "pm.test(\"Check the message in body\", function(){\r",
                      "    pm.expect(jsonData.message).to.eql(\"Notes API is Running\");\r",
                      "});\r",
                      "\r",
                      "\r",
                      ""
                    ],
                    "_lastExecutionId": "dcf22f24-f95a-4d61-981a-68f2474c0b1d"
                  }
                },
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "15079d7d-2fc3-468b-b923-1fd697b2156e",
                    "type": "text/javascript",
                    "exec": [
                      ""
                    ],
                    "_lastExecutionId": "a57965c9-dfeb-425b-a87b-14b41a981af7"
                  }
                }
              ]
            },
            {
              "id": "d3b70abb-4c44-4d96-b946-e8ef2e19907f",
              "name": "RegisterUser",
              "request": {
                "url": {
                  "path": [
                    "users",
                    "register"
                  ],
                  "host": [
                    "{{exp_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n    \"name\":\"{{$randomFullName}}\",\r\n    \"email\":\"{{randomEmail}}\",\r\n    \"password\":\"{{$randomPassword}}\"\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "4f0c3c3d-4171-4bea-b8a8-3fd567809f0d",
                    "type": "text/javascript",
                    "exec": [
                      "var jsonData = pm.response.json();\r",
                      "\r",
                      "pm.test(\"Check the success msg is true in body?\", function(){\r",
                      "    pm.expect(jsonData.success).to.eql(true);\r",
                      "});\r",
                      "\r",
                      "pm.test(\"Check the body message\", function(){\r",
                      "    pm.expect(jsonData.message).to.eql(\"User account created successfully\");\r",
                      "});\r",
                      "\r",
                      "pm.test(\"Verify the values are not null\", function(){\r",
                      "    pm.expect(jsonData.data.id, \"Id is not null\").to.not.be.null;\r",
                      "    pm.expect(jsonData.data.name, \"name is not null\").to.not.be.null;\r",
                      "    pm.expect(jsonData.data.email, \"email is not null\").to.not.be.null;\r",
                      "});\r",
                      "\r",
                      "pm.test(\"response property matching an environment variable\", function(){\r",
                      "    pm.expect(jsonData.name).to.eql(pm.environment.get(\"name\"));\r",
                      "});\r",
                      "\r",
                      "pm.test(\"Check the response time\", function(){\r",
                      "    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
                      "});\r",
                      "\r",
                      "pm.environment.set(\"id\", jsonData.data.id);\r",
                      "pm.environment.set(\"name\", jsonData.data.name);\r",
                      "\r",
                      "let password = JSON.parse(pm.request.body.raw).password;\r",
                      "pm.environment.set('password', password);\r",
                      "\r",
                      "message = [\r",
                      "    \"Access token is not valid or has expired, you will need to login\",\r",
                      "    \"No authentication token specified in x-auth-token header\",\r",
                      "    \"User name must be between 4 and 30 characters\",\r",
                      "    \"Phone number should be between 8 and 20 digits\",\r",
                      "    \"Unauthorized Request\",\r",
                      "    \"Internal Error Server\",\r",
                      "    \"Profile updated successful\",\r",
                      "    \"User account created successfully\",\r",
                      "    \"Not Found\",\r",
                      "    \"Bad Request\",\r",
                      "    \"An account already exists with the same email address\"\r",
                      "];\r",
                      "\r",
                      "status = [400,401,404,409,500,200,201];\r",
                      "\r",
                      "if (jsonData.success === false) {\r",
                      "    pm.test(`**** E R R O R ***** ${jsonData.message}`, function(){\r",
                      "        pm.expect(jsonData.message).to.be.oneOf(message);\r",
                      "    });\r",
                      "\r",
                      "    pm.test(`Check the multiple error status code ${jsonData.status}`, function(){\r",
                      "        pm.expect(pm.response.code).to.be.oneOf(status);\r",
                      "    });\r",
                      "}\r",
                      "else {\r",
                      "    pm.test(`*** S U C C E S S *** ${jsonData.message}`, function(){\r",
                      "        pm.expect(jsonData.message).to.be.oneOf(message);\r",
                      "    });\r",
                      "\r",
                      "    pm.test(`Check the Status code ${jsonData.status}`, function(){\r",
                      "        pm.expect(pm.response.code).to.be.oneOf(status);\r",
                      "    });\r",
                      "}"
                    ],
                    "_lastExecutionId": "2fbfcb58-035a-4d0d-afa2-7fc9d5239e13"
                  }
                },
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "3483ef69-d6b6-4835-8746-973a3f7a159e",
                    "type": "text/javascript",
                    "exec": [
                      "\r",
                      "// // Define the incrementEmail function\r",
                      "// function incrementEmail(email) {\r",
                      "//     const match = email.match(/\\+a(\\d+)/);\r",
                      "\r",
                      "//     if (match) {\r",
                      "//         const currentNumber = parseInt(match[1]);\r",
                      "//         const nextNumber = currentNumber + 1;\r",
                      "//         const incrementedEmail = email.replace(/\\+a\\d+/, `+a${nextNumber}`);\r",
                      "//         return incrementedEmail;\r",
                      "//     }\r",
                      "\r",
                      "//     return email;\r",
                      "// }\r",
                      "\r",
                      "\r",
                      "// const originalEmail = pm.environment.get(\"email\");\r",
                      "\r",
                      "\r",
                      "// if (originalEmail) {\r",
                      "//     // Use the incrementEmail function to get the incremented email\r",
                      "//     const incrementedEmail = incrementEmail(originalEmail);\r",
                      "\r",
                      "//     // Set the incremented email back to the environment\r",
                      "//     pm.environment.set(\"email\", incrementedEmail);\r",
                      "\r",
                      "//     console.log(\"OriginalEmail:\", originalEmail);\r",
                      "//     console.log(\"IncrementedEmail:\", incrementedEmail);\r",
                      "// } else {\r",
                      "//     console.error(\"Email environment variable not found.\");\r",
                      "// }\r",
                      "\r",
                      "// console.log(pm.environment.get(\"email\"));\r",
                      "\r",
                      "\r",
                      "// -------------------------------------------------------------------\r",
                      "// Define the base part of the email address\r",
                      "const baseEmail = pm.environment.get(\"baseEmail\");\r",
                      "\r",
                      "// Generate a random number between min and max (inclusive)\r",
                      "function getRandomNumber(min, max) {\r",
                      "    return Math.floor(Math.random() * (max - min + 1)) + min;\r",
                      "}\r",
                      "\r",
                      "// Generate a random sequence like +a151, +a152, +a153, and so on\r",
                      "const randomSequence = `+a${getRandomNumber(1, 999)}`;\r",
                      "\r",
                      "// Combine the base and random sequence to create the random email address\r",
                      "const randomEmail = `${baseEmail}${randomSequence}@gmail.com`;\r",
                      "\r",
                      "// Set the random email address as an environment variable for your request\r",
                      "pm.environment.set('randomEmail', randomEmail);\r",
                      "\r",
                      "\r",
                      ""
                    ],
                    "_lastExecutionId": "f0df73d6-9875-49de-aaed-2ffb46745ff0"
                  }
                }
              ]
            },
            {
              "id": "1da8b1e7-3198-4c60-9c34-4a1e8b7e8b15",
              "name": "UserLogin",
              "request": {
                "url": {
                  "path": [
                    "users",
                    "login"
                  ],
                  "host": [
                    "{{exp_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n    \"email\":\"{{randomEmail}}\",\r\n    \"password\":\"{{password}}\"\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "cc8daf67-c0f2-4843-9223-e47d8fe754ec",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Check the status code is 200\", function(){\r",
                      "    pm.response.to.have.status(200);\r",
                      "});\r",
                      "\r",
                      "var jsonData = pm.response.json();\r",
                      "\r",
                      "pm.test(\"Check the success message\", function(){\r",
                      "    pm.expect(jsonData.success).to.eql(true);\r",
                      "});\r",
                      "\r",
                      "pm.test(\"Check the body message\", function(){\r",
                      "    pm.expect(jsonData.message).to.eql(\"Login successful\");\r",
                      "});\r",
                      "\r",
                      "pm.environment.set(\"exp_token\", jsonData.data.token);\r",
                      "\r",
                      "pm.test(\"Verify the values are not null\", function(){\r",
                      "    pm.expect(jsonData.data.id, \"Id is not a null\").to.not.be.null;\r",
                      "    pm.expect(jsonData.data.name, \"name is not a null\").to.not.be.null;\r",
                      "    pm.expect(jsonData.data.email, \"email is not a null\").to.not.be.null;\r",
                      "    pm.expect(jsonData.data.token, \"token is not a null\").to.not.be.null;\r",
                      "});\r",
                      "\r",
                      "pm.test(\"Check the response time\", function(){\r",
                      "    pm.expect(pm.response.responseTime).to.below(2000);\r",
                      "});\r",
                      "\r",
                      ""
                    ],
                    "_lastExecutionId": "4a906166-3676-408b-bc6f-6c09add962a5"
                  }
                },
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "98d0941e-d03e-4ab7-a7b0-84826ad7708a",
                    "type": "text/javascript",
                    "exec": [
                      ""
                    ],
                    "_lastExecutionId": "2f4a3493-6a43-4652-8c74-458390f9ecf9"
                  }
                }
              ]
            },
            {
              "id": "3f4af57c-fb9c-4a3c-8c2b-0f9b603b0679",
              "name": "GetProfile",
              "request": {
                "url": {
                  "path": [
                    "users",
                    "profile"
                  ],
                  "host": [
                    "{{exp_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET",
                "auth": {
                  "type": "apikey",
                  "apikey": [
                    {
                      "type": "string",
                      "value": "{{exp_token}}",
                      "key": "value"
                    },
                    {
                      "type": "string",
                      "value": "header",
                      "key": "in"
                    },
                    {
                      "type": "string",
                      "value": "x-auth-token",
                      "key": "key"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "56a6399c-71a1-414d-b876-9262a848415f",
                    "type": "text/javascript",
                    "exec": [
                      "\r",
                      "let jsonData = pm.response.json();\r",
                      "message = [\r",
                      "    \"Access token is not valid or has expired, you will need to login\",\r",
                      "    \"No authentication token specified in x-auth-token header\",\r",
                      "    \"Bad Request\",\r",
                      "    \"Unauthorized Request\",\r",
                      "    \"Internal Error Server\",\r",
                      "    \"Profile successful\",\r",
                      "    \"Not Found\"\r",
                      "]\r",
                      "\r",
                      "status = [400,401,404,500,200,201]\r",
                      "\r",
                      "if (jsonData.success === false) {\r",
                      "    pm.test(`**** E R R O R ***** ${jsonData.message}`, function(){\r",
                      "        // pm.expect(jsonData.message).to.eql(\"No authentication token specified in x-auth-token header\");\r",
                      "        pm.expect(jsonData.message).to.be.oneOf(message);\r",
                      "    });\r",
                      "\r",
                      "    pm.test(`Check the multiple error status code ${jsonData.status}`, function(){\r",
                      "        pm.expect(pm.response.code).to.be.oneOf(status);\r",
                      "    });\r",
                      "\r",
                      "\r",
                      "}\r",
                      "else {\r",
                      "    pm.test(`*** S U C C E S S *** ${jsonData.message}`, function(){\r",
                      "        // pm.expect(jsonData.message).to.equal(\"Profile successful\");\r",
                      "        pm.expect(jsonData.message).to.be.oneOf(message);\r",
                      "    });\r",
                      "\r",
                      "    pm.test(\"Check the response time\", function(){\r",
                      "    pm.expect(pm.response.responseTime).to.be.below(6000);\r",
                      "    });\r",
                      "\r",
                      "    pm.test(`Check the Status code ${jsonData.status}`, function(){\r",
                      "        pm.expect(pm.response.code).to.be.oneOf(status);\r",
                      "    });\r",
                      "\r",
                      "    pm.test(\"Body matches multiple string\",function(){\r",
                      "    pm.expect(pm.response.text()).to.include(\"id\");\r",
                      "    pm.expect(pm.response.text()).to.include(\"name\");\r",
                      "    pm.expect(pm.response.text()).to.include(\"email\");\r",
                      "});\r",
                      "\r",
                      "}\r",
                      "\r",
                      ""
                    ],
                    "_lastExecutionId": "55d3989d-79a3-476b-87c3-020290feeec2"
                  }
                },
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "5b6727ff-6213-4350-874c-dbaeeb0d0d03",
                    "type": "text/javascript",
                    "exec": [
                      ""
                    ],
                    "_lastExecutionId": "5e07b22a-eb37-441e-b764-c112f7fde3f7"
                  }
                }
              ],
              "protocolProfileBehavior": {
                "disabledSystemHeaders": {}
              }
            },
            {
              "id": "ee9d7916-0288-4df6-a4d2-05ed9c78c4f1",
              "name": "UpdateProfile",
              "request": {
                "url": {
                  "path": [
                    "users",
                    "profile"
                  ],
                  "host": [
                    "{{exp_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "PATCH",
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n    \"name\":\"{{name}}\",\r\n    \"phone\":\"{{random_number}}\",\r\n    \"company\":\"{{$randomCompanyName}}\"\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "auth": {
                  "type": "apikey",
                  "apikey": [
                    {
                      "type": "string",
                      "value": "{{exp_token}}",
                      "key": "value"
                    },
                    {
                      "type": "string",
                      "value": "header",
                      "key": "in"
                    },
                    {
                      "type": "string",
                      "value": "x-auth-token",
                      "key": "key"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "6ab7e932-eb9b-4edc-9edc-b8d42e4162ad",
                    "type": "text/javascript",
                    "exec": [
                      "let jsonData = pm.response.json();\r",
                      "message = [\r",
                      "    \"Access token is not valid or has expired, you will need to login\",\r",
                      "    \"No authentication token specified in x-auth-token header\",\r",
                      "    \"User name must be between 4 and 30 characters\",\r",
                      "    \"Phone number should be between 8 and 20 digits\",\r",
                      "    \"Unauthorized Request\",\r",
                      "    \"Internal Error Server\",\r",
                      "    \"Profile updated successful\",\r",
                      "    \"Not Found\",\r",
                      "    \"Bad Request\"\r",
                      "]\r",
                      "\r",
                      "status = [400,401,404,500,200,201]\r",
                      "// var jsonData1 = pm.response.json();\r",
                      "// pm.environment.set(\"phoneNumber\", jsonData1.data.phone);\r",
                      "\r",
                      "if (jsonData.success === false) {\r",
                      "    pm.test(`**** E R R O R ***** ${jsonData.message}`, function(){\r",
                      "        // pm.expect(jsonData.message).to.eql(\"No authentication token specified in x-auth-token header\");\r",
                      "        pm.expect(jsonData.message).to.be.oneOf(message);\r",
                      "    });\r",
                      "\r",
                      "    pm.test(`Check the multiple error status code ${jsonData.status}`, function(){\r",
                      "        pm.expect(pm.response.code).to.be.oneOf(status);\r",
                      "    });\r",
                      "\r",
                      "\r",
                      "}\r",
                      "else {\r",
                      "    pm.test(`*** S U C C E S S *** ${jsonData.message}`, function(){\r",
                      "        // pm.expect(jsonData.message).to.equal(\"Profile successful\");\r",
                      "        pm.expect(jsonData.message).to.be.oneOf(message);\r",
                      "    });\r",
                      "\r",
                      "    pm.test(\"Check the response time\", function(){\r",
                      "    pm.expect(pm.response.responseTime).to.be.below(6000);\r",
                      "    });\r",
                      "\r",
                      "    pm.test(`Check the Status code ${jsonData.status}`, function(){\r",
                      "        pm.expect(pm.response.code).to.be.oneOf(status);\r",
                      "    });\r",
                      "\r",
                      "    pm.test(\"Body matches multiple string\",function(){\r",
                      "    pm.expect(pm.response.text()).to.include(\"id\");\r",
                      "    pm.expect(pm.response.text()).to.include(\"name\");\r",
                      "    pm.expect(pm.response.text()).to.include(\"email\");\r",
                      "});\r",
                      "\r",
                      "}\r",
                      "\r",
                      ""
                    ],
                    "_lastExecutionId": "bf535ed4-ea27-433b-95ed-0405878d634c"
                  }
                },
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "1dd9ce14-2fea-48d5-b628-446e36acb961",
                    "type": "text/javascript",
                    "exec": [
                      "pm.environment.set(\"random_number\",_.random(1000000000,9999999999));\r",
                      "\r",
                      "\r",
                      ""
                    ],
                    "_lastExecutionId": "81adb337-1695-4fed-b265-391f869dd222"
                  }
                }
              ]
            },
            {
              "id": "03c5b9ed-2c86-4338-932a-d93a799c2d8d",
              "name": "ForgotPassword",
              "request": {
                "url": {
                  "path": [
                    "users",
                    "forgot-password"
                  ],
                  "host": [
                    "{{exp_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n    \"email\":\"{{randomEmail}}\"\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "auth": {
                  "type": "apikey",
                  "apikey": [
                    {
                      "type": "string",
                      "value": "{{exp_token}}",
                      "key": "value"
                    },
                    {
                      "type": "string",
                      "value": "header",
                      "key": "in"
                    },
                    {
                      "type": "string",
                      "value": "x-auth-token",
                      "key": "key"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "72c44319-e1e0-49ac-91f7-f3f0cd439f93",
                    "type": "text/javascript",
                    "exec": [
                      "let jsonData = pm.response.json();\r",
                      "let jsonEmail = JSON.parse(pm.request.body.raw).email;\r",
                      "\r",
                      "message = [\r",
                      "    \"Access token is not valid or has expired, you will need to login\",\r",
                      "    \"No authentication token specified in x-auth-token header\",\r",
                      "    \"Unauthorized Request\",\r",
                      "    \"Internal Error Server\",\r",
                      "    `Password reset link successfully sent to ${pm.environment.get(\"email\")}. Please verify by clicking on the given link`,\r",
                      "    \"Not Found\",\r",
                      "    \"Bad Request\",\r",
                      "    \"A valid email address is required\"\r",
                      "]\r",
                      "\r",
                      "status = [400,401,404,500,200,201]\r",
                      "// var jsonData1 = pm.response.json();\r",
                      "// pm.environment.set(\"phoneNumber\", jsonData1.data.phone);\r",
                      "\r",
                      "if (jsonData.success === false) {\r",
                      "    pm.test(`**** E R R O R ***** ${jsonData.message}`, function(){\r",
                      "        // pm.expect(jsonData.message).to.eql(\"No authentication token specified in x-auth-token header\");\r",
                      "        pm.expect(jsonData.message).to.be.oneOf(message);\r",
                      "    });\r",
                      "\r",
                      "    pm.test(`Check the multiple error status code ${jsonData.status}`, function(){\r",
                      "        pm.expect(pm.response.code).to.be.oneOf(status);\r",
                      "    });\r",
                      "\r",
                      "\r",
                      "}\r",
                      "else {\r",
                      "    pm.test(`*** S U C C E S S *** ${jsonData.message}`, function(){\r",
                      "        // pm.expect(jsonData.message).to.equal(\"Profile successful\");\r",
                      "        pm.expect(jsonData.message).to.be.oneOf(message);\r",
                      "    });\r",
                      "\r",
                      "    pm.test(\"Check the response time\", function(){\r",
                      "    pm.expect(pm.response.responseTime).to.be.below(6000);\r",
                      "    });\r",
                      "\r",
                      "    pm.test(`Check the Status code ${jsonData.status}`, function(){\r",
                      "        pm.expect(pm.response.code).to.be.oneOf(status);\r",
                      "    });\r",
                      "\r",
                      "    pm.test(\"Body matches multiple string\",function(){\r",
                      "    pm.expect(pm.response.text()).to.include(\"message\");\r",
                      "});\r",
                      "\r",
                      "}\r",
                      "\r",
                      ""
                    ],
                    "_lastExecutionId": "a3803636-b917-4048-8873-b62ae1f022d6"
                  }
                },
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "6236deb0-9668-46d8-bb96-97cc86eeb0fa",
                    "type": "text/javascript",
                    "exec": [
                      ""
                    ],
                    "_lastExecutionId": "148f797c-8661-4a45-97c4-527fe81fce77"
                  }
                }
              ]
            },
            {
              "id": "eea8198b-64d4-43e4-b554-aefaae2516cd",
              "name": "GetEmailMessage",
              "request": {
                "url": {
                  "protocol": "https",
                  "path": [
                    "gmail",
                    "v1",
                    "users",
                    "{{user_email_id}}",
                    "messages",
                    ""
                  ],
                  "host": [
                    "gmail",
                    "googleapis",
                    "com"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET",
                "auth": {
                  "type": "oauth2",
                  "oauth2": [
                    {
                      "type": "boolean",
                      "value": false,
                      "key": "useBrowser"
                    },
                    {
                      "type": "string",
                      "value": "{{Scope}}",
                      "key": "scope"
                    },
                    {
                      "type": "string",
                      "value": "{{Client_Secret}}",
                      "key": "clientSecret"
                    },
                    {
                      "type": "string",
                      "value": "{{Client_ID}}",
                      "key": "clientId"
                    },
                    {
                      "type": "string",
                      "value": "{{Access_Token_URL}}",
                      "key": "accessTokenUrl"
                    },
                    {
                      "type": "string",
                      "value": "{{Auth_URL}}",
                      "key": "authUrl"
                    },
                    {
                      "type": "string",
                      "value": "{{Callback_URL}}",
                      "key": "redirect_uri"
                    },
                    {
                      "type": "string",
                      "value": "authorization_code",
                      "key": "grant_type"
                    },
                    {
                      "type": "string",
                      "value": "email_token",
                      "key": "tokenName"
                    },
                    {
                      "type": "string",
                      "value": "header",
                      "key": "addTokenTo"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "705020a4-73b3-44df-86ff-a5984e094d10",
                    "type": "text/javascript",
                    "exec": [
                      "var jsonData = pm.response.json();\r",
                      "pm.environment.set(\"messageId\", jsonData.messages[0].id);\r",
                      "\r",
                      ""
                    ],
                    "_lastExecutionId": "eeef6f2d-f5fd-4a00-be9c-25555c6fa5bc"
                  }
                },
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "cdf7837a-853f-442c-8e05-996129213a95",
                    "type": "text/javascript",
                    "exec": [
                      "var newRefreshToken = pm.environment.get(\"access_token\");\r",
                      "\r",
                      "pm.environment.set(\"refresh_token\", newRefreshToken);"
                    ],
                    "_lastExecutionId": "94790536-1730-42ee-886b-f2872e8a5fee"
                  }
                }
              ]
            },
            {
              "id": "f053ddc8-a8a6-4796-a23f-c89737b34582",
              "name": "GetMessageByID",
              "request": {
                "url": {
                  "protocol": "https",
                  "path": [
                    "gmail",
                    "v1",
                    "users",
                    "{{user_email_id}}",
                    "messages",
                    "{{messageId}}"
                  ],
                  "host": [
                    "gmail",
                    "googleapis",
                    "com"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "multipart/mixed"
                  }
                ],
                "method": "GET",
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "{{access_token}}",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "d94857cd-ae23-40c6-ae38-5f7aaca3e833",
                    "type": "text/javascript",
                    "exec": [
                      "\r",
                      "const response = pm.response.json();\r",
                      "\r",
                      "pm.environment.set(\"message_Body\", response.payload.body.data);\r",
                      "\r",
                      "var atob = require('atob');\r",
                      "\r",
                      "\r",
                      "var base64Data = pm.environment.get(\"message_Body\");\r",
                      "var decodedData = atob(base64Data);\r",
                      "postman.setEnvironmentVariable(\"rest_password\",decodedData);\r",
                      "var tokenRegex = /Reset password link: (https:\\/\\/practice\\.expandtesting\\.com\\/notes\\/app\\/reset-password\\/([\\w\\d]+))[^ ]+/;\r",
                      "var tokenMatch = decodedData.match(tokenRegex);\r",
                      "if (tokenMatch && tokenMatch[2]) {\r",
                      "    var resetPasswordToken = tokenMatch[2];\r",
                      "    \r",
                      "    // Set the reset password link as a Postman environment variable for later use\r",
                      "    pm.environment.set(\"resetPasswordToken\", resetPasswordToken);\r",
                      "    \r",
                      "    // Log the reset password link\r",
                      "    console.log(\"Reset Password Token: \" + resetPasswordToken);\r",
                      "} else {\r",
                      "    console.log(\"Reset password token not found in the response.\");\r",
                      "}\r",
                      "console.log(decodedData);\r",
                      "\r",
                      "\r",
                      "\r",
                      "\r",
                      "\r",
                      "\r",
                      "\r",
                      "\r",
                      "\r",
                      "\r",
                      "\r",
                      ""
                    ],
                    "_lastExecutionId": "4816be40-7f3a-489e-b23c-14c698a58ddc"
                  }
                },
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "8349aa22-c992-434e-9e35-e5fc8ef4a245",
                    "type": "text/javascript",
                    "exec": [
                      ""
                    ],
                    "_lastExecutionId": "e5ddbcb0-9830-4e57-9232-851987938e7d"
                  }
                }
              ]
            },
            {
              "id": "8d884a10-0abd-48de-9b8a-47bfc7ff13cd",
              "name": "verify-reset-password-token",
              "request": {
                "url": {
                  "path": [
                    "users",
                    "verify-reset-password-token"
                  ],
                  "host": [
                    "{{exp_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "accept",
                    "value": "application/json"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/x-www-form-urlencoded"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "urlencoded",
                  "urlencoded": [
                    {
                      "key": "token",
                      "value": "{{resetPasswordToken}}"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "799e647c-efdd-4528-bf8c-ec8d1e1a4b55",
                    "type": "text/javascript",
                    "exec": [
                      "let jsonData = pm.response.json();\r",
                      "\r",
                      "message = [\r",
                      "    \"The provided password reset token is valid\",\r",
                      "    \"Bad Request\",\r",
                      "    \"Internal Error Server\",\r",
                      "    \"The provided password reset token is invalid or has expired\"\r",
                      "]\r",
                      "\r",
                      "status = [200,400,401,500]\r",
                      "\r",
                      "if (jsonData.success === false) {\r",
                      "    pm.test(`**** E R R O R ***** ${jsonData.message}`, function(){\r",
                      "        // pm.expect(jsonData.message).to.eql(\"No authentication token specified in x-auth-token header\");\r",
                      "        pm.expect(jsonData.message).to.be.oneOf(message);\r",
                      "    });\r",
                      "\r",
                      "    pm.test(`Check the multiple error status code ${jsonData.status}`, function(){\r",
                      "        pm.expect(pm.response.code).to.be.oneOf(status);\r",
                      "    });\r",
                      "\r",
                      "\r",
                      "}\r",
                      "else {\r",
                      "    pm.test(`*** S U C C E S S *** ${jsonData.message}`, function(){\r",
                      "        // pm.expect(jsonData.message).to.equal(\"Profile successful\");\r",
                      "        pm.expect(jsonData.message).to.be.oneOf(message);\r",
                      "    });\r",
                      "\r",
                      "    pm.test(\"Check the response time\", function(){\r",
                      "    pm.expect(pm.response.responseTime).to.be.below(6000);\r",
                      "    });\r",
                      "\r",
                      "    pm.test(`Check the Status code ${jsonData.status}`, function(){\r",
                      "        pm.expect(pm.response.code).to.be.oneOf(status);\r",
                      "    });\r",
                      "\r",
                      "    pm.test(\"Body matches multiple string\",function(){\r",
                      "    pm.expect(pm.response.text()).to.include(\"message\");\r",
                      "});\r",
                      "\r",
                      "}\r",
                      "\r",
                      ""
                    ],
                    "_lastExecutionId": "c1d6d515-485d-45cb-ab2b-15662e3830f7"
                  }
                },
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "46fb041c-0790-4ccb-a117-d6dcbb44aa15",
                    "type": "text/javascript",
                    "exec": [
                      ""
                    ],
                    "_lastExecutionId": "48a955fd-f392-4b00-9034-2a273d9fea6d"
                  }
                }
              ]
            },
            {
              "id": "740f7a4b-9db6-4b38-a333-0ad712a2b2a2",
              "name": "reset-password",
              "request": {
                "url": {
                  "protocol": "https",
                  "path": [
                    "notes",
                    "api",
                    "users",
                    "reset-password"
                  ],
                  "host": [
                    "practice",
                    "expandtesting",
                    "com"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "accept",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n    \"token\":\"{{resetPasswordToken}}\",\r\n    \"newPassword\":\"{{$randomPassword}}\"\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "7cdc8324-5612-42e4-8f85-49037412238b",
                    "type": "text/javascript",
                    "exec": [
                      "let jsonData = pm.response.json();\r",
                      "\r",
                      "let newPassword = JSON.parse(pm.request.body.raw).newPassword;\r",
                      "pm.environment.set('password', newPassword);\r",
                      "\r",
                      "\r",
                      "message = [\r",
                      "    \"The password has been successfully reset\",\r",
                      "    \"Token must be between 64 characters\",\r",
                      "    \"Bad Request\",\r",
                      "    \"The password was successfully updated\",\r",
                      "    \"Internal Error Server\",\r",
                      "    \"New password must be between 6 and 30 characters\",\r",
                      "    \"The password reset token is invalid or has expired\"\r",
                      "]\r",
                      "\r",
                      "status = [200,400,401,500]\r",
                      "\r",
                      "if (jsonData.success === false) {\r",
                      "    pm.test(`**** E R R O R ***** ${jsonData.message}`, function(){\r",
                      "        // pm.expect(jsonData.message).to.eql(\"No authentication token specified in x-auth-token header\");\r",
                      "        pm.expect(jsonData.message).to.be.oneOf(message);\r",
                      "    });\r",
                      "\r",
                      "    pm.test(`Check the multiple error status code ${jsonData.status}`, function(){\r",
                      "        pm.expect(pm.response.code).to.be.oneOf(status);\r",
                      "    });\r",
                      "\r",
                      "\r",
                      "}\r",
                      "else {\r",
                      "    pm.test(`*** S U C C E S S *** ${jsonData.message}`, function(){\r",
                      "        // pm.expect(jsonData.message).to.equal(\"Profile successful\");\r",
                      "        pm.expect(jsonData.message).to.be.oneOf(message);\r",
                      "    });\r",
                      "\r",
                      "    pm.test(\"Check the response time\", function(){\r",
                      "    pm.expect(pm.response.responseTime).to.be.below(6000);\r",
                      "    });\r",
                      "\r",
                      "    pm.test(`Check the Status code ${jsonData.status}`, function(){\r",
                      "        pm.expect(pm.response.code).to.be.oneOf(status);\r",
                      "    });\r",
                      "\r",
                      "    pm.test(\"Body matches multiple string\",function(){\r",
                      "    pm.expect(pm.response.text()).to.include(\"message\");\r",
                      "});\r",
                      "\r",
                      "}\r",
                      "\r",
                      "\r",
                      ""
                    ],
                    "_lastExecutionId": "5d234639-2098-4725-8401-094ce8fa851b"
                  }
                },
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "1268a1ec-48a3-4dfd-8fc8-3c14d0fa7f28",
                    "type": "text/javascript",
                    "exec": [
                      ""
                    ],
                    "_lastExecutionId": "3e5db1d1-0c8c-4a29-8797-f14a01a4bedc"
                  }
                }
              ]
            },
            {
              "id": "93821c3b-e028-4eda-a749-05d87d7e6a94",
              "name": "change-password",
              "request": {
                "url": {
                  "path": [
                    "users",
                    "change-password"
                  ],
                  "host": [
                    "{{exp_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "accept",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n    \"currentPassword\":\"{{password}}\",\r\n    \"newPassword\":\"{{$randomPassword}}\"\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "auth": {
                  "type": "apikey",
                  "apikey": [
                    {
                      "type": "string",
                      "value": "{{exp_token}}",
                      "key": "value"
                    },
                    {
                      "type": "string",
                      "value": "x-auth-token",
                      "key": "key"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "3eca22f1-7d4a-4832-8b68-54badb876aa6",
                    "type": "text/javascript",
                    "exec": [
                      "pm.environment.get(\"password\");\r",
                      "\r",
                      "let newPassword = JSON.parse(pm.request.body.raw).newPassword;\r",
                      "pm.environment.set('password', newPassword);\r",
                      "\r",
                      "let jsonData = pm.response.json();\r",
                      "message = [\r",
                      "    \"The password has been successfully reset\",\r",
                      "    \"Token must be between 64 characters\",\r",
                      "    \"Bad Request\",\r",
                      "    \"The password was successfully updated\",\r",
                      "    \"Internal Error Server\",\r",
                      "    \"New password must be between 6 and 30 characters\",\r",
                      "    \"The password reset token is invalid or has expired\"\r",
                      "]\r",
                      "\r",
                      "status = [200,400,401,500]\r",
                      "\r",
                      "if (jsonData.success === false) {\r",
                      "    pm.test(`**** E R R O R ***** ${jsonData.message}`, function(){\r",
                      "        // pm.expect(jsonData.message).to.eql(\"No authentication token specified in x-auth-token header\");\r",
                      "        pm.expect(jsonData.message).to.be.oneOf(message);\r",
                      "    });\r",
                      "\r",
                      "    pm.test(`Check the multiple error status code ${jsonData.status}`, function(){\r",
                      "        pm.expect(pm.response.code).to.be.oneOf(status);\r",
                      "    });\r",
                      "\r",
                      "\r",
                      "}\r",
                      "else {\r",
                      "    pm.test(`*** S U C C E S S *** ${jsonData.message}`, function(){\r",
                      "        // pm.expect(jsonData.message).to.equal(\"Profile successful\");\r",
                      "        pm.expect(jsonData.message).to.be.oneOf(message);\r",
                      "    });\r",
                      "\r",
                      "    pm.test(\"Check the response time\", function(){\r",
                      "    pm.expect(pm.response.responseTime).to.be.below(6000);\r",
                      "    });\r",
                      "\r",
                      "    pm.test(`Check the Status code ${jsonData.status}`, function(){\r",
                      "        pm.expect(pm.response.code).to.be.oneOf(status);\r",
                      "    });\r",
                      "\r",
                      "    pm.test(\"Body matches multiple string\",function(){\r",
                      "    pm.expect(pm.response.text()).to.include(\"message\");\r",
                      "});\r",
                      "\r",
                      "}\r",
                      ""
                    ],
                    "_lastExecutionId": "64be3638-86ca-4200-b966-7a137b03eb2e"
                  }
                },
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "aa473681-09fc-4673-a2fe-7012cf4e42e9",
                    "type": "text/javascript",
                    "exec": [
                      "console.log(pm.environment.get(\"password\"));\r",
                      "\r",
                      "\r",
                      "\r",
                      ""
                    ],
                    "_lastExecutionId": "fb6fc291-ccb6-46ad-9bb8-0e4bf2cf736d"
                  }
                }
              ]
            },
            {
              "id": "f4c8e78d-5700-43a2-8e20-cb1a0de26ce9",
              "name": "UserLogout",
              "request": {
                "url": {
                  "path": [
                    "users",
                    "logout"
                  ],
                  "host": [
                    "{{exp_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "accept",
                    "value": "application/json"
                  }
                ],
                "method": "DELETE",
                "auth": {
                  "type": "apikey",
                  "apikey": [
                    {
                      "type": "string",
                      "value": "{{exp_token}}",
                      "key": "value"
                    },
                    {
                      "type": "string",
                      "value": "x-auth-token",
                      "key": "key"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "43a38bb6-0063-463b-9a7b-ea0674d209fe",
                    "type": "text/javascript",
                    "exec": [
                      "let jsonData = pm.response.json();\r",
                      "message = [\r",
                      "    \"User has been successfully logged out\",\r",
                      "    \"Token must be between 64 characters\",\r",
                      "    \"Bad Request\",\r",
                      "    \"Access token is not valid or has expired, you will need to login\",\r",
                      "    \"No authentication token specified in x-auth-token header\",\r",
                      "    \"Internal Error Server\",\r",
                      "    \"Successful Request\",\r",
                      "    \"Unauthorized Request\"\r",
                      "]\r",
                      "\r",
                      "status = [200,400,401,500]\r",
                      "\r",
                      "if (jsonData.success === false) {\r",
                      "    pm.test(`**** E R R O R ***** ${jsonData.message}`, function(){\r",
                      "        // pm.expect(jsonData.message).to.eql(\"No authentication token specified in x-auth-token header\");\r",
                      "        pm.expect(jsonData.message).to.be.oneOf(message);\r",
                      "    });\r",
                      "\r",
                      "    pm.test(`Check the multiple error status code ${jsonData.status}`, function(){\r",
                      "        pm.expect(pm.response.code).to.be.oneOf(status);\r",
                      "    });\r",
                      "\r",
                      "\r",
                      "}\r",
                      "else {\r",
                      "    pm.test(`*** S U C C E S S *** ${jsonData.message}`, function(){\r",
                      "        // pm.expect(jsonData.message).to.equal(\"Profile successful\");\r",
                      "        pm.expect(jsonData.message).to.be.oneOf(message);\r",
                      "    });\r",
                      "\r",
                      "    pm.test(\"Check the response time\", function(){\r",
                      "    pm.expect(pm.response.responseTime).to.be.below(6000);\r",
                      "    });\r",
                      "\r",
                      "    pm.test(`Check the Status code ${jsonData.status}`, function(){\r",
                      "        pm.expect(pm.response.code).to.be.oneOf(status);\r",
                      "    });\r",
                      "\r",
                      "    pm.test(\"Body matches multiple string\",function(){\r",
                      "    pm.expect(pm.response.text()).to.include(\"message\");\r",
                      "});\r",
                      "\r",
                      "}\r",
                      "\r",
                      "postman.setNextRequest(null);"
                    ],
                    "_lastExecutionId": "c7d982d4-a8dc-460f-a106-6e0c01643e82"
                  }
                },
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "e8ae662d-a080-4bf5-a817-754113435b5e",
                    "type": "text/javascript",
                    "exec": [
                      ""
                    ],
                    "_lastExecutionId": "0b0d404e-4117-40fc-9982-a95619506052"
                  }
                }
              ]
            }
          ],
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "3380df96-f386-44be-9dc8-eb145a929d13",
                "type": "text/javascript",
                "exec": [
                  ""
                ],
                "_lastExecutionId": "c2613397-fddf-4d46-99b6-9ffc9166e0a8"
              }
            },
            {
              "listen": "test",
              "script": {
                "id": "18c4e0bb-9477-4e5f-b627-d550e666c7d3",
                "type": "text/javascript",
                "exec": [
                  ""
                ],
                "_lastExecutionId": "78225eb1-cbe5-408b-978b-a1bf2d2b693c"
              }
            }
          ],
          "variable": [
            {
              "type": "string",
              "value": "https://practice.expandtesting.com/notes/api",
              "key": "exp_url"
            }
          ],
          "info": {
            "_postman_id": "723ea9c3-0635-4605-b90c-d6d9e9835d8c",
            "name": "expandtesting",
            "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
          }
        },
        "cursor": {
          "ref": "f70c212e-54ae-4c80-84bf-295f5d6f7f9a",
          "length": 12,
          "cycles": 1,
          "position": 1,
          "iteration": 0,
          "httpRequestId": "862306ad-af84-4909-a2fc-5aa4c4d48310",
          "scriptId": "4f0c3c3d-4171-4bea-b8a8-3fd567809f0d",
          "execution": "2fbfcb58-035a-4d0d-afa2-7fc9d5239e13"
        }
      },
      {
        "error": {
          "name": "TypeError",
          "index": 2,
          "test": "Verify the values are not null",
          "message": "Cannot read properties of undefined (reading 'id')",
          "stack": "TypeError: Cannot read properties of undefined (reading 'id')\n   at Object.eval sandbox-script.js:3:2)",
          "checksum": "3477dda8f0eb55a631c191db7258ad33",
          "id": "b1e7e033-88a4-4495-bf5f-7060610eaead",
          "timestamp": 1698733438932,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 3,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 2,
              "native": false
            }
          ]
        },
        "at": "assertion:2 in test-script",
        "source": {
          "id": "d3b70abb-4c44-4d96-b946-e8ef2e19907f",
          "name": "RegisterUser",
          "request": {
            "url": {
              "path": [
                "users",
                "register"
              ],
              "host": [
                "{{exp_url}}"
              ],
              "query": [],
              "variable": []
            },
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\r\n    \"name\":\"{{$randomFullName}}\",\r\n    \"email\":\"{{randomEmail}}\",\r\n    \"password\":\"{{$randomPassword}}\"\r\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "4f0c3c3d-4171-4bea-b8a8-3fd567809f0d",
                "type": "text/javascript",
                "exec": [
                  "var jsonData = pm.response.json();\r",
                  "\r",
                  "pm.test(\"Check the success msg is true in body?\", function(){\r",
                  "    pm.expect(jsonData.success).to.eql(true);\r",
                  "});\r",
                  "\r",
                  "pm.test(\"Check the body message\", function(){\r",
                  "    pm.expect(jsonData.message).to.eql(\"User account created successfully\");\r",
                  "});\r",
                  "\r",
                  "pm.test(\"Verify the values are not null\", function(){\r",
                  "    pm.expect(jsonData.data.id, \"Id is not null\").to.not.be.null;\r",
                  "    pm.expect(jsonData.data.name, \"name is not null\").to.not.be.null;\r",
                  "    pm.expect(jsonData.data.email, \"email is not null\").to.not.be.null;\r",
                  "});\r",
                  "\r",
                  "pm.test(\"response property matching an environment variable\", function(){\r",
                  "    pm.expect(jsonData.name).to.eql(pm.environment.get(\"name\"));\r",
                  "});\r",
                  "\r",
                  "pm.test(\"Check the response time\", function(){\r",
                  "    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
                  "});\r",
                  "\r",
                  "pm.environment.set(\"id\", jsonData.data.id);\r",
                  "pm.environment.set(\"name\", jsonData.data.name);\r",
                  "\r",
                  "let password = JSON.parse(pm.request.body.raw).password;\r",
                  "pm.environment.set('password', password);\r",
                  "\r",
                  "message = [\r",
                  "    \"Access token is not valid or has expired, you will need to login\",\r",
                  "    \"No authentication token specified in x-auth-token header\",\r",
                  "    \"User name must be between 4 and 30 characters\",\r",
                  "    \"Phone number should be between 8 and 20 digits\",\r",
                  "    \"Unauthorized Request\",\r",
                  "    \"Internal Error Server\",\r",
                  "    \"Profile updated successful\",\r",
                  "    \"User account created successfully\",\r",
                  "    \"Not Found\",\r",
                  "    \"Bad Request\",\r",
                  "    \"An account already exists with the same email address\"\r",
                  "];\r",
                  "\r",
                  "status = [400,401,404,409,500,200,201];\r",
                  "\r",
                  "if (jsonData.success === false) {\r",
                  "    pm.test(`**** E R R O R ***** ${jsonData.message}`, function(){\r",
                  "        pm.expect(jsonData.message).to.be.oneOf(message);\r",
                  "    });\r",
                  "\r",
                  "    pm.test(`Check the multiple error status code ${jsonData.status}`, function(){\r",
                  "        pm.expect(pm.response.code).to.be.oneOf(status);\r",
                  "    });\r",
                  "}\r",
                  "else {\r",
                  "    pm.test(`*** S U C C E S S *** ${jsonData.message}`, function(){\r",
                  "        pm.expect(jsonData.message).to.be.oneOf(message);\r",
                  "    });\r",
                  "\r",
                  "    pm.test(`Check the Status code ${jsonData.status}`, function(){\r",
                  "        pm.expect(pm.response.code).to.be.oneOf(status);\r",
                  "    });\r",
                  "}"
                ],
                "_lastExecutionId": "2fbfcb58-035a-4d0d-afa2-7fc9d5239e13"
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "id": "3483ef69-d6b6-4835-8746-973a3f7a159e",
                "type": "text/javascript",
                "exec": [
                  "\r",
                  "// // Define the incrementEmail function\r",
                  "// function incrementEmail(email) {\r",
                  "//     const match = email.match(/\\+a(\\d+)/);\r",
                  "\r",
                  "//     if (match) {\r",
                  "//         const currentNumber = parseInt(match[1]);\r",
                  "//         const nextNumber = currentNumber + 1;\r",
                  "//         const incrementedEmail = email.replace(/\\+a\\d+/, `+a${nextNumber}`);\r",
                  "//         return incrementedEmail;\r",
                  "//     }\r",
                  "\r",
                  "//     return email;\r",
                  "// }\r",
                  "\r",
                  "\r",
                  "// const originalEmail = pm.environment.get(\"email\");\r",
                  "\r",
                  "\r",
                  "// if (originalEmail) {\r",
                  "//     // Use the incrementEmail function to get the incremented email\r",
                  "//     const incrementedEmail = incrementEmail(originalEmail);\r",
                  "\r",
                  "//     // Set the incremented email back to the environment\r",
                  "//     pm.environment.set(\"email\", incrementedEmail);\r",
                  "\r",
                  "//     console.log(\"OriginalEmail:\", originalEmail);\r",
                  "//     console.log(\"IncrementedEmail:\", incrementedEmail);\r",
                  "// } else {\r",
                  "//     console.error(\"Email environment variable not found.\");\r",
                  "// }\r",
                  "\r",
                  "// console.log(pm.environment.get(\"email\"));\r",
                  "\r",
                  "\r",
                  "// -------------------------------------------------------------------\r",
                  "// Define the base part of the email address\r",
                  "const baseEmail = pm.environment.get(\"baseEmail\");\r",
                  "\r",
                  "// Generate a random number between min and max (inclusive)\r",
                  "function getRandomNumber(min, max) {\r",
                  "    return Math.floor(Math.random() * (max - min + 1)) + min;\r",
                  "}\r",
                  "\r",
                  "// Generate a random sequence like +a151, +a152, +a153, and so on\r",
                  "const randomSequence = `+a${getRandomNumber(1, 999)}`;\r",
                  "\r",
                  "// Combine the base and random sequence to create the random email address\r",
                  "const randomEmail = `${baseEmail}${randomSequence}@gmail.com`;\r",
                  "\r",
                  "// Set the random email address as an environment variable for your request\r",
                  "pm.environment.set('randomEmail', randomEmail);\r",
                  "\r",
                  "\r",
                  ""
                ],
                "_lastExecutionId": "f0df73d6-9875-49de-aaed-2ffb46745ff0"
              }
            }
          ]
        },
        "parent": {
          "_": {
            "postman_id": "723ea9c3-0635-4605-b90c-d6d9e9835d8c",
            "exporter_id": "13852941",
            "collection_link": "https://galactic-astronaut-894425.postman.co/workspace/b6dafb4f-3507-4e58-a32d-dd31bf6ab148/collection/13852941-723ea9c3-0635-4605-b90c-d6d9e9835d8c?action=share&source=collection_link&creator=13852941"
          },
          "item": [
            {
              "id": "90407c19-d06c-4337-abb9-4dfc2fa17fc8",
              "name": "health_check",
              "request": {
                "url": {
                  "path": [
                    "health-check"
                  ],
                  "host": [
                    "{{exp_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "b075fb8f-9483-4909-a4a4-cf6344c6642b",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Check the Status code 200\", function(){\r",
                      "    pm.response.to.have.status(200);\r",
                      "});\r",
                      "\r",
                      "var jsonData = pm.response.json();\r",
                      "\r",
                      "pm.test(\"Check the success code in body\", function(){\r",
                      "    pm.expect(jsonData.success).to.eql(true);\r",
                      "});\r",
                      "\r",
                      "pm.test(\"Check the Status code in body\", function(){\r",
                      "    pm.expect(jsonData.status).to.eql(200);\r",
                      "});\r",
                      "\r",
                      "pm.test(\"Check the message in body\", function(){\r",
                      "    pm.expect(jsonData.message).to.eql(\"Notes API is Running\");\r",
                      "});\r",
                      "\r",
                      "\r",
                      ""
                    ],
                    "_lastExecutionId": "dcf22f24-f95a-4d61-981a-68f2474c0b1d"
                  }
                },
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "15079d7d-2fc3-468b-b923-1fd697b2156e",
                    "type": "text/javascript",
                    "exec": [
                      ""
                    ],
                    "_lastExecutionId": "a57965c9-dfeb-425b-a87b-14b41a981af7"
                  }
                }
              ]
            },
            {
              "id": "d3b70abb-4c44-4d96-b946-e8ef2e19907f",
              "name": "RegisterUser",
              "request": {
                "url": {
                  "path": [
                    "users",
                    "register"
                  ],
                  "host": [
                    "{{exp_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n    \"name\":\"{{$randomFullName}}\",\r\n    \"email\":\"{{randomEmail}}\",\r\n    \"password\":\"{{$randomPassword}}\"\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "4f0c3c3d-4171-4bea-b8a8-3fd567809f0d",
                    "type": "text/javascript",
                    "exec": [
                      "var jsonData = pm.response.json();\r",
                      "\r",
                      "pm.test(\"Check the success msg is true in body?\", function(){\r",
                      "    pm.expect(jsonData.success).to.eql(true);\r",
                      "});\r",
                      "\r",
                      "pm.test(\"Check the body message\", function(){\r",
                      "    pm.expect(jsonData.message).to.eql(\"User account created successfully\");\r",
                      "});\r",
                      "\r",
                      "pm.test(\"Verify the values are not null\", function(){\r",
                      "    pm.expect(jsonData.data.id, \"Id is not null\").to.not.be.null;\r",
                      "    pm.expect(jsonData.data.name, \"name is not null\").to.not.be.null;\r",
                      "    pm.expect(jsonData.data.email, \"email is not null\").to.not.be.null;\r",
                      "});\r",
                      "\r",
                      "pm.test(\"response property matching an environment variable\", function(){\r",
                      "    pm.expect(jsonData.name).to.eql(pm.environment.get(\"name\"));\r",
                      "});\r",
                      "\r",
                      "pm.test(\"Check the response time\", function(){\r",
                      "    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
                      "});\r",
                      "\r",
                      "pm.environment.set(\"id\", jsonData.data.id);\r",
                      "pm.environment.set(\"name\", jsonData.data.name);\r",
                      "\r",
                      "let password = JSON.parse(pm.request.body.raw).password;\r",
                      "pm.environment.set('password', password);\r",
                      "\r",
                      "message = [\r",
                      "    \"Access token is not valid or has expired, you will need to login\",\r",
                      "    \"No authentication token specified in x-auth-token header\",\r",
                      "    \"User name must be between 4 and 30 characters\",\r",
                      "    \"Phone number should be between 8 and 20 digits\",\r",
                      "    \"Unauthorized Request\",\r",
                      "    \"Internal Error Server\",\r",
                      "    \"Profile updated successful\",\r",
                      "    \"User account created successfully\",\r",
                      "    \"Not Found\",\r",
                      "    \"Bad Request\",\r",
                      "    \"An account already exists with the same email address\"\r",
                      "];\r",
                      "\r",
                      "status = [400,401,404,409,500,200,201];\r",
                      "\r",
                      "if (jsonData.success === false) {\r",
                      "    pm.test(`**** E R R O R ***** ${jsonData.message}`, function(){\r",
                      "        pm.expect(jsonData.message).to.be.oneOf(message);\r",
                      "    });\r",
                      "\r",
                      "    pm.test(`Check the multiple error status code ${jsonData.status}`, function(){\r",
                      "        pm.expect(pm.response.code).to.be.oneOf(status);\r",
                      "    });\r",
                      "}\r",
                      "else {\r",
                      "    pm.test(`*** S U C C E S S *** ${jsonData.message}`, function(){\r",
                      "        pm.expect(jsonData.message).to.be.oneOf(message);\r",
                      "    });\r",
                      "\r",
                      "    pm.test(`Check the Status code ${jsonData.status}`, function(){\r",
                      "        pm.expect(pm.response.code).to.be.oneOf(status);\r",
                      "    });\r",
                      "}"
                    ],
                    "_lastExecutionId": "2fbfcb58-035a-4d0d-afa2-7fc9d5239e13"
                  }
                },
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "3483ef69-d6b6-4835-8746-973a3f7a159e",
                    "type": "text/javascript",
                    "exec": [
                      "\r",
                      "// // Define the incrementEmail function\r",
                      "// function incrementEmail(email) {\r",
                      "//     const match = email.match(/\\+a(\\d+)/);\r",
                      "\r",
                      "//     if (match) {\r",
                      "//         const currentNumber = parseInt(match[1]);\r",
                      "//         const nextNumber = currentNumber + 1;\r",
                      "//         const incrementedEmail = email.replace(/\\+a\\d+/, `+a${nextNumber}`);\r",
                      "//         return incrementedEmail;\r",
                      "//     }\r",
                      "\r",
                      "//     return email;\r",
                      "// }\r",
                      "\r",
                      "\r",
                      "// const originalEmail = pm.environment.get(\"email\");\r",
                      "\r",
                      "\r",
                      "// if (originalEmail) {\r",
                      "//     // Use the incrementEmail function to get the incremented email\r",
                      "//     const incrementedEmail = incrementEmail(originalEmail);\r",
                      "\r",
                      "//     // Set the incremented email back to the environment\r",
                      "//     pm.environment.set(\"email\", incrementedEmail);\r",
                      "\r",
                      "//     console.log(\"OriginalEmail:\", originalEmail);\r",
                      "//     console.log(\"IncrementedEmail:\", incrementedEmail);\r",
                      "// } else {\r",
                      "//     console.error(\"Email environment variable not found.\");\r",
                      "// }\r",
                      "\r",
                      "// console.log(pm.environment.get(\"email\"));\r",
                      "\r",
                      "\r",
                      "// -------------------------------------------------------------------\r",
                      "// Define the base part of the email address\r",
                      "const baseEmail = pm.environment.get(\"baseEmail\");\r",
                      "\r",
                      "// Generate a random number between min and max (inclusive)\r",
                      "function getRandomNumber(min, max) {\r",
                      "    return Math.floor(Math.random() * (max - min + 1)) + min;\r",
                      "}\r",
                      "\r",
                      "// Generate a random sequence like +a151, +a152, +a153, and so on\r",
                      "const randomSequence = `+a${getRandomNumber(1, 999)}`;\r",
                      "\r",
                      "// Combine the base and random sequence to create the random email address\r",
                      "const randomEmail = `${baseEmail}${randomSequence}@gmail.com`;\r",
                      "\r",
                      "// Set the random email address as an environment variable for your request\r",
                      "pm.environment.set('randomEmail', randomEmail);\r",
                      "\r",
                      "\r",
                      ""
                    ],
                    "_lastExecutionId": "f0df73d6-9875-49de-aaed-2ffb46745ff0"
                  }
                }
              ]
            },
            {
              "id": "1da8b1e7-3198-4c60-9c34-4a1e8b7e8b15",
              "name": "UserLogin",
              "request": {
                "url": {
                  "path": [
                    "users",
                    "login"
                  ],
                  "host": [
                    "{{exp_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n    \"email\":\"{{randomEmail}}\",\r\n    \"password\":\"{{password}}\"\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "cc8daf67-c0f2-4843-9223-e47d8fe754ec",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Check the status code is 200\", function(){\r",
                      "    pm.response.to.have.status(200);\r",
                      "});\r",
                      "\r",
                      "var jsonData = pm.response.json();\r",
                      "\r",
                      "pm.test(\"Check the success message\", function(){\r",
                      "    pm.expect(jsonData.success).to.eql(true);\r",
                      "});\r",
                      "\r",
                      "pm.test(\"Check the body message\", function(){\r",
                      "    pm.expect(jsonData.message).to.eql(\"Login successful\");\r",
                      "});\r",
                      "\r",
                      "pm.environment.set(\"exp_token\", jsonData.data.token);\r",
                      "\r",
                      "pm.test(\"Verify the values are not null\", function(){\r",
                      "    pm.expect(jsonData.data.id, \"Id is not a null\").to.not.be.null;\r",
                      "    pm.expect(jsonData.data.name, \"name is not a null\").to.not.be.null;\r",
                      "    pm.expect(jsonData.data.email, \"email is not a null\").to.not.be.null;\r",
                      "    pm.expect(jsonData.data.token, \"token is not a null\").to.not.be.null;\r",
                      "});\r",
                      "\r",
                      "pm.test(\"Check the response time\", function(){\r",
                      "    pm.expect(pm.response.responseTime).to.below(2000);\r",
                      "});\r",
                      "\r",
                      ""
                    ],
                    "_lastExecutionId": "4a906166-3676-408b-bc6f-6c09add962a5"
                  }
                },
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "98d0941e-d03e-4ab7-a7b0-84826ad7708a",
                    "type": "text/javascript",
                    "exec": [
                      ""
                    ],
                    "_lastExecutionId": "2f4a3493-6a43-4652-8c74-458390f9ecf9"
                  }
                }
              ]
            },
            {
              "id": "3f4af57c-fb9c-4a3c-8c2b-0f9b603b0679",
              "name": "GetProfile",
              "request": {
                "url": {
                  "path": [
                    "users",
                    "profile"
                  ],
                  "host": [
                    "{{exp_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET",
                "auth": {
                  "type": "apikey",
                  "apikey": [
                    {
                      "type": "string",
                      "value": "{{exp_token}}",
                      "key": "value"
                    },
                    {
                      "type": "string",
                      "value": "header",
                      "key": "in"
                    },
                    {
                      "type": "string",
                      "value": "x-auth-token",
                      "key": "key"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "56a6399c-71a1-414d-b876-9262a848415f",
                    "type": "text/javascript",
                    "exec": [
                      "\r",
                      "let jsonData = pm.response.json();\r",
                      "message = [\r",
                      "    \"Access token is not valid or has expired, you will need to login\",\r",
                      "    \"No authentication token specified in x-auth-token header\",\r",
                      "    \"Bad Request\",\r",
                      "    \"Unauthorized Request\",\r",
                      "    \"Internal Error Server\",\r",
                      "    \"Profile successful\",\r",
                      "    \"Not Found\"\r",
                      "]\r",
                      "\r",
                      "status = [400,401,404,500,200,201]\r",
                      "\r",
                      "if (jsonData.success === false) {\r",
                      "    pm.test(`**** E R R O R ***** ${jsonData.message}`, function(){\r",
                      "        // pm.expect(jsonData.message).to.eql(\"No authentication token specified in x-auth-token header\");\r",
                      "        pm.expect(jsonData.message).to.be.oneOf(message);\r",
                      "    });\r",
                      "\r",
                      "    pm.test(`Check the multiple error status code ${jsonData.status}`, function(){\r",
                      "        pm.expect(pm.response.code).to.be.oneOf(status);\r",
                      "    });\r",
                      "\r",
                      "\r",
                      "}\r",
                      "else {\r",
                      "    pm.test(`*** S U C C E S S *** ${jsonData.message}`, function(){\r",
                      "        // pm.expect(jsonData.message).to.equal(\"Profile successful\");\r",
                      "        pm.expect(jsonData.message).to.be.oneOf(message);\r",
                      "    });\r",
                      "\r",
                      "    pm.test(\"Check the response time\", function(){\r",
                      "    pm.expect(pm.response.responseTime).to.be.below(6000);\r",
                      "    });\r",
                      "\r",
                      "    pm.test(`Check the Status code ${jsonData.status}`, function(){\r",
                      "        pm.expect(pm.response.code).to.be.oneOf(status);\r",
                      "    });\r",
                      "\r",
                      "    pm.test(\"Body matches multiple string\",function(){\r",
                      "    pm.expect(pm.response.text()).to.include(\"id\");\r",
                      "    pm.expect(pm.response.text()).to.include(\"name\");\r",
                      "    pm.expect(pm.response.text()).to.include(\"email\");\r",
                      "});\r",
                      "\r",
                      "}\r",
                      "\r",
                      ""
                    ],
                    "_lastExecutionId": "55d3989d-79a3-476b-87c3-020290feeec2"
                  }
                },
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "5b6727ff-6213-4350-874c-dbaeeb0d0d03",
                    "type": "text/javascript",
                    "exec": [
                      ""
                    ],
                    "_lastExecutionId": "5e07b22a-eb37-441e-b764-c112f7fde3f7"
                  }
                }
              ],
              "protocolProfileBehavior": {
                "disabledSystemHeaders": {}
              }
            },
            {
              "id": "ee9d7916-0288-4df6-a4d2-05ed9c78c4f1",
              "name": "UpdateProfile",
              "request": {
                "url": {
                  "path": [
                    "users",
                    "profile"
                  ],
                  "host": [
                    "{{exp_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "PATCH",
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n    \"name\":\"{{name}}\",\r\n    \"phone\":\"{{random_number}}\",\r\n    \"company\":\"{{$randomCompanyName}}\"\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "auth": {
                  "type": "apikey",
                  "apikey": [
                    {
                      "type": "string",
                      "value": "{{exp_token}}",
                      "key": "value"
                    },
                    {
                      "type": "string",
                      "value": "header",
                      "key": "in"
                    },
                    {
                      "type": "string",
                      "value": "x-auth-token",
                      "key": "key"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "6ab7e932-eb9b-4edc-9edc-b8d42e4162ad",
                    "type": "text/javascript",
                    "exec": [
                      "let jsonData = pm.response.json();\r",
                      "message = [\r",
                      "    \"Access token is not valid or has expired, you will need to login\",\r",
                      "    \"No authentication token specified in x-auth-token header\",\r",
                      "    \"User name must be between 4 and 30 characters\",\r",
                      "    \"Phone number should be between 8 and 20 digits\",\r",
                      "    \"Unauthorized Request\",\r",
                      "    \"Internal Error Server\",\r",
                      "    \"Profile updated successful\",\r",
                      "    \"Not Found\",\r",
                      "    \"Bad Request\"\r",
                      "]\r",
                      "\r",
                      "status = [400,401,404,500,200,201]\r",
                      "// var jsonData1 = pm.response.json();\r",
                      "// pm.environment.set(\"phoneNumber\", jsonData1.data.phone);\r",
                      "\r",
                      "if (jsonData.success === false) {\r",
                      "    pm.test(`**** E R R O R ***** ${jsonData.message}`, function(){\r",
                      "        // pm.expect(jsonData.message).to.eql(\"No authentication token specified in x-auth-token header\");\r",
                      "        pm.expect(jsonData.message).to.be.oneOf(message);\r",
                      "    });\r",
                      "\r",
                      "    pm.test(`Check the multiple error status code ${jsonData.status}`, function(){\r",
                      "        pm.expect(pm.response.code).to.be.oneOf(status);\r",
                      "    });\r",
                      "\r",
                      "\r",
                      "}\r",
                      "else {\r",
                      "    pm.test(`*** S U C C E S S *** ${jsonData.message}`, function(){\r",
                      "        // pm.expect(jsonData.message).to.equal(\"Profile successful\");\r",
                      "        pm.expect(jsonData.message).to.be.oneOf(message);\r",
                      "    });\r",
                      "\r",
                      "    pm.test(\"Check the response time\", function(){\r",
                      "    pm.expect(pm.response.responseTime).to.be.below(6000);\r",
                      "    });\r",
                      "\r",
                      "    pm.test(`Check the Status code ${jsonData.status}`, function(){\r",
                      "        pm.expect(pm.response.code).to.be.oneOf(status);\r",
                      "    });\r",
                      "\r",
                      "    pm.test(\"Body matches multiple string\",function(){\r",
                      "    pm.expect(pm.response.text()).to.include(\"id\");\r",
                      "    pm.expect(pm.response.text()).to.include(\"name\");\r",
                      "    pm.expect(pm.response.text()).to.include(\"email\");\r",
                      "});\r",
                      "\r",
                      "}\r",
                      "\r",
                      ""
                    ],
                    "_lastExecutionId": "bf535ed4-ea27-433b-95ed-0405878d634c"
                  }
                },
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "1dd9ce14-2fea-48d5-b628-446e36acb961",
                    "type": "text/javascript",
                    "exec": [
                      "pm.environment.set(\"random_number\",_.random(1000000000,9999999999));\r",
                      "\r",
                      "\r",
                      ""
                    ],
                    "_lastExecutionId": "81adb337-1695-4fed-b265-391f869dd222"
                  }
                }
              ]
            },
            {
              "id": "03c5b9ed-2c86-4338-932a-d93a799c2d8d",
              "name": "ForgotPassword",
              "request": {
                "url": {
                  "path": [
                    "users",
                    "forgot-password"
                  ],
                  "host": [
                    "{{exp_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n    \"email\":\"{{randomEmail}}\"\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "auth": {
                  "type": "apikey",
                  "apikey": [
                    {
                      "type": "string",
                      "value": "{{exp_token}}",
                      "key": "value"
                    },
                    {
                      "type": "string",
                      "value": "header",
                      "key": "in"
                    },
                    {
                      "type": "string",
                      "value": "x-auth-token",
                      "key": "key"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "72c44319-e1e0-49ac-91f7-f3f0cd439f93",
                    "type": "text/javascript",
                    "exec": [
                      "let jsonData = pm.response.json();\r",
                      "let jsonEmail = JSON.parse(pm.request.body.raw).email;\r",
                      "\r",
                      "message = [\r",
                      "    \"Access token is not valid or has expired, you will need to login\",\r",
                      "    \"No authentication token specified in x-auth-token header\",\r",
                      "    \"Unauthorized Request\",\r",
                      "    \"Internal Error Server\",\r",
                      "    `Password reset link successfully sent to ${pm.environment.get(\"email\")}. Please verify by clicking on the given link`,\r",
                      "    \"Not Found\",\r",
                      "    \"Bad Request\",\r",
                      "    \"A valid email address is required\"\r",
                      "]\r",
                      "\r",
                      "status = [400,401,404,500,200,201]\r",
                      "// var jsonData1 = pm.response.json();\r",
                      "// pm.environment.set(\"phoneNumber\", jsonData1.data.phone);\r",
                      "\r",
                      "if (jsonData.success === false) {\r",
                      "    pm.test(`**** E R R O R ***** ${jsonData.message}`, function(){\r",
                      "        // pm.expect(jsonData.message).to.eql(\"No authentication token specified in x-auth-token header\");\r",
                      "        pm.expect(jsonData.message).to.be.oneOf(message);\r",
                      "    });\r",
                      "\r",
                      "    pm.test(`Check the multiple error status code ${jsonData.status}`, function(){\r",
                      "        pm.expect(pm.response.code).to.be.oneOf(status);\r",
                      "    });\r",
                      "\r",
                      "\r",
                      "}\r",
                      "else {\r",
                      "    pm.test(`*** S U C C E S S *** ${jsonData.message}`, function(){\r",
                      "        // pm.expect(jsonData.message).to.equal(\"Profile successful\");\r",
                      "        pm.expect(jsonData.message).to.be.oneOf(message);\r",
                      "    });\r",
                      "\r",
                      "    pm.test(\"Check the response time\", function(){\r",
                      "    pm.expect(pm.response.responseTime).to.be.below(6000);\r",
                      "    });\r",
                      "\r",
                      "    pm.test(`Check the Status code ${jsonData.status}`, function(){\r",
                      "        pm.expect(pm.response.code).to.be.oneOf(status);\r",
                      "    });\r",
                      "\r",
                      "    pm.test(\"Body matches multiple string\",function(){\r",
                      "    pm.expect(pm.response.text()).to.include(\"message\");\r",
                      "});\r",
                      "\r",
                      "}\r",
                      "\r",
                      ""
                    ],
                    "_lastExecutionId": "a3803636-b917-4048-8873-b62ae1f022d6"
                  }
                },
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "6236deb0-9668-46d8-bb96-97cc86eeb0fa",
                    "type": "text/javascript",
                    "exec": [
                      ""
                    ],
                    "_lastExecutionId": "148f797c-8661-4a45-97c4-527fe81fce77"
                  }
                }
              ]
            },
            {
              "id": "eea8198b-64d4-43e4-b554-aefaae2516cd",
              "name": "GetEmailMessage",
              "request": {
                "url": {
                  "protocol": "https",
                  "path": [
                    "gmail",
                    "v1",
                    "users",
                    "{{user_email_id}}",
                    "messages",
                    ""
                  ],
                  "host": [
                    "gmail",
                    "googleapis",
                    "com"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET",
                "auth": {
                  "type": "oauth2",
                  "oauth2": [
                    {
                      "type": "boolean",
                      "value": false,
                      "key": "useBrowser"
                    },
                    {
                      "type": "string",
                      "value": "{{Scope}}",
                      "key": "scope"
                    },
                    {
                      "type": "string",
                      "value": "{{Client_Secret}}",
                      "key": "clientSecret"
                    },
                    {
                      "type": "string",
                      "value": "{{Client_ID}}",
                      "key": "clientId"
                    },
                    {
                      "type": "string",
                      "value": "{{Access_Token_URL}}",
                      "key": "accessTokenUrl"
                    },
                    {
                      "type": "string",
                      "value": "{{Auth_URL}}",
                      "key": "authUrl"
                    },
                    {
                      "type": "string",
                      "value": "{{Callback_URL}}",
                      "key": "redirect_uri"
                    },
                    {
                      "type": "string",
                      "value": "authorization_code",
                      "key": "grant_type"
                    },
                    {
                      "type": "string",
                      "value": "email_token",
                      "key": "tokenName"
                    },
                    {
                      "type": "string",
                      "value": "header",
                      "key": "addTokenTo"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "705020a4-73b3-44df-86ff-a5984e094d10",
                    "type": "text/javascript",
                    "exec": [
                      "var jsonData = pm.response.json();\r",
                      "pm.environment.set(\"messageId\", jsonData.messages[0].id);\r",
                      "\r",
                      ""
                    ],
                    "_lastExecutionId": "eeef6f2d-f5fd-4a00-be9c-25555c6fa5bc"
                  }
                },
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "cdf7837a-853f-442c-8e05-996129213a95",
                    "type": "text/javascript",
                    "exec": [
                      "var newRefreshToken = pm.environment.get(\"access_token\");\r",
                      "\r",
                      "pm.environment.set(\"refresh_token\", newRefreshToken);"
                    ],
                    "_lastExecutionId": "94790536-1730-42ee-886b-f2872e8a5fee"
                  }
                }
              ]
            },
            {
              "id": "f053ddc8-a8a6-4796-a23f-c89737b34582",
              "name": "GetMessageByID",
              "request": {
                "url": {
                  "protocol": "https",
                  "path": [
                    "gmail",
                    "v1",
                    "users",
                    "{{user_email_id}}",
                    "messages",
                    "{{messageId}}"
                  ],
                  "host": [
                    "gmail",
                    "googleapis",
                    "com"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "multipart/mixed"
                  }
                ],
                "method": "GET",
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "{{access_token}}",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "d94857cd-ae23-40c6-ae38-5f7aaca3e833",
                    "type": "text/javascript",
                    "exec": [
                      "\r",
                      "const response = pm.response.json();\r",
                      "\r",
                      "pm.environment.set(\"message_Body\", response.payload.body.data);\r",
                      "\r",
                      "var atob = require('atob');\r",
                      "\r",
                      "\r",
                      "var base64Data = pm.environment.get(\"message_Body\");\r",
                      "var decodedData = atob(base64Data);\r",
                      "postman.setEnvironmentVariable(\"rest_password\",decodedData);\r",
                      "var tokenRegex = /Reset password link: (https:\\/\\/practice\\.expandtesting\\.com\\/notes\\/app\\/reset-password\\/([\\w\\d]+))[^ ]+/;\r",
                      "var tokenMatch = decodedData.match(tokenRegex);\r",
                      "if (tokenMatch && tokenMatch[2]) {\r",
                      "    var resetPasswordToken = tokenMatch[2];\r",
                      "    \r",
                      "    // Set the reset password link as a Postman environment variable for later use\r",
                      "    pm.environment.set(\"resetPasswordToken\", resetPasswordToken);\r",
                      "    \r",
                      "    // Log the reset password link\r",
                      "    console.log(\"Reset Password Token: \" + resetPasswordToken);\r",
                      "} else {\r",
                      "    console.log(\"Reset password token not found in the response.\");\r",
                      "}\r",
                      "console.log(decodedData);\r",
                      "\r",
                      "\r",
                      "\r",
                      "\r",
                      "\r",
                      "\r",
                      "\r",
                      "\r",
                      "\r",
                      "\r",
                      "\r",
                      ""
                    ],
                    "_lastExecutionId": "4816be40-7f3a-489e-b23c-14c698a58ddc"
                  }
                },
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "8349aa22-c992-434e-9e35-e5fc8ef4a245",
                    "type": "text/javascript",
                    "exec": [
                      ""
                    ],
                    "_lastExecutionId": "e5ddbcb0-9830-4e57-9232-851987938e7d"
                  }
                }
              ]
            },
            {
              "id": "8d884a10-0abd-48de-9b8a-47bfc7ff13cd",
              "name": "verify-reset-password-token",
              "request": {
                "url": {
                  "path": [
                    "users",
                    "verify-reset-password-token"
                  ],
                  "host": [
                    "{{exp_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "accept",
                    "value": "application/json"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/x-www-form-urlencoded"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "urlencoded",
                  "urlencoded": [
                    {
                      "key": "token",
                      "value": "{{resetPasswordToken}}"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "799e647c-efdd-4528-bf8c-ec8d1e1a4b55",
                    "type": "text/javascript",
                    "exec": [
                      "let jsonData = pm.response.json();\r",
                      "\r",
                      "message = [\r",
                      "    \"The provided password reset token is valid\",\r",
                      "    \"Bad Request\",\r",
                      "    \"Internal Error Server\",\r",
                      "    \"The provided password reset token is invalid or has expired\"\r",
                      "]\r",
                      "\r",
                      "status = [200,400,401,500]\r",
                      "\r",
                      "if (jsonData.success === false) {\r",
                      "    pm.test(`**** E R R O R ***** ${jsonData.message}`, function(){\r",
                      "        // pm.expect(jsonData.message).to.eql(\"No authentication token specified in x-auth-token header\");\r",
                      "        pm.expect(jsonData.message).to.be.oneOf(message);\r",
                      "    });\r",
                      "\r",
                      "    pm.test(`Check the multiple error status code ${jsonData.status}`, function(){\r",
                      "        pm.expect(pm.response.code).to.be.oneOf(status);\r",
                      "    });\r",
                      "\r",
                      "\r",
                      "}\r",
                      "else {\r",
                      "    pm.test(`*** S U C C E S S *** ${jsonData.message}`, function(){\r",
                      "        // pm.expect(jsonData.message).to.equal(\"Profile successful\");\r",
                      "        pm.expect(jsonData.message).to.be.oneOf(message);\r",
                      "    });\r",
                      "\r",
                      "    pm.test(\"Check the response time\", function(){\r",
                      "    pm.expect(pm.response.responseTime).to.be.below(6000);\r",
                      "    });\r",
                      "\r",
                      "    pm.test(`Check the Status code ${jsonData.status}`, function(){\r",
                      "        pm.expect(pm.response.code).to.be.oneOf(status);\r",
                      "    });\r",
                      "\r",
                      "    pm.test(\"Body matches multiple string\",function(){\r",
                      "    pm.expect(pm.response.text()).to.include(\"message\");\r",
                      "});\r",
                      "\r",
                      "}\r",
                      "\r",
                      ""
                    ],
                    "_lastExecutionId": "c1d6d515-485d-45cb-ab2b-15662e3830f7"
                  }
                },
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "46fb041c-0790-4ccb-a117-d6dcbb44aa15",
                    "type": "text/javascript",
                    "exec": [
                      ""
                    ],
                    "_lastExecutionId": "48a955fd-f392-4b00-9034-2a273d9fea6d"
                  }
                }
              ]
            },
            {
              "id": "740f7a4b-9db6-4b38-a333-0ad712a2b2a2",
              "name": "reset-password",
              "request": {
                "url": {
                  "protocol": "https",
                  "path": [
                    "notes",
                    "api",
                    "users",
                    "reset-password"
                  ],
                  "host": [
                    "practice",
                    "expandtesting",
                    "com"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "accept",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n    \"token\":\"{{resetPasswordToken}}\",\r\n    \"newPassword\":\"{{$randomPassword}}\"\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "7cdc8324-5612-42e4-8f85-49037412238b",
                    "type": "text/javascript",
                    "exec": [
                      "let jsonData = pm.response.json();\r",
                      "\r",
                      "let newPassword = JSON.parse(pm.request.body.raw).newPassword;\r",
                      "pm.environment.set('password', newPassword);\r",
                      "\r",
                      "\r",
                      "message = [\r",
                      "    \"The password has been successfully reset\",\r",
                      "    \"Token must be between 64 characters\",\r",
                      "    \"Bad Request\",\r",
                      "    \"The password was successfully updated\",\r",
                      "    \"Internal Error Server\",\r",
                      "    \"New password must be between 6 and 30 characters\",\r",
                      "    \"The password reset token is invalid or has expired\"\r",
                      "]\r",
                      "\r",
                      "status = [200,400,401,500]\r",
                      "\r",
                      "if (jsonData.success === false) {\r",
                      "    pm.test(`**** E R R O R ***** ${jsonData.message}`, function(){\r",
                      "        // pm.expect(jsonData.message).to.eql(\"No authentication token specified in x-auth-token header\");\r",
                      "        pm.expect(jsonData.message).to.be.oneOf(message);\r",
                      "    });\r",
                      "\r",
                      "    pm.test(`Check the multiple error status code ${jsonData.status}`, function(){\r",
                      "        pm.expect(pm.response.code).to.be.oneOf(status);\r",
                      "    });\r",
                      "\r",
                      "\r",
                      "}\r",
                      "else {\r",
                      "    pm.test(`*** S U C C E S S *** ${jsonData.message}`, function(){\r",
                      "        // pm.expect(jsonData.message).to.equal(\"Profile successful\");\r",
                      "        pm.expect(jsonData.message).to.be.oneOf(message);\r",
                      "    });\r",
                      "\r",
                      "    pm.test(\"Check the response time\", function(){\r",
                      "    pm.expect(pm.response.responseTime).to.be.below(6000);\r",
                      "    });\r",
                      "\r",
                      "    pm.test(`Check the Status code ${jsonData.status}`, function(){\r",
                      "        pm.expect(pm.response.code).to.be.oneOf(status);\r",
                      "    });\r",
                      "\r",
                      "    pm.test(\"Body matches multiple string\",function(){\r",
                      "    pm.expect(pm.response.text()).to.include(\"message\");\r",
                      "});\r",
                      "\r",
                      "}\r",
                      "\r",
                      "\r",
                      ""
                    ],
                    "_lastExecutionId": "5d234639-2098-4725-8401-094ce8fa851b"
                  }
                },
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "1268a1ec-48a3-4dfd-8fc8-3c14d0fa7f28",
                    "type": "text/javascript",
                    "exec": [
                      ""
                    ],
                    "_lastExecutionId": "3e5db1d1-0c8c-4a29-8797-f14a01a4bedc"
                  }
                }
              ]
            },
            {
              "id": "93821c3b-e028-4eda-a749-05d87d7e6a94",
              "name": "change-password",
              "request": {
                "url": {
                  "path": [
                    "users",
                    "change-password"
                  ],
                  "host": [
                    "{{exp_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "accept",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n    \"currentPassword\":\"{{password}}\",\r\n    \"newPassword\":\"{{$randomPassword}}\"\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "auth": {
                  "type": "apikey",
                  "apikey": [
                    {
                      "type": "string",
                      "value": "{{exp_token}}",
                      "key": "value"
                    },
                    {
                      "type": "string",
                      "value": "x-auth-token",
                      "key": "key"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "3eca22f1-7d4a-4832-8b68-54badb876aa6",
                    "type": "text/javascript",
                    "exec": [
                      "pm.environment.get(\"password\");\r",
                      "\r",
                      "let newPassword = JSON.parse(pm.request.body.raw).newPassword;\r",
                      "pm.environment.set('password', newPassword);\r",
                      "\r",
                      "let jsonData = pm.response.json();\r",
                      "message = [\r",
                      "    \"The password has been successfully reset\",\r",
                      "    \"Token must be between 64 characters\",\r",
                      "    \"Bad Request\",\r",
                      "    \"The password was successfully updated\",\r",
                      "    \"Internal Error Server\",\r",
                      "    \"New password must be between 6 and 30 characters\",\r",
                      "    \"The password reset token is invalid or has expired\"\r",
                      "]\r",
                      "\r",
                      "status = [200,400,401,500]\r",
                      "\r",
                      "if (jsonData.success === false) {\r",
                      "    pm.test(`**** E R R O R ***** ${jsonData.message}`, function(){\r",
                      "        // pm.expect(jsonData.message).to.eql(\"No authentication token specified in x-auth-token header\");\r",
                      "        pm.expect(jsonData.message).to.be.oneOf(message);\r",
                      "    });\r",
                      "\r",
                      "    pm.test(`Check the multiple error status code ${jsonData.status}`, function(){\r",
                      "        pm.expect(pm.response.code).to.be.oneOf(status);\r",
                      "    });\r",
                      "\r",
                      "\r",
                      "}\r",
                      "else {\r",
                      "    pm.test(`*** S U C C E S S *** ${jsonData.message}`, function(){\r",
                      "        // pm.expect(jsonData.message).to.equal(\"Profile successful\");\r",
                      "        pm.expect(jsonData.message).to.be.oneOf(message);\r",
                      "    });\r",
                      "\r",
                      "    pm.test(\"Check the response time\", function(){\r",
                      "    pm.expect(pm.response.responseTime).to.be.below(6000);\r",
                      "    });\r",
                      "\r",
                      "    pm.test(`Check the Status code ${jsonData.status}`, function(){\r",
                      "        pm.expect(pm.response.code).to.be.oneOf(status);\r",
                      "    });\r",
                      "\r",
                      "    pm.test(\"Body matches multiple string\",function(){\r",
                      "    pm.expect(pm.response.text()).to.include(\"message\");\r",
                      "});\r",
                      "\r",
                      "}\r",
                      ""
                    ],
                    "_lastExecutionId": "64be3638-86ca-4200-b966-7a137b03eb2e"
                  }
                },
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "aa473681-09fc-4673-a2fe-7012cf4e42e9",
                    "type": "text/javascript",
                    "exec": [
                      "console.log(pm.environment.get(\"password\"));\r",
                      "\r",
                      "\r",
                      "\r",
                      ""
                    ],
                    "_lastExecutionId": "fb6fc291-ccb6-46ad-9bb8-0e4bf2cf736d"
                  }
                }
              ]
            },
            {
              "id": "f4c8e78d-5700-43a2-8e20-cb1a0de26ce9",
              "name": "UserLogout",
              "request": {
                "url": {
                  "path": [
                    "users",
                    "logout"
                  ],
                  "host": [
                    "{{exp_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "accept",
                    "value": "application/json"
                  }
                ],
                "method": "DELETE",
                "auth": {
                  "type": "apikey",
                  "apikey": [
                    {
                      "type": "string",
                      "value": "{{exp_token}}",
                      "key": "value"
                    },
                    {
                      "type": "string",
                      "value": "x-auth-token",
                      "key": "key"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "43a38bb6-0063-463b-9a7b-ea0674d209fe",
                    "type": "text/javascript",
                    "exec": [
                      "let jsonData = pm.response.json();\r",
                      "message = [\r",
                      "    \"User has been successfully logged out\",\r",
                      "    \"Token must be between 64 characters\",\r",
                      "    \"Bad Request\",\r",
                      "    \"Access token is not valid or has expired, you will need to login\",\r",
                      "    \"No authentication token specified in x-auth-token header\",\r",
                      "    \"Internal Error Server\",\r",
                      "    \"Successful Request\",\r",
                      "    \"Unauthorized Request\"\r",
                      "]\r",
                      "\r",
                      "status = [200,400,401,500]\r",
                      "\r",
                      "if (jsonData.success === false) {\r",
                      "    pm.test(`**** E R R O R ***** ${jsonData.message}`, function(){\r",
                      "        // pm.expect(jsonData.message).to.eql(\"No authentication token specified in x-auth-token header\");\r",
                      "        pm.expect(jsonData.message).to.be.oneOf(message);\r",
                      "    });\r",
                      "\r",
                      "    pm.test(`Check the multiple error status code ${jsonData.status}`, function(){\r",
                      "        pm.expect(pm.response.code).to.be.oneOf(status);\r",
                      "    });\r",
                      "\r",
                      "\r",
                      "}\r",
                      "else {\r",
                      "    pm.test(`*** S U C C E S S *** ${jsonData.message}`, function(){\r",
                      "        // pm.expect(jsonData.message).to.equal(\"Profile successful\");\r",
                      "        pm.expect(jsonData.message).to.be.oneOf(message);\r",
                      "    });\r",
                      "\r",
                      "    pm.test(\"Check the response time\", function(){\r",
                      "    pm.expect(pm.response.responseTime).to.be.below(6000);\r",
                      "    });\r",
                      "\r",
                      "    pm.test(`Check the Status code ${jsonData.status}`, function(){\r",
                      "        pm.expect(pm.response.code).to.be.oneOf(status);\r",
                      "    });\r",
                      "\r",
                      "    pm.test(\"Body matches multiple string\",function(){\r",
                      "    pm.expect(pm.response.text()).to.include(\"message\");\r",
                      "});\r",
                      "\r",
                      "}\r",
                      "\r",
                      "postman.setNextRequest(null);"
                    ],
                    "_lastExecutionId": "c7d982d4-a8dc-460f-a106-6e0c01643e82"
                  }
                },
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "e8ae662d-a080-4bf5-a817-754113435b5e",
                    "type": "text/javascript",
                    "exec": [
                      ""
                    ],
                    "_lastExecutionId": "0b0d404e-4117-40fc-9982-a95619506052"
                  }
                }
              ]
            }
          ],
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "3380df96-f386-44be-9dc8-eb145a929d13",
                "type": "text/javascript",
                "exec": [
                  ""
                ],
                "_lastExecutionId": "c2613397-fddf-4d46-99b6-9ffc9166e0a8"
              }
            },
            {
              "listen": "test",
              "script": {
                "id": "18c4e0bb-9477-4e5f-b627-d550e666c7d3",
                "type": "text/javascript",
                "exec": [
                  ""
                ],
                "_lastExecutionId": "78225eb1-cbe5-408b-978b-a1bf2d2b693c"
              }
            }
          ],
          "variable": [
            {
              "type": "string",
              "value": "https://practice.expandtesting.com/notes/api",
              "key": "exp_url"
            }
          ],
          "info": {
            "_postman_id": "723ea9c3-0635-4605-b90c-d6d9e9835d8c",
            "name": "expandtesting",
            "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
          }
        },
        "cursor": {
          "ref": "f70c212e-54ae-4c80-84bf-295f5d6f7f9a",
          "length": 12,
          "cycles": 1,
          "position": 1,
          "iteration": 0,
          "httpRequestId": "862306ad-af84-4909-a2fc-5aa4c4d48310",
          "scriptId": "4f0c3c3d-4171-4bea-b8a8-3fd567809f0d",
          "execution": "2fbfcb58-035a-4d0d-afa2-7fc9d5239e13"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 3,
          "test": "response property matching an environment variable",
          "message": "expected undefined to deeply equal ''",
          "stack": "AssertionError: expected undefined to deeply equal ''\n   at Object.eval sandbox-script.js:4:2)",
          "checksum": "14eb7e5e407fe7fbe164eeaaba7f09bd",
          "id": "15ff54c8-38b2-4cdb-bd1c-e5b4e79f0597",
          "timestamp": 1698733438933,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 4,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 2,
              "native": false
            }
          ]
        },
        "at": "assertion:3 in test-script",
        "source": {
          "id": "d3b70abb-4c44-4d96-b946-e8ef2e19907f",
          "name": "RegisterUser",
          "request": {
            "url": {
              "path": [
                "users",
                "register"
              ],
              "host": [
                "{{exp_url}}"
              ],
              "query": [],
              "variable": []
            },
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\r\n    \"name\":\"{{$randomFullName}}\",\r\n    \"email\":\"{{randomEmail}}\",\r\n    \"password\":\"{{$randomPassword}}\"\r\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "4f0c3c3d-4171-4bea-b8a8-3fd567809f0d",
                "type": "text/javascript",
                "exec": [
                  "var jsonData = pm.response.json();\r",
                  "\r",
                  "pm.test(\"Check the success msg is true in body?\", function(){\r",
                  "    pm.expect(jsonData.success).to.eql(true);\r",
                  "});\r",
                  "\r",
                  "pm.test(\"Check the body message\", function(){\r",
                  "    pm.expect(jsonData.message).to.eql(\"User account created successfully\");\r",
                  "});\r",
                  "\r",
                  "pm.test(\"Verify the values are not null\", function(){\r",
                  "    pm.expect(jsonData.data.id, \"Id is not null\").to.not.be.null;\r",
                  "    pm.expect(jsonData.data.name, \"name is not null\").to.not.be.null;\r",
                  "    pm.expect(jsonData.data.email, \"email is not null\").to.not.be.null;\r",
                  "});\r",
                  "\r",
                  "pm.test(\"response property matching an environment variable\", function(){\r",
                  "    pm.expect(jsonData.name).to.eql(pm.environment.get(\"name\"));\r",
                  "});\r",
                  "\r",
                  "pm.test(\"Check the response time\", function(){\r",
                  "    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
                  "});\r",
                  "\r",
                  "pm.environment.set(\"id\", jsonData.data.id);\r",
                  "pm.environment.set(\"name\", jsonData.data.name);\r",
                  "\r",
                  "let password = JSON.parse(pm.request.body.raw).password;\r",
                  "pm.environment.set('password', password);\r",
                  "\r",
                  "message = [\r",
                  "    \"Access token is not valid or has expired, you will need to login\",\r",
                  "    \"No authentication token specified in x-auth-token header\",\r",
                  "    \"User name must be between 4 and 30 characters\",\r",
                  "    \"Phone number should be between 8 and 20 digits\",\r",
                  "    \"Unauthorized Request\",\r",
                  "    \"Internal Error Server\",\r",
                  "    \"Profile updated successful\",\r",
                  "    \"User account created successfully\",\r",
                  "    \"Not Found\",\r",
                  "    \"Bad Request\",\r",
                  "    \"An account already exists with the same email address\"\r",
                  "];\r",
                  "\r",
                  "status = [400,401,404,409,500,200,201];\r",
                  "\r",
                  "if (jsonData.success === false) {\r",
                  "    pm.test(`**** E R R O R ***** ${jsonData.message}`, function(){\r",
                  "        pm.expect(jsonData.message).to.be.oneOf(message);\r",
                  "    });\r",
                  "\r",
                  "    pm.test(`Check the multiple error status code ${jsonData.status}`, function(){\r",
                  "        pm.expect(pm.response.code).to.be.oneOf(status);\r",
                  "    });\r",
                  "}\r",
                  "else {\r",
                  "    pm.test(`*** S U C C E S S *** ${jsonData.message}`, function(){\r",
                  "        pm.expect(jsonData.message).to.be.oneOf(message);\r",
                  "    });\r",
                  "\r",
                  "    pm.test(`Check the Status code ${jsonData.status}`, function(){\r",
                  "        pm.expect(pm.response.code).to.be.oneOf(status);\r",
                  "    });\r",
                  "}"
                ],
                "_lastExecutionId": "2fbfcb58-035a-4d0d-afa2-7fc9d5239e13"
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "id": "3483ef69-d6b6-4835-8746-973a3f7a159e",
                "type": "text/javascript",
                "exec": [
                  "\r",
                  "// // Define the incrementEmail function\r",
                  "// function incrementEmail(email) {\r",
                  "//     const match = email.match(/\\+a(\\d+)/);\r",
                  "\r",
                  "//     if (match) {\r",
                  "//         const currentNumber = parseInt(match[1]);\r",
                  "//         const nextNumber = currentNumber + 1;\r",
                  "//         const incrementedEmail = email.replace(/\\+a\\d+/, `+a${nextNumber}`);\r",
                  "//         return incrementedEmail;\r",
                  "//     }\r",
                  "\r",
                  "//     return email;\r",
                  "// }\r",
                  "\r",
                  "\r",
                  "// const originalEmail = pm.environment.get(\"email\");\r",
                  "\r",
                  "\r",
                  "// if (originalEmail) {\r",
                  "//     // Use the incrementEmail function to get the incremented email\r",
                  "//     const incrementedEmail = incrementEmail(originalEmail);\r",
                  "\r",
                  "//     // Set the incremented email back to the environment\r",
                  "//     pm.environment.set(\"email\", incrementedEmail);\r",
                  "\r",
                  "//     console.log(\"OriginalEmail:\", originalEmail);\r",
                  "//     console.log(\"IncrementedEmail:\", incrementedEmail);\r",
                  "// } else {\r",
                  "//     console.error(\"Email environment variable not found.\");\r",
                  "// }\r",
                  "\r",
                  "// console.log(pm.environment.get(\"email\"));\r",
                  "\r",
                  "\r",
                  "// -------------------------------------------------------------------\r",
                  "// Define the base part of the email address\r",
                  "const baseEmail = pm.environment.get(\"baseEmail\");\r",
                  "\r",
                  "// Generate a random number between min and max (inclusive)\r",
                  "function getRandomNumber(min, max) {\r",
                  "    return Math.floor(Math.random() * (max - min + 1)) + min;\r",
                  "}\r",
                  "\r",
                  "// Generate a random sequence like +a151, +a152, +a153, and so on\r",
                  "const randomSequence = `+a${getRandomNumber(1, 999)}`;\r",
                  "\r",
                  "// Combine the base and random sequence to create the random email address\r",
                  "const randomEmail = `${baseEmail}${randomSequence}@gmail.com`;\r",
                  "\r",
                  "// Set the random email address as an environment variable for your request\r",
                  "pm.environment.set('randomEmail', randomEmail);\r",
                  "\r",
                  "\r",
                  ""
                ],
                "_lastExecutionId": "f0df73d6-9875-49de-aaed-2ffb46745ff0"
              }
            }
          ]
        },
        "parent": {
          "_": {
            "postman_id": "723ea9c3-0635-4605-b90c-d6d9e9835d8c",
            "exporter_id": "13852941",
            "collection_link": "https://galactic-astronaut-894425.postman.co/workspace/b6dafb4f-3507-4e58-a32d-dd31bf6ab148/collection/13852941-723ea9c3-0635-4605-b90c-d6d9e9835d8c?action=share&source=collection_link&creator=13852941"
          },
          "item": [
            {
              "id": "90407c19-d06c-4337-abb9-4dfc2fa17fc8",
              "name": "health_check",
              "request": {
                "url": {
                  "path": [
                    "health-check"
                  ],
                  "host": [
                    "{{exp_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "b075fb8f-9483-4909-a4a4-cf6344c6642b",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Check the Status code 200\", function(){\r",
                      "    pm.response.to.have.status(200);\r",
                      "});\r",
                      "\r",
                      "var jsonData = pm.response.json();\r",
                      "\r",
                      "pm.test(\"Check the success code in body\", function(){\r",
                      "    pm.expect(jsonData.success).to.eql(true);\r",
                      "});\r",
                      "\r",
                      "pm.test(\"Check the Status code in body\", function(){\r",
                      "    pm.expect(jsonData.status).to.eql(200);\r",
                      "});\r",
                      "\r",
                      "pm.test(\"Check the message in body\", function(){\r",
                      "    pm.expect(jsonData.message).to.eql(\"Notes API is Running\");\r",
                      "});\r",
                      "\r",
                      "\r",
                      ""
                    ],
                    "_lastExecutionId": "dcf22f24-f95a-4d61-981a-68f2474c0b1d"
                  }
                },
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "15079d7d-2fc3-468b-b923-1fd697b2156e",
                    "type": "text/javascript",
                    "exec": [
                      ""
                    ],
                    "_lastExecutionId": "a57965c9-dfeb-425b-a87b-14b41a981af7"
                  }
                }
              ]
            },
            {
              "id": "d3b70abb-4c44-4d96-b946-e8ef2e19907f",
              "name": "RegisterUser",
              "request": {
                "url": {
                  "path": [
                    "users",
                    "register"
                  ],
                  "host": [
                    "{{exp_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n    \"name\":\"{{$randomFullName}}\",\r\n    \"email\":\"{{randomEmail}}\",\r\n    \"password\":\"{{$randomPassword}}\"\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "4f0c3c3d-4171-4bea-b8a8-3fd567809f0d",
                    "type": "text/javascript",
                    "exec": [
                      "var jsonData = pm.response.json();\r",
                      "\r",
                      "pm.test(\"Check the success msg is true in body?\", function(){\r",
                      "    pm.expect(jsonData.success).to.eql(true);\r",
                      "});\r",
                      "\r",
                      "pm.test(\"Check the body message\", function(){\r",
                      "    pm.expect(jsonData.message).to.eql(\"User account created successfully\");\r",
                      "});\r",
                      "\r",
                      "pm.test(\"Verify the values are not null\", function(){\r",
                      "    pm.expect(jsonData.data.id, \"Id is not null\").to.not.be.null;\r",
                      "    pm.expect(jsonData.data.name, \"name is not null\").to.not.be.null;\r",
                      "    pm.expect(jsonData.data.email, \"email is not null\").to.not.be.null;\r",
                      "});\r",
                      "\r",
                      "pm.test(\"response property matching an environment variable\", function(){\r",
                      "    pm.expect(jsonData.name).to.eql(pm.environment.get(\"name\"));\r",
                      "});\r",
                      "\r",
                      "pm.test(\"Check the response time\", function(){\r",
                      "    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
                      "});\r",
                      "\r",
                      "pm.environment.set(\"id\", jsonData.data.id);\r",
                      "pm.environment.set(\"name\", jsonData.data.name);\r",
                      "\r",
                      "let password = JSON.parse(pm.request.body.raw).password;\r",
                      "pm.environment.set('password', password);\r",
                      "\r",
                      "message = [\r",
                      "    \"Access token is not valid or has expired, you will need to login\",\r",
                      "    \"No authentication token specified in x-auth-token header\",\r",
                      "    \"User name must be between 4 and 30 characters\",\r",
                      "    \"Phone number should be between 8 and 20 digits\",\r",
                      "    \"Unauthorized Request\",\r",
                      "    \"Internal Error Server\",\r",
                      "    \"Profile updated successful\",\r",
                      "    \"User account created successfully\",\r",
                      "    \"Not Found\",\r",
                      "    \"Bad Request\",\r",
                      "    \"An account already exists with the same email address\"\r",
                      "];\r",
                      "\r",
                      "status = [400,401,404,409,500,200,201];\r",
                      "\r",
                      "if (jsonData.success === false) {\r",
                      "    pm.test(`**** E R R O R ***** ${jsonData.message}`, function(){\r",
                      "        pm.expect(jsonData.message).to.be.oneOf(message);\r",
                      "    });\r",
                      "\r",
                      "    pm.test(`Check the multiple error status code ${jsonData.status}`, function(){\r",
                      "        pm.expect(pm.response.code).to.be.oneOf(status);\r",
                      "    });\r",
                      "}\r",
                      "else {\r",
                      "    pm.test(`*** S U C C E S S *** ${jsonData.message}`, function(){\r",
                      "        pm.expect(jsonData.message).to.be.oneOf(message);\r",
                      "    });\r",
                      "\r",
                      "    pm.test(`Check the Status code ${jsonData.status}`, function(){\r",
                      "        pm.expect(pm.response.code).to.be.oneOf(status);\r",
                      "    });\r",
                      "}"
                    ],
                    "_lastExecutionId": "2fbfcb58-035a-4d0d-afa2-7fc9d5239e13"
                  }
                },
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "3483ef69-d6b6-4835-8746-973a3f7a159e",
                    "type": "text/javascript",
                    "exec": [
                      "\r",
                      "// // Define the incrementEmail function\r",
                      "// function incrementEmail(email) {\r",
                      "//     const match = email.match(/\\+a(\\d+)/);\r",
                      "\r",
                      "//     if (match) {\r",
                      "//         const currentNumber = parseInt(match[1]);\r",
                      "//         const nextNumber = currentNumber + 1;\r",
                      "//         const incrementedEmail = email.replace(/\\+a\\d+/, `+a${nextNumber}`);\r",
                      "//         return incrementedEmail;\r",
                      "//     }\r",
                      "\r",
                      "//     return email;\r",
                      "// }\r",
                      "\r",
                      "\r",
                      "// const originalEmail = pm.environment.get(\"email\");\r",
                      "\r",
                      "\r",
                      "// if (originalEmail) {\r",
                      "//     // Use the incrementEmail function to get the incremented email\r",
                      "//     const incrementedEmail = incrementEmail(originalEmail);\r",
                      "\r",
                      "//     // Set the incremented email back to the environment\r",
                      "//     pm.environment.set(\"email\", incrementedEmail);\r",
                      "\r",
                      "//     console.log(\"OriginalEmail:\", originalEmail);\r",
                      "//     console.log(\"IncrementedEmail:\", incrementedEmail);\r",
                      "// } else {\r",
                      "//     console.error(\"Email environment variable not found.\");\r",
                      "// }\r",
                      "\r",
                      "// console.log(pm.environment.get(\"email\"));\r",
                      "\r",
                      "\r",
                      "// -------------------------------------------------------------------\r",
                      "// Define the base part of the email address\r",
                      "const baseEmail = pm.environment.get(\"baseEmail\");\r",
                      "\r",
                      "// Generate a random number between min and max (inclusive)\r",
                      "function getRandomNumber(min, max) {\r",
                      "    return Math.floor(Math.random() * (max - min + 1)) + min;\r",
                      "}\r",
                      "\r",
                      "// Generate a random sequence like +a151, +a152, +a153, and so on\r",
                      "const randomSequence = `+a${getRandomNumber(1, 999)}`;\r",
                      "\r",
                      "// Combine the base and random sequence to create the random email address\r",
                      "const randomEmail = `${baseEmail}${randomSequence}@gmail.com`;\r",
                      "\r",
                      "// Set the random email address as an environment variable for your request\r",
                      "pm.environment.set('randomEmail', randomEmail);\r",
                      "\r",
                      "\r",
                      ""
                    ],
                    "_lastExecutionId": "f0df73d6-9875-49de-aaed-2ffb46745ff0"
                  }
                }
              ]
            },
            {
              "id": "1da8b1e7-3198-4c60-9c34-4a1e8b7e8b15",
              "name": "UserLogin",
              "request": {
                "url": {
                  "path": [
                    "users",
                    "login"
                  ],
                  "host": [
                    "{{exp_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n    \"email\":\"{{randomEmail}}\",\r\n    \"password\":\"{{password}}\"\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "cc8daf67-c0f2-4843-9223-e47d8fe754ec",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Check the status code is 200\", function(){\r",
                      "    pm.response.to.have.status(200);\r",
                      "});\r",
                      "\r",
                      "var jsonData = pm.response.json();\r",
                      "\r",
                      "pm.test(\"Check the success message\", function(){\r",
                      "    pm.expect(jsonData.success).to.eql(true);\r",
                      "});\r",
                      "\r",
                      "pm.test(\"Check the body message\", function(){\r",
                      "    pm.expect(jsonData.message).to.eql(\"Login successful\");\r",
                      "});\r",
                      "\r",
                      "pm.environment.set(\"exp_token\", jsonData.data.token);\r",
                      "\r",
                      "pm.test(\"Verify the values are not null\", function(){\r",
                      "    pm.expect(jsonData.data.id, \"Id is not a null\").to.not.be.null;\r",
                      "    pm.expect(jsonData.data.name, \"name is not a null\").to.not.be.null;\r",
                      "    pm.expect(jsonData.data.email, \"email is not a null\").to.not.be.null;\r",
                      "    pm.expect(jsonData.data.token, \"token is not a null\").to.not.be.null;\r",
                      "});\r",
                      "\r",
                      "pm.test(\"Check the response time\", function(){\r",
                      "    pm.expect(pm.response.responseTime).to.below(2000);\r",
                      "});\r",
                      "\r",
                      ""
                    ],
                    "_lastExecutionId": "4a906166-3676-408b-bc6f-6c09add962a5"
                  }
                },
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "98d0941e-d03e-4ab7-a7b0-84826ad7708a",
                    "type": "text/javascript",
                    "exec": [
                      ""
                    ],
                    "_lastExecutionId": "2f4a3493-6a43-4652-8c74-458390f9ecf9"
                  }
                }
              ]
            },
            {
              "id": "3f4af57c-fb9c-4a3c-8c2b-0f9b603b0679",
              "name": "GetProfile",
              "request": {
                "url": {
                  "path": [
                    "users",
                    "profile"
                  ],
                  "host": [
                    "{{exp_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET",
                "auth": {
                  "type": "apikey",
                  "apikey": [
                    {
                      "type": "string",
                      "value": "{{exp_token}}",
                      "key": "value"
                    },
                    {
                      "type": "string",
                      "value": "header",
                      "key": "in"
                    },
                    {
                      "type": "string",
                      "value": "x-auth-token",
                      "key": "key"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "56a6399c-71a1-414d-b876-9262a848415f",
                    "type": "text/javascript",
                    "exec": [
                      "\r",
                      "let jsonData = pm.response.json();\r",
                      "message = [\r",
                      "    \"Access token is not valid or has expired, you will need to login\",\r",
                      "    \"No authentication token specified in x-auth-token header\",\r",
                      "    \"Bad Request\",\r",
                      "    \"Unauthorized Request\",\r",
                      "    \"Internal Error Server\",\r",
                      "    \"Profile successful\",\r",
                      "    \"Not Found\"\r",
                      "]\r",
                      "\r",
                      "status = [400,401,404,500,200,201]\r",
                      "\r",
                      "if (jsonData.success === false) {\r",
                      "    pm.test(`**** E R R O R ***** ${jsonData.message}`, function(){\r",
                      "        // pm.expect(jsonData.message).to.eql(\"No authentication token specified in x-auth-token header\");\r",
                      "        pm.expect(jsonData.message).to.be.oneOf(message);\r",
                      "    });\r",
                      "\r",
                      "    pm.test(`Check the multiple error status code ${jsonData.status}`, function(){\r",
                      "        pm.expect(pm.response.code).to.be.oneOf(status);\r",
                      "    });\r",
                      "\r",
                      "\r",
                      "}\r",
                      "else {\r",
                      "    pm.test(`*** S U C C E S S *** ${jsonData.message}`, function(){\r",
                      "        // pm.expect(jsonData.message).to.equal(\"Profile successful\");\r",
                      "        pm.expect(jsonData.message).to.be.oneOf(message);\r",
                      "    });\r",
                      "\r",
                      "    pm.test(\"Check the response time\", function(){\r",
                      "    pm.expect(pm.response.responseTime).to.be.below(6000);\r",
                      "    });\r",
                      "\r",
                      "    pm.test(`Check the Status code ${jsonData.status}`, function(){\r",
                      "        pm.expect(pm.response.code).to.be.oneOf(status);\r",
                      "    });\r",
                      "\r",
                      "    pm.test(\"Body matches multiple string\",function(){\r",
                      "    pm.expect(pm.response.text()).to.include(\"id\");\r",
                      "    pm.expect(pm.response.text()).to.include(\"name\");\r",
                      "    pm.expect(pm.response.text()).to.include(\"email\");\r",
                      "});\r",
                      "\r",
                      "}\r",
                      "\r",
                      ""
                    ],
                    "_lastExecutionId": "55d3989d-79a3-476b-87c3-020290feeec2"
                  }
                },
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "5b6727ff-6213-4350-874c-dbaeeb0d0d03",
                    "type": "text/javascript",
                    "exec": [
                      ""
                    ],
                    "_lastExecutionId": "5e07b22a-eb37-441e-b764-c112f7fde3f7"
                  }
                }
              ],
              "protocolProfileBehavior": {
                "disabledSystemHeaders": {}
              }
            },
            {
              "id": "ee9d7916-0288-4df6-a4d2-05ed9c78c4f1",
              "name": "UpdateProfile",
              "request": {
                "url": {
                  "path": [
                    "users",
                    "profile"
                  ],
                  "host": [
                    "{{exp_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "PATCH",
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n    \"name\":\"{{name}}\",\r\n    \"phone\":\"{{random_number}}\",\r\n    \"company\":\"{{$randomCompanyName}}\"\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "auth": {
                  "type": "apikey",
                  "apikey": [
                    {
                      "type": "string",
                      "value": "{{exp_token}}",
                      "key": "value"
                    },
                    {
                      "type": "string",
                      "value": "header",
                      "key": "in"
                    },
                    {
                      "type": "string",
                      "value": "x-auth-token",
                      "key": "key"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "6ab7e932-eb9b-4edc-9edc-b8d42e4162ad",
                    "type": "text/javascript",
                    "exec": [
                      "let jsonData = pm.response.json();\r",
                      "message = [\r",
                      "    \"Access token is not valid or has expired, you will need to login\",\r",
                      "    \"No authentication token specified in x-auth-token header\",\r",
                      "    \"User name must be between 4 and 30 characters\",\r",
                      "    \"Phone number should be between 8 and 20 digits\",\r",
                      "    \"Unauthorized Request\",\r",
                      "    \"Internal Error Server\",\r",
                      "    \"Profile updated successful\",\r",
                      "    \"Not Found\",\r",
                      "    \"Bad Request\"\r",
                      "]\r",
                      "\r",
                      "status = [400,401,404,500,200,201]\r",
                      "// var jsonData1 = pm.response.json();\r",
                      "// pm.environment.set(\"phoneNumber\", jsonData1.data.phone);\r",
                      "\r",
                      "if (jsonData.success === false) {\r",
                      "    pm.test(`**** E R R O R ***** ${jsonData.message}`, function(){\r",
                      "        // pm.expect(jsonData.message).to.eql(\"No authentication token specified in x-auth-token header\");\r",
                      "        pm.expect(jsonData.message).to.be.oneOf(message);\r",
                      "    });\r",
                      "\r",
                      "    pm.test(`Check the multiple error status code ${jsonData.status}`, function(){\r",
                      "        pm.expect(pm.response.code).to.be.oneOf(status);\r",
                      "    });\r",
                      "\r",
                      "\r",
                      "}\r",
                      "else {\r",
                      "    pm.test(`*** S U C C E S S *** ${jsonData.message}`, function(){\r",
                      "        // pm.expect(jsonData.message).to.equal(\"Profile successful\");\r",
                      "        pm.expect(jsonData.message).to.be.oneOf(message);\r",
                      "    });\r",
                      "\r",
                      "    pm.test(\"Check the response time\", function(){\r",
                      "    pm.expect(pm.response.responseTime).to.be.below(6000);\r",
                      "    });\r",
                      "\r",
                      "    pm.test(`Check the Status code ${jsonData.status}`, function(){\r",
                      "        pm.expect(pm.response.code).to.be.oneOf(status);\r",
                      "    });\r",
                      "\r",
                      "    pm.test(\"Body matches multiple string\",function(){\r",
                      "    pm.expect(pm.response.text()).to.include(\"id\");\r",
                      "    pm.expect(pm.response.text()).to.include(\"name\");\r",
                      "    pm.expect(pm.response.text()).to.include(\"email\");\r",
                      "});\r",
                      "\r",
                      "}\r",
                      "\r",
                      ""
                    ],
                    "_lastExecutionId": "bf535ed4-ea27-433b-95ed-0405878d634c"
                  }
                },
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "1dd9ce14-2fea-48d5-b628-446e36acb961",
                    "type": "text/javascript",
                    "exec": [
                      "pm.environment.set(\"random_number\",_.random(1000000000,9999999999));\r",
                      "\r",
                      "\r",
                      ""
                    ],
                    "_lastExecutionId": "81adb337-1695-4fed-b265-391f869dd222"
                  }
                }
              ]
            },
            {
              "id": "03c5b9ed-2c86-4338-932a-d93a799c2d8d",
              "name": "ForgotPassword",
              "request": {
                "url": {
                  "path": [
                    "users",
                    "forgot-password"
                  ],
                  "host": [
                    "{{exp_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n    \"email\":\"{{randomEmail}}\"\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "auth": {
                  "type": "apikey",
                  "apikey": [
                    {
                      "type": "string",
                      "value": "{{exp_token}}",
                      "key": "value"
                    },
                    {
                      "type": "string",
                      "value": "header",
                      "key": "in"
                    },
                    {
                      "type": "string",
                      "value": "x-auth-token",
                      "key": "key"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "72c44319-e1e0-49ac-91f7-f3f0cd439f93",
                    "type": "text/javascript",
                    "exec": [
                      "let jsonData = pm.response.json();\r",
                      "let jsonEmail = JSON.parse(pm.request.body.raw).email;\r",
                      "\r",
                      "message = [\r",
                      "    \"Access token is not valid or has expired, you will need to login\",\r",
                      "    \"No authentication token specified in x-auth-token header\",\r",
                      "    \"Unauthorized Request\",\r",
                      "    \"Internal Error Server\",\r",
                      "    `Password reset link successfully sent to ${pm.environment.get(\"email\")}. Please verify by clicking on the given link`,\r",
                      "    \"Not Found\",\r",
                      "    \"Bad Request\",\r",
                      "    \"A valid email address is required\"\r",
                      "]\r",
                      "\r",
                      "status = [400,401,404,500,200,201]\r",
                      "// var jsonData1 = pm.response.json();\r",
                      "// pm.environment.set(\"phoneNumber\", jsonData1.data.phone);\r",
                      "\r",
                      "if (jsonData.success === false) {\r",
                      "    pm.test(`**** E R R O R ***** ${jsonData.message}`, function(){\r",
                      "        // pm.expect(jsonData.message).to.eql(\"No authentication token specified in x-auth-token header\");\r",
                      "        pm.expect(jsonData.message).to.be.oneOf(message);\r",
                      "    });\r",
                      "\r",
                      "    pm.test(`Check the multiple error status code ${jsonData.status}`, function(){\r",
                      "        pm.expect(pm.response.code).to.be.oneOf(status);\r",
                      "    });\r",
                      "\r",
                      "\r",
                      "}\r",
                      "else {\r",
                      "    pm.test(`*** S U C C E S S *** ${jsonData.message}`, function(){\r",
                      "        // pm.expect(jsonData.message).to.equal(\"Profile successful\");\r",
                      "        pm.expect(jsonData.message).to.be.oneOf(message);\r",
                      "    });\r",
                      "\r",
                      "    pm.test(\"Check the response time\", function(){\r",
                      "    pm.expect(pm.response.responseTime).to.be.below(6000);\r",
                      "    });\r",
                      "\r",
                      "    pm.test(`Check the Status code ${jsonData.status}`, function(){\r",
                      "        pm.expect(pm.response.code).to.be.oneOf(status);\r",
                      "    });\r",
                      "\r",
                      "    pm.test(\"Body matches multiple string\",function(){\r",
                      "    pm.expect(pm.response.text()).to.include(\"message\");\r",
                      "});\r",
                      "\r",
                      "}\r",
                      "\r",
                      ""
                    ],
                    "_lastExecutionId": "a3803636-b917-4048-8873-b62ae1f022d6"
                  }
                },
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "6236deb0-9668-46d8-bb96-97cc86eeb0fa",
                    "type": "text/javascript",
                    "exec": [
                      ""
                    ],
                    "_lastExecutionId": "148f797c-8661-4a45-97c4-527fe81fce77"
                  }
                }
              ]
            },
            {
              "id": "eea8198b-64d4-43e4-b554-aefaae2516cd",
              "name": "GetEmailMessage",
              "request": {
                "url": {
                  "protocol": "https",
                  "path": [
                    "gmail",
                    "v1",
                    "users",
                    "{{user_email_id}}",
                    "messages",
                    ""
                  ],
                  "host": [
                    "gmail",
                    "googleapis",
                    "com"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET",
                "auth": {
                  "type": "oauth2",
                  "oauth2": [
                    {
                      "type": "boolean",
                      "value": false,
                      "key": "useBrowser"
                    },
                    {
                      "type": "string",
                      "value": "{{Scope}}",
                      "key": "scope"
                    },
                    {
                      "type": "string",
                      "value": "{{Client_Secret}}",
                      "key": "clientSecret"
                    },
                    {
                      "type": "string",
                      "value": "{{Client_ID}}",
                      "key": "clientId"
                    },
                    {
                      "type": "string",
                      "value": "{{Access_Token_URL}}",
                      "key": "accessTokenUrl"
                    },
                    {
                      "type": "string",
                      "value": "{{Auth_URL}}",
                      "key": "authUrl"
                    },
                    {
                      "type": "string",
                      "value": "{{Callback_URL}}",
                      "key": "redirect_uri"
                    },
                    {
                      "type": "string",
                      "value": "authorization_code",
                      "key": "grant_type"
                    },
                    {
                      "type": "string",
                      "value": "email_token",
                      "key": "tokenName"
                    },
                    {
                      "type": "string",
                      "value": "header",
                      "key": "addTokenTo"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "705020a4-73b3-44df-86ff-a5984e094d10",
                    "type": "text/javascript",
                    "exec": [
                      "var jsonData = pm.response.json();\r",
                      "pm.environment.set(\"messageId\", jsonData.messages[0].id);\r",
                      "\r",
                      ""
                    ],
                    "_lastExecutionId": "eeef6f2d-f5fd-4a00-be9c-25555c6fa5bc"
                  }
                },
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "cdf7837a-853f-442c-8e05-996129213a95",
                    "type": "text/javascript",
                    "exec": [
                      "var newRefreshToken = pm.environment.get(\"access_token\");\r",
                      "\r",
                      "pm.environment.set(\"refresh_token\", newRefreshToken);"
                    ],
                    "_lastExecutionId": "94790536-1730-42ee-886b-f2872e8a5fee"
                  }
                }
              ]
            },
            {
              "id": "f053ddc8-a8a6-4796-a23f-c89737b34582",
              "name": "GetMessageByID",
              "request": {
                "url": {
                  "protocol": "https",
                  "path": [
                    "gmail",
                    "v1",
                    "users",
                    "{{user_email_id}}",
                    "messages",
                    "{{messageId}}"
                  ],
                  "host": [
                    "gmail",
                    "googleapis",
                    "com"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "multipart/mixed"
                  }
                ],
                "method": "GET",
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "{{access_token}}",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "d94857cd-ae23-40c6-ae38-5f7aaca3e833",
                    "type": "text/javascript",
                    "exec": [
                      "\r",
                      "const response = pm.response.json();\r",
                      "\r",
                      "pm.environment.set(\"message_Body\", response.payload.body.data);\r",
                      "\r",
                      "var atob = require('atob');\r",
                      "\r",
                      "\r",
                      "var base64Data = pm.environment.get(\"message_Body\");\r",
                      "var decodedData = atob(base64Data);\r",
                      "postman.setEnvironmentVariable(\"rest_password\",decodedData);\r",
                      "var tokenRegex = /Reset password link: (https:\\/\\/practice\\.expandtesting\\.com\\/notes\\/app\\/reset-password\\/([\\w\\d]+))[^ ]+/;\r",
                      "var tokenMatch = decodedData.match(tokenRegex);\r",
                      "if (tokenMatch && tokenMatch[2]) {\r",
                      "    var resetPasswordToken = tokenMatch[2];\r",
                      "    \r",
                      "    // Set the reset password link as a Postman environment variable for later use\r",
                      "    pm.environment.set(\"resetPasswordToken\", resetPasswordToken);\r",
                      "    \r",
                      "    // Log the reset password link\r",
                      "    console.log(\"Reset Password Token: \" + resetPasswordToken);\r",
                      "} else {\r",
                      "    console.log(\"Reset password token not found in the response.\");\r",
                      "}\r",
                      "console.log(decodedData);\r",
                      "\r",
                      "\r",
                      "\r",
                      "\r",
                      "\r",
                      "\r",
                      "\r",
                      "\r",
                      "\r",
                      "\r",
                      "\r",
                      ""
                    ],
                    "_lastExecutionId": "4816be40-7f3a-489e-b23c-14c698a58ddc"
                  }
                },
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "8349aa22-c992-434e-9e35-e5fc8ef4a245",
                    "type": "text/javascript",
                    "exec": [
                      ""
                    ],
                    "_lastExecutionId": "e5ddbcb0-9830-4e57-9232-851987938e7d"
                  }
                }
              ]
            },
            {
              "id": "8d884a10-0abd-48de-9b8a-47bfc7ff13cd",
              "name": "verify-reset-password-token",
              "request": {
                "url": {
                  "path": [
                    "users",
                    "verify-reset-password-token"
                  ],
                  "host": [
                    "{{exp_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "accept",
                    "value": "application/json"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/x-www-form-urlencoded"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "urlencoded",
                  "urlencoded": [
                    {
                      "key": "token",
                      "value": "{{resetPasswordToken}}"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "799e647c-efdd-4528-bf8c-ec8d1e1a4b55",
                    "type": "text/javascript",
                    "exec": [
                      "let jsonData = pm.response.json();\r",
                      "\r",
                      "message = [\r",
                      "    \"The provided password reset token is valid\",\r",
                      "    \"Bad Request\",\r",
                      "    \"Internal Error Server\",\r",
                      "    \"The provided password reset token is invalid or has expired\"\r",
                      "]\r",
                      "\r",
                      "status = [200,400,401,500]\r",
                      "\r",
                      "if (jsonData.success === false) {\r",
                      "    pm.test(`**** E R R O R ***** ${jsonData.message}`, function(){\r",
                      "        // pm.expect(jsonData.message).to.eql(\"No authentication token specified in x-auth-token header\");\r",
                      "        pm.expect(jsonData.message).to.be.oneOf(message);\r",
                      "    });\r",
                      "\r",
                      "    pm.test(`Check the multiple error status code ${jsonData.status}`, function(){\r",
                      "        pm.expect(pm.response.code).to.be.oneOf(status);\r",
                      "    });\r",
                      "\r",
                      "\r",
                      "}\r",
                      "else {\r",
                      "    pm.test(`*** S U C C E S S *** ${jsonData.message}`, function(){\r",
                      "        // pm.expect(jsonData.message).to.equal(\"Profile successful\");\r",
                      "        pm.expect(jsonData.message).to.be.oneOf(message);\r",
                      "    });\r",
                      "\r",
                      "    pm.test(\"Check the response time\", function(){\r",
                      "    pm.expect(pm.response.responseTime).to.be.below(6000);\r",
                      "    });\r",
                      "\r",
                      "    pm.test(`Check the Status code ${jsonData.status}`, function(){\r",
                      "        pm.expect(pm.response.code).to.be.oneOf(status);\r",
                      "    });\r",
                      "\r",
                      "    pm.test(\"Body matches multiple string\",function(){\r",
                      "    pm.expect(pm.response.text()).to.include(\"message\");\r",
                      "});\r",
                      "\r",
                      "}\r",
                      "\r",
                      ""
                    ],
                    "_lastExecutionId": "c1d6d515-485d-45cb-ab2b-15662e3830f7"
                  }
                },
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "46fb041c-0790-4ccb-a117-d6dcbb44aa15",
                    "type": "text/javascript",
                    "exec": [
                      ""
                    ],
                    "_lastExecutionId": "48a955fd-f392-4b00-9034-2a273d9fea6d"
                  }
                }
              ]
            },
            {
              "id": "740f7a4b-9db6-4b38-a333-0ad712a2b2a2",
              "name": "reset-password",
              "request": {
                "url": {
                  "protocol": "https",
                  "path": [
                    "notes",
                    "api",
                    "users",
                    "reset-password"
                  ],
                  "host": [
                    "practice",
                    "expandtesting",
                    "com"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "accept",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n    \"token\":\"{{resetPasswordToken}}\",\r\n    \"newPassword\":\"{{$randomPassword}}\"\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "7cdc8324-5612-42e4-8f85-49037412238b",
                    "type": "text/javascript",
                    "exec": [
                      "let jsonData = pm.response.json();\r",
                      "\r",
                      "let newPassword = JSON.parse(pm.request.body.raw).newPassword;\r",
                      "pm.environment.set('password', newPassword);\r",
                      "\r",
                      "\r",
                      "message = [\r",
                      "    \"The password has been successfully reset\",\r",
                      "    \"Token must be between 64 characters\",\r",
                      "    \"Bad Request\",\r",
                      "    \"The password was successfully updated\",\r",
                      "    \"Internal Error Server\",\r",
                      "    \"New password must be between 6 and 30 characters\",\r",
                      "    \"The password reset token is invalid or has expired\"\r",
                      "]\r",
                      "\r",
                      "status = [200,400,401,500]\r",
                      "\r",
                      "if (jsonData.success === false) {\r",
                      "    pm.test(`**** E R R O R ***** ${jsonData.message}`, function(){\r",
                      "        // pm.expect(jsonData.message).to.eql(\"No authentication token specified in x-auth-token header\");\r",
                      "        pm.expect(jsonData.message).to.be.oneOf(message);\r",
                      "    });\r",
                      "\r",
                      "    pm.test(`Check the multiple error status code ${jsonData.status}`, function(){\r",
                      "        pm.expect(pm.response.code).to.be.oneOf(status);\r",
                      "    });\r",
                      "\r",
                      "\r",
                      "}\r",
                      "else {\r",
                      "    pm.test(`*** S U C C E S S *** ${jsonData.message}`, function(){\r",
                      "        // pm.expect(jsonData.message).to.equal(\"Profile successful\");\r",
                      "        pm.expect(jsonData.message).to.be.oneOf(message);\r",
                      "    });\r",
                      "\r",
                      "    pm.test(\"Check the response time\", function(){\r",
                      "    pm.expect(pm.response.responseTime).to.be.below(6000);\r",
                      "    });\r",
                      "\r",
                      "    pm.test(`Check the Status code ${jsonData.status}`, function(){\r",
                      "        pm.expect(pm.response.code).to.be.oneOf(status);\r",
                      "    });\r",
                      "\r",
                      "    pm.test(\"Body matches multiple string\",function(){\r",
                      "    pm.expect(pm.response.text()).to.include(\"message\");\r",
                      "});\r",
                      "\r",
                      "}\r",
                      "\r",
                      "\r",
                      ""
                    ],
                    "_lastExecutionId": "5d234639-2098-4725-8401-094ce8fa851b"
                  }
                },
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "1268a1ec-48a3-4dfd-8fc8-3c14d0fa7f28",
                    "type": "text/javascript",
                    "exec": [
                      ""
                    ],
                    "_lastExecutionId": "3e5db1d1-0c8c-4a29-8797-f14a01a4bedc"
                  }
                }
              ]
            },
            {
              "id": "93821c3b-e028-4eda-a749-05d87d7e6a94",
              "name": "change-password",
              "request": {
                "url": {
                  "path": [
                    "users",
                    "change-password"
                  ],
                  "host": [
                    "{{exp_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "accept",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n    \"currentPassword\":\"{{password}}\",\r\n    \"newPassword\":\"{{$randomPassword}}\"\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "auth": {
                  "type": "apikey",
                  "apikey": [
                    {
                      "type": "string",
                      "value": "{{exp_token}}",
                      "key": "value"
                    },
                    {
                      "type": "string",
                      "value": "x-auth-token",
                      "key": "key"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "3eca22f1-7d4a-4832-8b68-54badb876aa6",
                    "type": "text/javascript",
                    "exec": [
                      "pm.environment.get(\"password\");\r",
                      "\r",
                      "let newPassword = JSON.parse(pm.request.body.raw).newPassword;\r",
                      "pm.environment.set('password', newPassword);\r",
                      "\r",
                      "let jsonData = pm.response.json();\r",
                      "message = [\r",
                      "    \"The password has been successfully reset\",\r",
                      "    \"Token must be between 64 characters\",\r",
                      "    \"Bad Request\",\r",
                      "    \"The password was successfully updated\",\r",
                      "    \"Internal Error Server\",\r",
                      "    \"New password must be between 6 and 30 characters\",\r",
                      "    \"The password reset token is invalid or has expired\"\r",
                      "]\r",
                      "\r",
                      "status = [200,400,401,500]\r",
                      "\r",
                      "if (jsonData.success === false) {\r",
                      "    pm.test(`**** E R R O R ***** ${jsonData.message}`, function(){\r",
                      "        // pm.expect(jsonData.message).to.eql(\"No authentication token specified in x-auth-token header\");\r",
                      "        pm.expect(jsonData.message).to.be.oneOf(message);\r",
                      "    });\r",
                      "\r",
                      "    pm.test(`Check the multiple error status code ${jsonData.status}`, function(){\r",
                      "        pm.expect(pm.response.code).to.be.oneOf(status);\r",
                      "    });\r",
                      "\r",
                      "\r",
                      "}\r",
                      "else {\r",
                      "    pm.test(`*** S U C C E S S *** ${jsonData.message}`, function(){\r",
                      "        // pm.expect(jsonData.message).to.equal(\"Profile successful\");\r",
                      "        pm.expect(jsonData.message).to.be.oneOf(message);\r",
                      "    });\r",
                      "\r",
                      "    pm.test(\"Check the response time\", function(){\r",
                      "    pm.expect(pm.response.responseTime).to.be.below(6000);\r",
                      "    });\r",
                      "\r",
                      "    pm.test(`Check the Status code ${jsonData.status}`, function(){\r",
                      "        pm.expect(pm.response.code).to.be.oneOf(status);\r",
                      "    });\r",
                      "\r",
                      "    pm.test(\"Body matches multiple string\",function(){\r",
                      "    pm.expect(pm.response.text()).to.include(\"message\");\r",
                      "});\r",
                      "\r",
                      "}\r",
                      ""
                    ],
                    "_lastExecutionId": "64be3638-86ca-4200-b966-7a137b03eb2e"
                  }
                },
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "aa473681-09fc-4673-a2fe-7012cf4e42e9",
                    "type": "text/javascript",
                    "exec": [
                      "console.log(pm.environment.get(\"password\"));\r",
                      "\r",
                      "\r",
                      "\r",
                      ""
                    ],
                    "_lastExecutionId": "fb6fc291-ccb6-46ad-9bb8-0e4bf2cf736d"
                  }
                }
              ]
            },
            {
              "id": "f4c8e78d-5700-43a2-8e20-cb1a0de26ce9",
              "name": "UserLogout",
              "request": {
                "url": {
                  "path": [
                    "users",
                    "logout"
                  ],
                  "host": [
                    "{{exp_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "accept",
                    "value": "application/json"
                  }
                ],
                "method": "DELETE",
                "auth": {
                  "type": "apikey",
                  "apikey": [
                    {
                      "type": "string",
                      "value": "{{exp_token}}",
                      "key": "value"
                    },
                    {
                      "type": "string",
                      "value": "x-auth-token",
                      "key": "key"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "43a38bb6-0063-463b-9a7b-ea0674d209fe",
                    "type": "text/javascript",
                    "exec": [
                      "let jsonData = pm.response.json();\r",
                      "message = [\r",
                      "    \"User has been successfully logged out\",\r",
                      "    \"Token must be between 64 characters\",\r",
                      "    \"Bad Request\",\r",
                      "    \"Access token is not valid or has expired, you will need to login\",\r",
                      "    \"No authentication token specified in x-auth-token header\",\r",
                      "    \"Internal Error Server\",\r",
                      "    \"Successful Request\",\r",
                      "    \"Unauthorized Request\"\r",
                      "]\r",
                      "\r",
                      "status = [200,400,401,500]\r",
                      "\r",
                      "if (jsonData.success === false) {\r",
                      "    pm.test(`**** E R R O R ***** ${jsonData.message}`, function(){\r",
                      "        // pm.expect(jsonData.message).to.eql(\"No authentication token specified in x-auth-token header\");\r",
                      "        pm.expect(jsonData.message).to.be.oneOf(message);\r",
                      "    });\r",
                      "\r",
                      "    pm.test(`Check the multiple error status code ${jsonData.status}`, function(){\r",
                      "        pm.expect(pm.response.code).to.be.oneOf(status);\r",
                      "    });\r",
                      "\r",
                      "\r",
                      "}\r",
                      "else {\r",
                      "    pm.test(`*** S U C C E S S *** ${jsonData.message}`, function(){\r",
                      "        // pm.expect(jsonData.message).to.equal(\"Profile successful\");\r",
                      "        pm.expect(jsonData.message).to.be.oneOf(message);\r",
                      "    });\r",
                      "\r",
                      "    pm.test(\"Check the response time\", function(){\r",
                      "    pm.expect(pm.response.responseTime).to.be.below(6000);\r",
                      "    });\r",
                      "\r",
                      "    pm.test(`Check the Status code ${jsonData.status}`, function(){\r",
                      "        pm.expect(pm.response.code).to.be.oneOf(status);\r",
                      "    });\r",
                      "\r",
                      "    pm.test(\"Body matches multiple string\",function(){\r",
                      "    pm.expect(pm.response.text()).to.include(\"message\");\r",
                      "});\r",
                      "\r",
                      "}\r",
                      "\r",
                      "postman.setNextRequest(null);"
                    ],
                    "_lastExecutionId": "c7d982d4-a8dc-460f-a106-6e0c01643e82"
                  }
                },
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "e8ae662d-a080-4bf5-a817-754113435b5e",
                    "type": "text/javascript",
                    "exec": [
                      ""
                    ],
                    "_lastExecutionId": "0b0d404e-4117-40fc-9982-a95619506052"
                  }
                }
              ]
            }
          ],
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "3380df96-f386-44be-9dc8-eb145a929d13",
                "type": "text/javascript",
                "exec": [
                  ""
                ],
                "_lastExecutionId": "c2613397-fddf-4d46-99b6-9ffc9166e0a8"
              }
            },
            {
              "listen": "test",
              "script": {
                "id": "18c4e0bb-9477-4e5f-b627-d550e666c7d3",
                "type": "text/javascript",
                "exec": [
                  ""
                ],
                "_lastExecutionId": "78225eb1-cbe5-408b-978b-a1bf2d2b693c"
              }
            }
          ],
          "variable": [
            {
              "type": "string",
              "value": "https://practice.expandtesting.com/notes/api",
              "key": "exp_url"
            }
          ],
          "info": {
            "_postman_id": "723ea9c3-0635-4605-b90c-d6d9e9835d8c",
            "name": "expandtesting",
            "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
          }
        },
        "cursor": {
          "ref": "f70c212e-54ae-4c80-84bf-295f5d6f7f9a",
          "length": 12,
          "cycles": 1,
          "position": 1,
          "iteration": 0,
          "httpRequestId": "862306ad-af84-4909-a2fc-5aa4c4d48310",
          "scriptId": "4f0c3c3d-4171-4bea-b8a8-3fd567809f0d",
          "execution": "2fbfcb58-035a-4d0d-afa2-7fc9d5239e13"
        }
      },
      {
        "error": {
          "type": "Error",
          "name": "TypeError",
          "message": "Cannot read properties of undefined (reading 'id')",
          "checksum": "7968b7e0e6adfbc32cfd96627c083201",
          "id": "a0809002-50dc-476f-b224-ca591d1bf9de",
          "timestamp": 1698733438935,
          "stacktrace": []
        },
        "at": "test-script",
        "source": {
          "id": "d3b70abb-4c44-4d96-b946-e8ef2e19907f",
          "name": "RegisterUser",
          "request": {
            "url": {
              "path": [
                "users",
                "register"
              ],
              "host": [
                "{{exp_url}}"
              ],
              "query": [],
              "variable": []
            },
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\r\n    \"name\":\"{{$randomFullName}}\",\r\n    \"email\":\"{{randomEmail}}\",\r\n    \"password\":\"{{$randomPassword}}\"\r\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "4f0c3c3d-4171-4bea-b8a8-3fd567809f0d",
                "type": "text/javascript",
                "exec": [
                  "var jsonData = pm.response.json();\r",
                  "\r",
                  "pm.test(\"Check the success msg is true in body?\", function(){\r",
                  "    pm.expect(jsonData.success).to.eql(true);\r",
                  "});\r",
                  "\r",
                  "pm.test(\"Check the body message\", function(){\r",
                  "    pm.expect(jsonData.message).to.eql(\"User account created successfully\");\r",
                  "});\r",
                  "\r",
                  "pm.test(\"Verify the values are not null\", function(){\r",
                  "    pm.expect(jsonData.data.id, \"Id is not null\").to.not.be.null;\r",
                  "    pm.expect(jsonData.data.name, \"name is not null\").to.not.be.null;\r",
                  "    pm.expect(jsonData.data.email, \"email is not null\").to.not.be.null;\r",
                  "});\r",
                  "\r",
                  "pm.test(\"response property matching an environment variable\", function(){\r",
                  "    pm.expect(jsonData.name).to.eql(pm.environment.get(\"name\"));\r",
                  "});\r",
                  "\r",
                  "pm.test(\"Check the response time\", function(){\r",
                  "    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
                  "});\r",
                  "\r",
                  "pm.environment.set(\"id\", jsonData.data.id);\r",
                  "pm.environment.set(\"name\", jsonData.data.name);\r",
                  "\r",
                  "let password = JSON.parse(pm.request.body.raw).password;\r",
                  "pm.environment.set('password', password);\r",
                  "\r",
                  "message = [\r",
                  "    \"Access token is not valid or has expired, you will need to login\",\r",
                  "    \"No authentication token specified in x-auth-token header\",\r",
                  "    \"User name must be between 4 and 30 characters\",\r",
                  "    \"Phone number should be between 8 and 20 digits\",\r",
                  "    \"Unauthorized Request\",\r",
                  "    \"Internal Error Server\",\r",
                  "    \"Profile updated successful\",\r",
                  "    \"User account created successfully\",\r",
                  "    \"Not Found\",\r",
                  "    \"Bad Request\",\r",
                  "    \"An account already exists with the same email address\"\r",
                  "];\r",
                  "\r",
                  "status = [400,401,404,409,500,200,201];\r",
                  "\r",
                  "if (jsonData.success === false) {\r",
                  "    pm.test(`**** E R R O R ***** ${jsonData.message}`, function(){\r",
                  "        pm.expect(jsonData.message).to.be.oneOf(message);\r",
                  "    });\r",
                  "\r",
                  "    pm.test(`Check the multiple error status code ${jsonData.status}`, function(){\r",
                  "        pm.expect(pm.response.code).to.be.oneOf(status);\r",
                  "    });\r",
                  "}\r",
                  "else {\r",
                  "    pm.test(`*** S U C C E S S *** ${jsonData.message}`, function(){\r",
                  "        pm.expect(jsonData.message).to.be.oneOf(message);\r",
                  "    });\r",
                  "\r",
                  "    pm.test(`Check the Status code ${jsonData.status}`, function(){\r",
                  "        pm.expect(pm.response.code).to.be.oneOf(status);\r",
                  "    });\r",
                  "}"
                ],
                "_lastExecutionId": "2fbfcb58-035a-4d0d-afa2-7fc9d5239e13"
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "id": "3483ef69-d6b6-4835-8746-973a3f7a159e",
                "type": "text/javascript",
                "exec": [
                  "\r",
                  "// // Define the incrementEmail function\r",
                  "// function incrementEmail(email) {\r",
                  "//     const match = email.match(/\\+a(\\d+)/);\r",
                  "\r",
                  "//     if (match) {\r",
                  "//         const currentNumber = parseInt(match[1]);\r",
                  "//         const nextNumber = currentNumber + 1;\r",
                  "//         const incrementedEmail = email.replace(/\\+a\\d+/, `+a${nextNumber}`);\r",
                  "//         return incrementedEmail;\r",
                  "//     }\r",
                  "\r",
                  "//     return email;\r",
                  "// }\r",
                  "\r",
                  "\r",
                  "// const originalEmail = pm.environment.get(\"email\");\r",
                  "\r",
                  "\r",
                  "// if (originalEmail) {\r",
                  "//     // Use the incrementEmail function to get the incremented email\r",
                  "//     const incrementedEmail = incrementEmail(originalEmail);\r",
                  "\r",
                  "//     // Set the incremented email back to the environment\r",
                  "//     pm.environment.set(\"email\", incrementedEmail);\r",
                  "\r",
                  "//     console.log(\"OriginalEmail:\", originalEmail);\r",
                  "//     console.log(\"IncrementedEmail:\", incrementedEmail);\r",
                  "// } else {\r",
                  "//     console.error(\"Email environment variable not found.\");\r",
                  "// }\r",
                  "\r",
                  "// console.log(pm.environment.get(\"email\"));\r",
                  "\r",
                  "\r",
                  "// -------------------------------------------------------------------\r",
                  "// Define the base part of the email address\r",
                  "const baseEmail = pm.environment.get(\"baseEmail\");\r",
                  "\r",
                  "// Generate a random number between min and max (inclusive)\r",
                  "function getRandomNumber(min, max) {\r",
                  "    return Math.floor(Math.random() * (max - min + 1)) + min;\r",
                  "}\r",
                  "\r",
                  "// Generate a random sequence like +a151, +a152, +a153, and so on\r",
                  "const randomSequence = `+a${getRandomNumber(1, 999)}`;\r",
                  "\r",
                  "// Combine the base and random sequence to create the random email address\r",
                  "const randomEmail = `${baseEmail}${randomSequence}@gmail.com`;\r",
                  "\r",
                  "// Set the random email address as an environment variable for your request\r",
                  "pm.environment.set('randomEmail', randomEmail);\r",
                  "\r",
                  "\r",
                  ""
                ],
                "_lastExecutionId": "f0df73d6-9875-49de-aaed-2ffb46745ff0"
              }
            }
          ]
        },
        "parent": {
          "_": {
            "postman_id": "723ea9c3-0635-4605-b90c-d6d9e9835d8c",
            "exporter_id": "13852941",
            "collection_link": "https://galactic-astronaut-894425.postman.co/workspace/b6dafb4f-3507-4e58-a32d-dd31bf6ab148/collection/13852941-723ea9c3-0635-4605-b90c-d6d9e9835d8c?action=share&source=collection_link&creator=13852941"
          },
          "item": [
            {
              "id": "90407c19-d06c-4337-abb9-4dfc2fa17fc8",
              "name": "health_check",
              "request": {
                "url": {
                  "path": [
                    "health-check"
                  ],
                  "host": [
                    "{{exp_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "b075fb8f-9483-4909-a4a4-cf6344c6642b",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Check the Status code 200\", function(){\r",
                      "    pm.response.to.have.status(200);\r",
                      "});\r",
                      "\r",
                      "var jsonData = pm.response.json();\r",
                      "\r",
                      "pm.test(\"Check the success code in body\", function(){\r",
                      "    pm.expect(jsonData.success).to.eql(true);\r",
                      "});\r",
                      "\r",
                      "pm.test(\"Check the Status code in body\", function(){\r",
                      "    pm.expect(jsonData.status).to.eql(200);\r",
                      "});\r",
                      "\r",
                      "pm.test(\"Check the message in body\", function(){\r",
                      "    pm.expect(jsonData.message).to.eql(\"Notes API is Running\");\r",
                      "});\r",
                      "\r",
                      "\r",
                      ""
                    ],
                    "_lastExecutionId": "dcf22f24-f95a-4d61-981a-68f2474c0b1d"
                  }
                },
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "15079d7d-2fc3-468b-b923-1fd697b2156e",
                    "type": "text/javascript",
                    "exec": [
                      ""
                    ],
                    "_lastExecutionId": "a57965c9-dfeb-425b-a87b-14b41a981af7"
                  }
                }
              ]
            },
            {
              "id": "d3b70abb-4c44-4d96-b946-e8ef2e19907f",
              "name": "RegisterUser",
              "request": {
                "url": {
                  "path": [
                    "users",
                    "register"
                  ],
                  "host": [
                    "{{exp_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n    \"name\":\"{{$randomFullName}}\",\r\n    \"email\":\"{{randomEmail}}\",\r\n    \"password\":\"{{$randomPassword}}\"\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "4f0c3c3d-4171-4bea-b8a8-3fd567809f0d",
                    "type": "text/javascript",
                    "exec": [
                      "var jsonData = pm.response.json();\r",
                      "\r",
                      "pm.test(\"Check the success msg is true in body?\", function(){\r",
                      "    pm.expect(jsonData.success).to.eql(true);\r",
                      "});\r",
                      "\r",
                      "pm.test(\"Check the body message\", function(){\r",
                      "    pm.expect(jsonData.message).to.eql(\"User account created successfully\");\r",
                      "});\r",
                      "\r",
                      "pm.test(\"Verify the values are not null\", function(){\r",
                      "    pm.expect(jsonData.data.id, \"Id is not null\").to.not.be.null;\r",
                      "    pm.expect(jsonData.data.name, \"name is not null\").to.not.be.null;\r",
                      "    pm.expect(jsonData.data.email, \"email is not null\").to.not.be.null;\r",
                      "});\r",
                      "\r",
                      "pm.test(\"response property matching an environment variable\", function(){\r",
                      "    pm.expect(jsonData.name).to.eql(pm.environment.get(\"name\"));\r",
                      "});\r",
                      "\r",
                      "pm.test(\"Check the response time\", function(){\r",
                      "    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
                      "});\r",
                      "\r",
                      "pm.environment.set(\"id\", jsonData.data.id);\r",
                      "pm.environment.set(\"name\", jsonData.data.name);\r",
                      "\r",
                      "let password = JSON.parse(pm.request.body.raw).password;\r",
                      "pm.environment.set('password', password);\r",
                      "\r",
                      "message = [\r",
                      "    \"Access token is not valid or has expired, you will need to login\",\r",
                      "    \"No authentication token specified in x-auth-token header\",\r",
                      "    \"User name must be between 4 and 30 characters\",\r",
                      "    \"Phone number should be between 8 and 20 digits\",\r",
                      "    \"Unauthorized Request\",\r",
                      "    \"Internal Error Server\",\r",
                      "    \"Profile updated successful\",\r",
                      "    \"User account created successfully\",\r",
                      "    \"Not Found\",\r",
                      "    \"Bad Request\",\r",
                      "    \"An account already exists with the same email address\"\r",
                      "];\r",
                      "\r",
                      "status = [400,401,404,409,500,200,201];\r",
                      "\r",
                      "if (jsonData.success === false) {\r",
                      "    pm.test(`**** E R R O R ***** ${jsonData.message}`, function(){\r",
                      "        pm.expect(jsonData.message).to.be.oneOf(message);\r",
                      "    });\r",
                      "\r",
                      "    pm.test(`Check the multiple error status code ${jsonData.status}`, function(){\r",
                      "        pm.expect(pm.response.code).to.be.oneOf(status);\r",
                      "    });\r",
                      "}\r",
                      "else {\r",
                      "    pm.test(`*** S U C C E S S *** ${jsonData.message}`, function(){\r",
                      "        pm.expect(jsonData.message).to.be.oneOf(message);\r",
                      "    });\r",
                      "\r",
                      "    pm.test(`Check the Status code ${jsonData.status}`, function(){\r",
                      "        pm.expect(pm.response.code).to.be.oneOf(status);\r",
                      "    });\r",
                      "}"
                    ],
                    "_lastExecutionId": "2fbfcb58-035a-4d0d-afa2-7fc9d5239e13"
                  }
                },
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "3483ef69-d6b6-4835-8746-973a3f7a159e",
                    "type": "text/javascript",
                    "exec": [
                      "\r",
                      "// // Define the incrementEmail function\r",
                      "// function incrementEmail(email) {\r",
                      "//     const match = email.match(/\\+a(\\d+)/);\r",
                      "\r",
                      "//     if (match) {\r",
                      "//         const currentNumber = parseInt(match[1]);\r",
                      "//         const nextNumber = currentNumber + 1;\r",
                      "//         const incrementedEmail = email.replace(/\\+a\\d+/, `+a${nextNumber}`);\r",
                      "//         return incrementedEmail;\r",
                      "//     }\r",
                      "\r",
                      "//     return email;\r",
                      "// }\r",
                      "\r",
                      "\r",
                      "// const originalEmail = pm.environment.get(\"email\");\r",
                      "\r",
                      "\r",
                      "// if (originalEmail) {\r",
                      "//     // Use the incrementEmail function to get the incremented email\r",
                      "//     const incrementedEmail = incrementEmail(originalEmail);\r",
                      "\r",
                      "//     // Set the incremented email back to the environment\r",
                      "//     pm.environment.set(\"email\", incrementedEmail);\r",
                      "\r",
                      "//     console.log(\"OriginalEmail:\", originalEmail);\r",
                      "//     console.log(\"IncrementedEmail:\", incrementedEmail);\r",
                      "// } else {\r",
                      "//     console.error(\"Email environment variable not found.\");\r",
                      "// }\r",
                      "\r",
                      "// console.log(pm.environment.get(\"email\"));\r",
                      "\r",
                      "\r",
                      "// -------------------------------------------------------------------\r",
                      "// Define the base part of the email address\r",
                      "const baseEmail = pm.environment.get(\"baseEmail\");\r",
                      "\r",
                      "// Generate a random number between min and max (inclusive)\r",
                      "function getRandomNumber(min, max) {\r",
                      "    return Math.floor(Math.random() * (max - min + 1)) + min;\r",
                      "}\r",
                      "\r",
                      "// Generate a random sequence like +a151, +a152, +a153, and so on\r",
                      "const randomSequence = `+a${getRandomNumber(1, 999)}`;\r",
                      "\r",
                      "// Combine the base and random sequence to create the random email address\r",
                      "const randomEmail = `${baseEmail}${randomSequence}@gmail.com`;\r",
                      "\r",
                      "// Set the random email address as an environment variable for your request\r",
                      "pm.environment.set('randomEmail', randomEmail);\r",
                      "\r",
                      "\r",
                      ""
                    ],
                    "_lastExecutionId": "f0df73d6-9875-49de-aaed-2ffb46745ff0"
                  }
                }
              ]
            },
            {
              "id": "1da8b1e7-3198-4c60-9c34-4a1e8b7e8b15",
              "name": "UserLogin",
              "request": {
                "url": {
                  "path": [
                    "users",
                    "login"
                  ],
                  "host": [
                    "{{exp_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n    \"email\":\"{{randomEmail}}\",\r\n    \"password\":\"{{password}}\"\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "cc8daf67-c0f2-4843-9223-e47d8fe754ec",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Check the status code is 200\", function(){\r",
                      "    pm.response.to.have.status(200);\r",
                      "});\r",
                      "\r",
                      "var jsonData = pm.response.json();\r",
                      "\r",
                      "pm.test(\"Check the success message\", function(){\r",
                      "    pm.expect(jsonData.success).to.eql(true);\r",
                      "});\r",
                      "\r",
                      "pm.test(\"Check the body message\", function(){\r",
                      "    pm.expect(jsonData.message).to.eql(\"Login successful\");\r",
                      "});\r",
                      "\r",
                      "pm.environment.set(\"exp_token\", jsonData.data.token);\r",
                      "\r",
                      "pm.test(\"Verify the values are not null\", function(){\r",
                      "    pm.expect(jsonData.data.id, \"Id is not a null\").to.not.be.null;\r",
                      "    pm.expect(jsonData.data.name, \"name is not a null\").to.not.be.null;\r",
                      "    pm.expect(jsonData.data.email, \"email is not a null\").to.not.be.null;\r",
                      "    pm.expect(jsonData.data.token, \"token is not a null\").to.not.be.null;\r",
                      "});\r",
                      "\r",
                      "pm.test(\"Check the response time\", function(){\r",
                      "    pm.expect(pm.response.responseTime).to.below(2000);\r",
                      "});\r",
                      "\r",
                      ""
                    ],
                    "_lastExecutionId": "4a906166-3676-408b-bc6f-6c09add962a5"
                  }
                },
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "98d0941e-d03e-4ab7-a7b0-84826ad7708a",
                    "type": "text/javascript",
                    "exec": [
                      ""
                    ],
                    "_lastExecutionId": "2f4a3493-6a43-4652-8c74-458390f9ecf9"
                  }
                }
              ]
            },
            {
              "id": "3f4af57c-fb9c-4a3c-8c2b-0f9b603b0679",
              "name": "GetProfile",
              "request": {
                "url": {
                  "path": [
                    "users",
                    "profile"
                  ],
                  "host": [
                    "{{exp_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET",
                "auth": {
                  "type": "apikey",
                  "apikey": [
                    {
                      "type": "string",
                      "value": "{{exp_token}}",
                      "key": "value"
                    },
                    {
                      "type": "string",
                      "value": "header",
                      "key": "in"
                    },
                    {
                      "type": "string",
                      "value": "x-auth-token",
                      "key": "key"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "56a6399c-71a1-414d-b876-9262a848415f",
                    "type": "text/javascript",
                    "exec": [
                      "\r",
                      "let jsonData = pm.response.json();\r",
                      "message = [\r",
                      "    \"Access token is not valid or has expired, you will need to login\",\r",
                      "    \"No authentication token specified in x-auth-token header\",\r",
                      "    \"Bad Request\",\r",
                      "    \"Unauthorized Request\",\r",
                      "    \"Internal Error Server\",\r",
                      "    \"Profile successful\",\r",
                      "    \"Not Found\"\r",
                      "]\r",
                      "\r",
                      "status = [400,401,404,500,200,201]\r",
                      "\r",
                      "if (jsonData.success === false) {\r",
                      "    pm.test(`**** E R R O R ***** ${jsonData.message}`, function(){\r",
                      "        // pm.expect(jsonData.message).to.eql(\"No authentication token specified in x-auth-token header\");\r",
                      "        pm.expect(jsonData.message).to.be.oneOf(message);\r",
                      "    });\r",
                      "\r",
                      "    pm.test(`Check the multiple error status code ${jsonData.status}`, function(){\r",
                      "        pm.expect(pm.response.code).to.be.oneOf(status);\r",
                      "    });\r",
                      "\r",
                      "\r",
                      "}\r",
                      "else {\r",
                      "    pm.test(`*** S U C C E S S *** ${jsonData.message}`, function(){\r",
                      "        // pm.expect(jsonData.message).to.equal(\"Profile successful\");\r",
                      "        pm.expect(jsonData.message).to.be.oneOf(message);\r",
                      "    });\r",
                      "\r",
                      "    pm.test(\"Check the response time\", function(){\r",
                      "    pm.expect(pm.response.responseTime).to.be.below(6000);\r",
                      "    });\r",
                      "\r",
                      "    pm.test(`Check the Status code ${jsonData.status}`, function(){\r",
                      "        pm.expect(pm.response.code).to.be.oneOf(status);\r",
                      "    });\r",
                      "\r",
                      "    pm.test(\"Body matches multiple string\",function(){\r",
                      "    pm.expect(pm.response.text()).to.include(\"id\");\r",
                      "    pm.expect(pm.response.text()).to.include(\"name\");\r",
                      "    pm.expect(pm.response.text()).to.include(\"email\");\r",
                      "});\r",
                      "\r",
                      "}\r",
                      "\r",
                      ""
                    ],
                    "_lastExecutionId": "55d3989d-79a3-476b-87c3-020290feeec2"
                  }
                },
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "5b6727ff-6213-4350-874c-dbaeeb0d0d03",
                    "type": "text/javascript",
                    "exec": [
                      ""
                    ],
                    "_lastExecutionId": "5e07b22a-eb37-441e-b764-c112f7fde3f7"
                  }
                }
              ],
              "protocolProfileBehavior": {
                "disabledSystemHeaders": {}
              }
            },
            {
              "id": "ee9d7916-0288-4df6-a4d2-05ed9c78c4f1",
              "name": "UpdateProfile",
              "request": {
                "url": {
                  "path": [
                    "users",
                    "profile"
                  ],
                  "host": [
                    "{{exp_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "PATCH",
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n    \"name\":\"{{name}}\",\r\n    \"phone\":\"{{random_number}}\",\r\n    \"company\":\"{{$randomCompanyName}}\"\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "auth": {
                  "type": "apikey",
                  "apikey": [
                    {
                      "type": "string",
                      "value": "{{exp_token}}",
                      "key": "value"
                    },
                    {
                      "type": "string",
                      "value": "header",
                      "key": "in"
                    },
                    {
                      "type": "string",
                      "value": "x-auth-token",
                      "key": "key"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "6ab7e932-eb9b-4edc-9edc-b8d42e4162ad",
                    "type": "text/javascript",
                    "exec": [
                      "let jsonData = pm.response.json();\r",
                      "message = [\r",
                      "    \"Access token is not valid or has expired, you will need to login\",\r",
                      "    \"No authentication token specified in x-auth-token header\",\r",
                      "    \"User name must be between 4 and 30 characters\",\r",
                      "    \"Phone number should be between 8 and 20 digits\",\r",
                      "    \"Unauthorized Request\",\r",
                      "    \"Internal Error Server\",\r",
                      "    \"Profile updated successful\",\r",
                      "    \"Not Found\",\r",
                      "    \"Bad Request\"\r",
                      "]\r",
                      "\r",
                      "status = [400,401,404,500,200,201]\r",
                      "// var jsonData1 = pm.response.json();\r",
                      "// pm.environment.set(\"phoneNumber\", jsonData1.data.phone);\r",
                      "\r",
                      "if (jsonData.success === false) {\r",
                      "    pm.test(`**** E R R O R ***** ${jsonData.message}`, function(){\r",
                      "        // pm.expect(jsonData.message).to.eql(\"No authentication token specified in x-auth-token header\");\r",
                      "        pm.expect(jsonData.message).to.be.oneOf(message);\r",
                      "    });\r",
                      "\r",
                      "    pm.test(`Check the multiple error status code ${jsonData.status}`, function(){\r",
                      "        pm.expect(pm.response.code).to.be.oneOf(status);\r",
                      "    });\r",
                      "\r",
                      "\r",
                      "}\r",
                      "else {\r",
                      "    pm.test(`*** S U C C E S S *** ${jsonData.message}`, function(){\r",
                      "        // pm.expect(jsonData.message).to.equal(\"Profile successful\");\r",
                      "        pm.expect(jsonData.message).to.be.oneOf(message);\r",
                      "    });\r",
                      "\r",
                      "    pm.test(\"Check the response time\", function(){\r",
                      "    pm.expect(pm.response.responseTime).to.be.below(6000);\r",
                      "    });\r",
                      "\r",
                      "    pm.test(`Check the Status code ${jsonData.status}`, function(){\r",
                      "        pm.expect(pm.response.code).to.be.oneOf(status);\r",
                      "    });\r",
                      "\r",
                      "    pm.test(\"Body matches multiple string\",function(){\r",
                      "    pm.expect(pm.response.text()).to.include(\"id\");\r",
                      "    pm.expect(pm.response.text()).to.include(\"name\");\r",
                      "    pm.expect(pm.response.text()).to.include(\"email\");\r",
                      "});\r",
                      "\r",
                      "}\r",
                      "\r",
                      ""
                    ],
                    "_lastExecutionId": "bf535ed4-ea27-433b-95ed-0405878d634c"
                  }
                },
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "1dd9ce14-2fea-48d5-b628-446e36acb961",
                    "type": "text/javascript",
                    "exec": [
                      "pm.environment.set(\"random_number\",_.random(1000000000,9999999999));\r",
                      "\r",
                      "\r",
                      ""
                    ],
                    "_lastExecutionId": "81adb337-1695-4fed-b265-391f869dd222"
                  }
                }
              ]
            },
            {
              "id": "03c5b9ed-2c86-4338-932a-d93a799c2d8d",
              "name": "ForgotPassword",
              "request": {
                "url": {
                  "path": [
                    "users",
                    "forgot-password"
                  ],
                  "host": [
                    "{{exp_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n    \"email\":\"{{randomEmail}}\"\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "auth": {
                  "type": "apikey",
                  "apikey": [
                    {
                      "type": "string",
                      "value": "{{exp_token}}",
                      "key": "value"
                    },
                    {
                      "type": "string",
                      "value": "header",
                      "key": "in"
                    },
                    {
                      "type": "string",
                      "value": "x-auth-token",
                      "key": "key"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "72c44319-e1e0-49ac-91f7-f3f0cd439f93",
                    "type": "text/javascript",
                    "exec": [
                      "let jsonData = pm.response.json();\r",
                      "let jsonEmail = JSON.parse(pm.request.body.raw).email;\r",
                      "\r",
                      "message = [\r",
                      "    \"Access token is not valid or has expired, you will need to login\",\r",
                      "    \"No authentication token specified in x-auth-token header\",\r",
                      "    \"Unauthorized Request\",\r",
                      "    \"Internal Error Server\",\r",
                      "    `Password reset link successfully sent to ${pm.environment.get(\"email\")}. Please verify by clicking on the given link`,\r",
                      "    \"Not Found\",\r",
                      "    \"Bad Request\",\r",
                      "    \"A valid email address is required\"\r",
                      "]\r",
                      "\r",
                      "status = [400,401,404,500,200,201]\r",
                      "// var jsonData1 = pm.response.json();\r",
                      "// pm.environment.set(\"phoneNumber\", jsonData1.data.phone);\r",
                      "\r",
                      "if (jsonData.success === false) {\r",
                      "    pm.test(`**** E R R O R ***** ${jsonData.message}`, function(){\r",
                      "        // pm.expect(jsonData.message).to.eql(\"No authentication token specified in x-auth-token header\");\r",
                      "        pm.expect(jsonData.message).to.be.oneOf(message);\r",
                      "    });\r",
                      "\r",
                      "    pm.test(`Check the multiple error status code ${jsonData.status}`, function(){\r",
                      "        pm.expect(pm.response.code).to.be.oneOf(status);\r",
                      "    });\r",
                      "\r",
                      "\r",
                      "}\r",
                      "else {\r",
                      "    pm.test(`*** S U C C E S S *** ${jsonData.message}`, function(){\r",
                      "        // pm.expect(jsonData.message).to.equal(\"Profile successful\");\r",
                      "        pm.expect(jsonData.message).to.be.oneOf(message);\r",
                      "    });\r",
                      "\r",
                      "    pm.test(\"Check the response time\", function(){\r",
                      "    pm.expect(pm.response.responseTime).to.be.below(6000);\r",
                      "    });\r",
                      "\r",
                      "    pm.test(`Check the Status code ${jsonData.status}`, function(){\r",
                      "        pm.expect(pm.response.code).to.be.oneOf(status);\r",
                      "    });\r",
                      "\r",
                      "    pm.test(\"Body matches multiple string\",function(){\r",
                      "    pm.expect(pm.response.text()).to.include(\"message\");\r",
                      "});\r",
                      "\r",
                      "}\r",
                      "\r",
                      ""
                    ],
                    "_lastExecutionId": "a3803636-b917-4048-8873-b62ae1f022d6"
                  }
                },
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "6236deb0-9668-46d8-bb96-97cc86eeb0fa",
                    "type": "text/javascript",
                    "exec": [
                      ""
                    ],
                    "_lastExecutionId": "148f797c-8661-4a45-97c4-527fe81fce77"
                  }
                }
              ]
            },
            {
              "id": "eea8198b-64d4-43e4-b554-aefaae2516cd",
              "name": "GetEmailMessage",
              "request": {
                "url": {
                  "protocol": "https",
                  "path": [
                    "gmail",
                    "v1",
                    "users",
                    "{{user_email_id}}",
                    "messages",
                    ""
                  ],
                  "host": [
                    "gmail",
                    "googleapis",
                    "com"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET",
                "auth": {
                  "type": "oauth2",
                  "oauth2": [
                    {
                      "type": "boolean",
                      "value": false,
                      "key": "useBrowser"
                    },
                    {
                      "type": "string",
                      "value": "{{Scope}}",
                      "key": "scope"
                    },
                    {
                      "type": "string",
                      "value": "{{Client_Secret}}",
                      "key": "clientSecret"
                    },
                    {
                      "type": "string",
                      "value": "{{Client_ID}}",
                      "key": "clientId"
                    },
                    {
                      "type": "string",
                      "value": "{{Access_Token_URL}}",
                      "key": "accessTokenUrl"
                    },
                    {
                      "type": "string",
                      "value": "{{Auth_URL}}",
                      "key": "authUrl"
                    },
                    {
                      "type": "string",
                      "value": "{{Callback_URL}}",
                      "key": "redirect_uri"
                    },
                    {
                      "type": "string",
                      "value": "authorization_code",
                      "key": "grant_type"
                    },
                    {
                      "type": "string",
                      "value": "email_token",
                      "key": "tokenName"
                    },
                    {
                      "type": "string",
                      "value": "header",
                      "key": "addTokenTo"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "705020a4-73b3-44df-86ff-a5984e094d10",
                    "type": "text/javascript",
                    "exec": [
                      "var jsonData = pm.response.json();\r",
                      "pm.environment.set(\"messageId\", jsonData.messages[0].id);\r",
                      "\r",
                      ""
                    ],
                    "_lastExecutionId": "eeef6f2d-f5fd-4a00-be9c-25555c6fa5bc"
                  }
                },
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "cdf7837a-853f-442c-8e05-996129213a95",
                    "type": "text/javascript",
                    "exec": [
                      "var newRefreshToken = pm.environment.get(\"access_token\");\r",
                      "\r",
                      "pm.environment.set(\"refresh_token\", newRefreshToken);"
                    ],
                    "_lastExecutionId": "94790536-1730-42ee-886b-f2872e8a5fee"
                  }
                }
              ]
            },
            {
              "id": "f053ddc8-a8a6-4796-a23f-c89737b34582",
              "name": "GetMessageByID",
              "request": {
                "url": {
                  "protocol": "https",
                  "path": [
                    "gmail",
                    "v1",
                    "users",
                    "{{user_email_id}}",
                    "messages",
                    "{{messageId}}"
                  ],
                  "host": [
                    "gmail",
                    "googleapis",
                    "com"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "multipart/mixed"
                  }
                ],
                "method": "GET",
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "{{access_token}}",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "d94857cd-ae23-40c6-ae38-5f7aaca3e833",
                    "type": "text/javascript",
                    "exec": [
                      "\r",
                      "const response = pm.response.json();\r",
                      "\r",
                      "pm.environment.set(\"message_Body\", response.payload.body.data);\r",
                      "\r",
                      "var atob = require('atob');\r",
                      "\r",
                      "\r",
                      "var base64Data = pm.environment.get(\"message_Body\");\r",
                      "var decodedData = atob(base64Data);\r",
                      "postman.setEnvironmentVariable(\"rest_password\",decodedData);\r",
                      "var tokenRegex = /Reset password link: (https:\\/\\/practice\\.expandtesting\\.com\\/notes\\/app\\/reset-password\\/([\\w\\d]+))[^ ]+/;\r",
                      "var tokenMatch = decodedData.match(tokenRegex);\r",
                      "if (tokenMatch && tokenMatch[2]) {\r",
                      "    var resetPasswordToken = tokenMatch[2];\r",
                      "    \r",
                      "    // Set the reset password link as a Postman environment variable for later use\r",
                      "    pm.environment.set(\"resetPasswordToken\", resetPasswordToken);\r",
                      "    \r",
                      "    // Log the reset password link\r",
                      "    console.log(\"Reset Password Token: \" + resetPasswordToken);\r",
                      "} else {\r",
                      "    console.log(\"Reset password token not found in the response.\");\r",
                      "}\r",
                      "console.log(decodedData);\r",
                      "\r",
                      "\r",
                      "\r",
                      "\r",
                      "\r",
                      "\r",
                      "\r",
                      "\r",
                      "\r",
                      "\r",
                      "\r",
                      ""
                    ],
                    "_lastExecutionId": "4816be40-7f3a-489e-b23c-14c698a58ddc"
                  }
                },
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "8349aa22-c992-434e-9e35-e5fc8ef4a245",
                    "type": "text/javascript",
                    "exec": [
                      ""
                    ],
                    "_lastExecutionId": "e5ddbcb0-9830-4e57-9232-851987938e7d"
                  }
                }
              ]
            },
            {
              "id": "8d884a10-0abd-48de-9b8a-47bfc7ff13cd",
              "name": "verify-reset-password-token",
              "request": {
                "url": {
                  "path": [
                    "users",
                    "verify-reset-password-token"
                  ],
                  "host": [
                    "{{exp_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "accept",
                    "value": "application/json"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/x-www-form-urlencoded"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "urlencoded",
                  "urlencoded": [
                    {
                      "key": "token",
                      "value": "{{resetPasswordToken}}"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "799e647c-efdd-4528-bf8c-ec8d1e1a4b55",
                    "type": "text/javascript",
                    "exec": [
                      "let jsonData = pm.response.json();\r",
                      "\r",
                      "message = [\r",
                      "    \"The provided password reset token is valid\",\r",
                      "    \"Bad Request\",\r",
                      "    \"Internal Error Server\",\r",
                      "    \"The provided password reset token is invalid or has expired\"\r",
                      "]\r",
                      "\r",
                      "status = [200,400,401,500]\r",
                      "\r",
                      "if (jsonData.success === false) {\r",
                      "    pm.test(`**** E R R O R ***** ${jsonData.message}`, function(){\r",
                      "        // pm.expect(jsonData.message).to.eql(\"No authentication token specified in x-auth-token header\");\r",
                      "        pm.expect(jsonData.message).to.be.oneOf(message);\r",
                      "    });\r",
                      "\r",
                      "    pm.test(`Check the multiple error status code ${jsonData.status}`, function(){\r",
                      "        pm.expect(pm.response.code).to.be.oneOf(status);\r",
                      "    });\r",
                      "\r",
                      "\r",
                      "}\r",
                      "else {\r",
                      "    pm.test(`*** S U C C E S S *** ${jsonData.message}`, function(){\r",
                      "        // pm.expect(jsonData.message).to.equal(\"Profile successful\");\r",
                      "        pm.expect(jsonData.message).to.be.oneOf(message);\r",
                      "    });\r",
                      "\r",
                      "    pm.test(\"Check the response time\", function(){\r",
                      "    pm.expect(pm.response.responseTime).to.be.below(6000);\r",
                      "    });\r",
                      "\r",
                      "    pm.test(`Check the Status code ${jsonData.status}`, function(){\r",
                      "        pm.expect(pm.response.code).to.be.oneOf(status);\r",
                      "    });\r",
                      "\r",
                      "    pm.test(\"Body matches multiple string\",function(){\r",
                      "    pm.expect(pm.response.text()).to.include(\"message\");\r",
                      "});\r",
                      "\r",
                      "}\r",
                      "\r",
                      ""
                    ],
                    "_lastExecutionId": "c1d6d515-485d-45cb-ab2b-15662e3830f7"
                  }
                },
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "46fb041c-0790-4ccb-a117-d6dcbb44aa15",
                    "type": "text/javascript",
                    "exec": [
                      ""
                    ],
                    "_lastExecutionId": "48a955fd-f392-4b00-9034-2a273d9fea6d"
                  }
                }
              ]
            },
            {
              "id": "740f7a4b-9db6-4b38-a333-0ad712a2b2a2",
              "name": "reset-password",
              "request": {
                "url": {
                  "protocol": "https",
                  "path": [
                    "notes",
                    "api",
                    "users",
                    "reset-password"
                  ],
                  "host": [
                    "practice",
                    "expandtesting",
                    "com"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "accept",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n    \"token\":\"{{resetPasswordToken}}\",\r\n    \"newPassword\":\"{{$randomPassword}}\"\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "7cdc8324-5612-42e4-8f85-49037412238b",
                    "type": "text/javascript",
                    "exec": [
                      "let jsonData = pm.response.json();\r",
                      "\r",
                      "let newPassword = JSON.parse(pm.request.body.raw).newPassword;\r",
                      "pm.environment.set('password', newPassword);\r",
                      "\r",
                      "\r",
                      "message = [\r",
                      "    \"The password has been successfully reset\",\r",
                      "    \"Token must be between 64 characters\",\r",
                      "    \"Bad Request\",\r",
                      "    \"The password was successfully updated\",\r",
                      "    \"Internal Error Server\",\r",
                      "    \"New password must be between 6 and 30 characters\",\r",
                      "    \"The password reset token is invalid or has expired\"\r",
                      "]\r",
                      "\r",
                      "status = [200,400,401,500]\r",
                      "\r",
                      "if (jsonData.success === false) {\r",
                      "    pm.test(`**** E R R O R ***** ${jsonData.message}`, function(){\r",
                      "        // pm.expect(jsonData.message).to.eql(\"No authentication token specified in x-auth-token header\");\r",
                      "        pm.expect(jsonData.message).to.be.oneOf(message);\r",
                      "    });\r",
                      "\r",
                      "    pm.test(`Check the multiple error status code ${jsonData.status}`, function(){\r",
                      "        pm.expect(pm.response.code).to.be.oneOf(status);\r",
                      "    });\r",
                      "\r",
                      "\r",
                      "}\r",
                      "else {\r",
                      "    pm.test(`*** S U C C E S S *** ${jsonData.message}`, function(){\r",
                      "        // pm.expect(jsonData.message).to.equal(\"Profile successful\");\r",
                      "        pm.expect(jsonData.message).to.be.oneOf(message);\r",
                      "    });\r",
                      "\r",
                      "    pm.test(\"Check the response time\", function(){\r",
                      "    pm.expect(pm.response.responseTime).to.be.below(6000);\r",
                      "    });\r",
                      "\r",
                      "    pm.test(`Check the Status code ${jsonData.status}`, function(){\r",
                      "        pm.expect(pm.response.code).to.be.oneOf(status);\r",
                      "    });\r",
                      "\r",
                      "    pm.test(\"Body matches multiple string\",function(){\r",
                      "    pm.expect(pm.response.text()).to.include(\"message\");\r",
                      "});\r",
                      "\r",
                      "}\r",
                      "\r",
                      "\r",
                      ""
                    ],
                    "_lastExecutionId": "5d234639-2098-4725-8401-094ce8fa851b"
                  }
                },
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "1268a1ec-48a3-4dfd-8fc8-3c14d0fa7f28",
                    "type": "text/javascript",
                    "exec": [
                      ""
                    ],
                    "_lastExecutionId": "3e5db1d1-0c8c-4a29-8797-f14a01a4bedc"
                  }
                }
              ]
            },
            {
              "id": "93821c3b-e028-4eda-a749-05d87d7e6a94",
              "name": "change-password",
              "request": {
                "url": {
                  "path": [
                    "users",
                    "change-password"
                  ],
                  "host": [
                    "{{exp_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "accept",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n    \"currentPassword\":\"{{password}}\",\r\n    \"newPassword\":\"{{$randomPassword}}\"\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "auth": {
                  "type": "apikey",
                  "apikey": [
                    {
                      "type": "string",
                      "value": "{{exp_token}}",
                      "key": "value"
                    },
                    {
                      "type": "string",
                      "value": "x-auth-token",
                      "key": "key"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "3eca22f1-7d4a-4832-8b68-54badb876aa6",
                    "type": "text/javascript",
                    "exec": [
                      "pm.environment.get(\"password\");\r",
                      "\r",
                      "let newPassword = JSON.parse(pm.request.body.raw).newPassword;\r",
                      "pm.environment.set('password', newPassword);\r",
                      "\r",
                      "let jsonData = pm.response.json();\r",
                      "message = [\r",
                      "    \"The password has been successfully reset\",\r",
                      "    \"Token must be between 64 characters\",\r",
                      "    \"Bad Request\",\r",
                      "    \"The password was successfully updated\",\r",
                      "    \"Internal Error Server\",\r",
                      "    \"New password must be between 6 and 30 characters\",\r",
                      "    \"The password reset token is invalid or has expired\"\r",
                      "]\r",
                      "\r",
                      "status = [200,400,401,500]\r",
                      "\r",
                      "if (jsonData.success === false) {\r",
                      "    pm.test(`**** E R R O R ***** ${jsonData.message}`, function(){\r",
                      "        // pm.expect(jsonData.message).to.eql(\"No authentication token specified in x-auth-token header\");\r",
                      "        pm.expect(jsonData.message).to.be.oneOf(message);\r",
                      "    });\r",
                      "\r",
                      "    pm.test(`Check the multiple error status code ${jsonData.status}`, function(){\r",
                      "        pm.expect(pm.response.code).to.be.oneOf(status);\r",
                      "    });\r",
                      "\r",
                      "\r",
                      "}\r",
                      "else {\r",
                      "    pm.test(`*** S U C C E S S *** ${jsonData.message}`, function(){\r",
                      "        // pm.expect(jsonData.message).to.equal(\"Profile successful\");\r",
                      "        pm.expect(jsonData.message).to.be.oneOf(message);\r",
                      "    });\r",
                      "\r",
                      "    pm.test(\"Check the response time\", function(){\r",
                      "    pm.expect(pm.response.responseTime).to.be.below(6000);\r",
                      "    });\r",
                      "\r",
                      "    pm.test(`Check the Status code ${jsonData.status}`, function(){\r",
                      "        pm.expect(pm.response.code).to.be.oneOf(status);\r",
                      "    });\r",
                      "\r",
                      "    pm.test(\"Body matches multiple string\",function(){\r",
                      "    pm.expect(pm.response.text()).to.include(\"message\");\r",
                      "});\r",
                      "\r",
                      "}\r",
                      ""
                    ],
                    "_lastExecutionId": "64be3638-86ca-4200-b966-7a137b03eb2e"
                  }
                },
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "aa473681-09fc-4673-a2fe-7012cf4e42e9",
                    "type": "text/javascript",
                    "exec": [
                      "console.log(pm.environment.get(\"password\"));\r",
                      "\r",
                      "\r",
                      "\r",
                      ""
                    ],
                    "_lastExecutionId": "fb6fc291-ccb6-46ad-9bb8-0e4bf2cf736d"
                  }
                }
              ]
            },
            {
              "id": "f4c8e78d-5700-43a2-8e20-cb1a0de26ce9",
              "name": "UserLogout",
              "request": {
                "url": {
                  "path": [
                    "users",
                    "logout"
                  ],
                  "host": [
                    "{{exp_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "accept",
                    "value": "application/json"
                  }
                ],
                "method": "DELETE",
                "auth": {
                  "type": "apikey",
                  "apikey": [
                    {
                      "type": "string",
                      "value": "{{exp_token}}",
                      "key": "value"
                    },
                    {
                      "type": "string",
                      "value": "x-auth-token",
                      "key": "key"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "43a38bb6-0063-463b-9a7b-ea0674d209fe",
                    "type": "text/javascript",
                    "exec": [
                      "let jsonData = pm.response.json();\r",
                      "message = [\r",
                      "    \"User has been successfully logged out\",\r",
                      "    \"Token must be between 64 characters\",\r",
                      "    \"Bad Request\",\r",
                      "    \"Access token is not valid or has expired, you will need to login\",\r",
                      "    \"No authentication token specified in x-auth-token header\",\r",
                      "    \"Internal Error Server\",\r",
                      "    \"Successful Request\",\r",
                      "    \"Unauthorized Request\"\r",
                      "]\r",
                      "\r",
                      "status = [200,400,401,500]\r",
                      "\r",
                      "if (jsonData.success === false) {\r",
                      "    pm.test(`**** E R R O R ***** ${jsonData.message}`, function(){\r",
                      "        // pm.expect(jsonData.message).to.eql(\"No authentication token specified in x-auth-token header\");\r",
                      "        pm.expect(jsonData.message).to.be.oneOf(message);\r",
                      "    });\r",
                      "\r",
                      "    pm.test(`Check the multiple error status code ${jsonData.status}`, function(){\r",
                      "        pm.expect(pm.response.code).to.be.oneOf(status);\r",
                      "    });\r",
                      "\r",
                      "\r",
                      "}\r",
                      "else {\r",
                      "    pm.test(`*** S U C C E S S *** ${jsonData.message}`, function(){\r",
                      "        // pm.expect(jsonData.message).to.equal(\"Profile successful\");\r",
                      "        pm.expect(jsonData.message).to.be.oneOf(message);\r",
                      "    });\r",
                      "\r",
                      "    pm.test(\"Check the response time\", function(){\r",
                      "    pm.expect(pm.response.responseTime).to.be.below(6000);\r",
                      "    });\r",
                      "\r",
                      "    pm.test(`Check the Status code ${jsonData.status}`, function(){\r",
                      "        pm.expect(pm.response.code).to.be.oneOf(status);\r",
                      "    });\r",
                      "\r",
                      "    pm.test(\"Body matches multiple string\",function(){\r",
                      "    pm.expect(pm.response.text()).to.include(\"message\");\r",
                      "});\r",
                      "\r",
                      "}\r",
                      "\r",
                      "postman.setNextRequest(null);"
                    ],
                    "_lastExecutionId": "c7d982d4-a8dc-460f-a106-6e0c01643e82"
                  }
                },
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "e8ae662d-a080-4bf5-a817-754113435b5e",
                    "type": "text/javascript",
                    "exec": [
                      ""
                    ],
                    "_lastExecutionId": "0b0d404e-4117-40fc-9982-a95619506052"
                  }
                }
              ]
            }
          ],
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "3380df96-f386-44be-9dc8-eb145a929d13",
                "type": "text/javascript",
                "exec": [
                  ""
                ],
                "_lastExecutionId": "c2613397-fddf-4d46-99b6-9ffc9166e0a8"
              }
            },
            {
              "listen": "test",
              "script": {
                "id": "18c4e0bb-9477-4e5f-b627-d550e666c7d3",
                "type": "text/javascript",
                "exec": [
                  ""
                ],
                "_lastExecutionId": "78225eb1-cbe5-408b-978b-a1bf2d2b693c"
              }
            }
          ],
          "variable": [
            {
              "type": "string",
              "value": "https://practice.expandtesting.com/notes/api",
              "key": "exp_url"
            }
          ],
          "info": {
            "_postman_id": "723ea9c3-0635-4605-b90c-d6d9e9835d8c",
            "name": "expandtesting",
            "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
          }
        },
        "cursor": {
          "ref": "f70c212e-54ae-4c80-84bf-295f5d6f7f9a",
          "length": 12,
          "cycles": 1,
          "position": 1,
          "iteration": 0,
          "httpRequestId": "862306ad-af84-4909-a2fc-5aa4c4d48310",
          "scriptId": "4f0c3c3d-4171-4bea-b8a8-3fd567809f0d"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 0,
          "test": "Check the status code is 200",
          "message": "expected response to have status code 200 but got 400",
          "stack": "AssertionError: expected response to have status code 200 but got 400\n   at Object.eval sandbox-script.js:1:3)",
          "checksum": "bb78e1e28494e6ce6a1f9541c5d3b962",
          "id": "e3e566e5-1bb0-49a5-9fc7-614e99d8384c",
          "timestamp": 1698733439339,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 1,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 3,
              "native": false
            }
          ]
        },
        "at": "assertion:0 in test-script",
        "source": {
          "id": "1da8b1e7-3198-4c60-9c34-4a1e8b7e8b15",
          "name": "UserLogin",
          "request": {
            "url": {
              "path": [
                "users",
                "login"
              ],
              "host": [
                "{{exp_url}}"
              ],
              "query": [],
              "variable": []
            },
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\r\n    \"email\":\"{{randomEmail}}\",\r\n    \"password\":\"{{password}}\"\r\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "cc8daf67-c0f2-4843-9223-e47d8fe754ec",
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Check the status code is 200\", function(){\r",
                  "    pm.response.to.have.status(200);\r",
                  "});\r",
                  "\r",
                  "var jsonData = pm.response.json();\r",
                  "\r",
                  "pm.test(\"Check the success message\", function(){\r",
                  "    pm.expect(jsonData.success).to.eql(true);\r",
                  "});\r",
                  "\r",
                  "pm.test(\"Check the body message\", function(){\r",
                  "    pm.expect(jsonData.message).to.eql(\"Login successful\");\r",
                  "});\r",
                  "\r",
                  "pm.environment.set(\"exp_token\", jsonData.data.token);\r",
                  "\r",
                  "pm.test(\"Verify the values are not null\", function(){\r",
                  "    pm.expect(jsonData.data.id, \"Id is not a null\").to.not.be.null;\r",
                  "    pm.expect(jsonData.data.name, \"name is not a null\").to.not.be.null;\r",
                  "    pm.expect(jsonData.data.email, \"email is not a null\").to.not.be.null;\r",
                  "    pm.expect(jsonData.data.token, \"token is not a null\").to.not.be.null;\r",
                  "});\r",
                  "\r",
                  "pm.test(\"Check the response time\", function(){\r",
                  "    pm.expect(pm.response.responseTime).to.below(2000);\r",
                  "});\r",
                  "\r",
                  ""
                ],
                "_lastExecutionId": "4a906166-3676-408b-bc6f-6c09add962a5"
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "id": "98d0941e-d03e-4ab7-a7b0-84826ad7708a",
                "type": "text/javascript",
                "exec": [
                  ""
                ],
                "_lastExecutionId": "2f4a3493-6a43-4652-8c74-458390f9ecf9"
              }
            }
          ]
        },
        "parent": {
          "_": {
            "postman_id": "723ea9c3-0635-4605-b90c-d6d9e9835d8c",
            "exporter_id": "13852941",
            "collection_link": "https://galactic-astronaut-894425.postman.co/workspace/b6dafb4f-3507-4e58-a32d-dd31bf6ab148/collection/13852941-723ea9c3-0635-4605-b90c-d6d9e9835d8c?action=share&source=collection_link&creator=13852941"
          },
          "item": [
            {
              "id": "90407c19-d06c-4337-abb9-4dfc2fa17fc8",
              "name": "health_check",
              "request": {
                "url": {
                  "path": [
                    "health-check"
                  ],
                  "host": [
                    "{{exp_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "b075fb8f-9483-4909-a4a4-cf6344c6642b",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Check the Status code 200\", function(){\r",
                      "    pm.response.to.have.status(200);\r",
                      "});\r",
                      "\r",
                      "var jsonData = pm.response.json();\r",
                      "\r",
                      "pm.test(\"Check the success code in body\", function(){\r",
                      "    pm.expect(jsonData.success).to.eql(true);\r",
                      "});\r",
                      "\r",
                      "pm.test(\"Check the Status code in body\", function(){\r",
                      "    pm.expect(jsonData.status).to.eql(200);\r",
                      "});\r",
                      "\r",
                      "pm.test(\"Check the message in body\", function(){\r",
                      "    pm.expect(jsonData.message).to.eql(\"Notes API is Running\");\r",
                      "});\r",
                      "\r",
                      "\r",
                      ""
                    ],
                    "_lastExecutionId": "dcf22f24-f95a-4d61-981a-68f2474c0b1d"
                  }
                },
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "15079d7d-2fc3-468b-b923-1fd697b2156e",
                    "type": "text/javascript",
                    "exec": [
                      ""
                    ],
                    "_lastExecutionId": "a57965c9-dfeb-425b-a87b-14b41a981af7"
                  }
                }
              ]
            },
            {
              "id": "d3b70abb-4c44-4d96-b946-e8ef2e19907f",
              "name": "RegisterUser",
              "request": {
                "url": {
                  "path": [
                    "users",
                    "register"
                  ],
                  "host": [
                    "{{exp_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n    \"name\":\"{{$randomFullName}}\",\r\n    \"email\":\"{{randomEmail}}\",\r\n    \"password\":\"{{$randomPassword}}\"\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "4f0c3c3d-4171-4bea-b8a8-3fd567809f0d",
                    "type": "text/javascript",
                    "exec": [
                      "var jsonData = pm.response.json();\r",
                      "\r",
                      "pm.test(\"Check the success msg is true in body?\", function(){\r",
                      "    pm.expect(jsonData.success).to.eql(true);\r",
                      "});\r",
                      "\r",
                      "pm.test(\"Check the body message\", function(){\r",
                      "    pm.expect(jsonData.message).to.eql(\"User account created successfully\");\r",
                      "});\r",
                      "\r",
                      "pm.test(\"Verify the values are not null\", function(){\r",
                      "    pm.expect(jsonData.data.id, \"Id is not null\").to.not.be.null;\r",
                      "    pm.expect(jsonData.data.name, \"name is not null\").to.not.be.null;\r",
                      "    pm.expect(jsonData.data.email, \"email is not null\").to.not.be.null;\r",
                      "});\r",
                      "\r",
                      "pm.test(\"response property matching an environment variable\", function(){\r",
                      "    pm.expect(jsonData.name).to.eql(pm.environment.get(\"name\"));\r",
                      "});\r",
                      "\r",
                      "pm.test(\"Check the response time\", function(){\r",
                      "    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
                      "});\r",
                      "\r",
                      "pm.environment.set(\"id\", jsonData.data.id);\r",
                      "pm.environment.set(\"name\", jsonData.data.name);\r",
                      "\r",
                      "let password = JSON.parse(pm.request.body.raw).password;\r",
                      "pm.environment.set('password', password);\r",
                      "\r",
                      "message = [\r",
                      "    \"Access token is not valid or has expired, you will need to login\",\r",
                      "    \"No authentication token specified in x-auth-token header\",\r",
                      "    \"User name must be between 4 and 30 characters\",\r",
                      "    \"Phone number should be between 8 and 20 digits\",\r",
                      "    \"Unauthorized Request\",\r",
                      "    \"Internal Error Server\",\r",
                      "    \"Profile updated successful\",\r",
                      "    \"User account created successfully\",\r",
                      "    \"Not Found\",\r",
                      "    \"Bad Request\",\r",
                      "    \"An account already exists with the same email address\"\r",
                      "];\r",
                      "\r",
                      "status = [400,401,404,409,500,200,201];\r",
                      "\r",
                      "if (jsonData.success === false) {\r",
                      "    pm.test(`**** E R R O R ***** ${jsonData.message}`, function(){\r",
                      "        pm.expect(jsonData.message).to.be.oneOf(message);\r",
                      "    });\r",
                      "\r",
                      "    pm.test(`Check the multiple error status code ${jsonData.status}`, function(){\r",
                      "        pm.expect(pm.response.code).to.be.oneOf(status);\r",
                      "    });\r",
                      "}\r",
                      "else {\r",
                      "    pm.test(`*** S U C C E S S *** ${jsonData.message}`, function(){\r",
                      "        pm.expect(jsonData.message).to.be.oneOf(message);\r",
                      "    });\r",
                      "\r",
                      "    pm.test(`Check the Status code ${jsonData.status}`, function(){\r",
                      "        pm.expect(pm.response.code).to.be.oneOf(status);\r",
                      "    });\r",
                      "}"
                    ],
                    "_lastExecutionId": "2fbfcb58-035a-4d0d-afa2-7fc9d5239e13"
                  }
                },
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "3483ef69-d6b6-4835-8746-973a3f7a159e",
                    "type": "text/javascript",
                    "exec": [
                      "\r",
                      "// // Define the incrementEmail function\r",
                      "// function incrementEmail(email) {\r",
                      "//     const match = email.match(/\\+a(\\d+)/);\r",
                      "\r",
                      "//     if (match) {\r",
                      "//         const currentNumber = parseInt(match[1]);\r",
                      "//         const nextNumber = currentNumber + 1;\r",
                      "//         const incrementedEmail = email.replace(/\\+a\\d+/, `+a${nextNumber}`);\r",
                      "//         return incrementedEmail;\r",
                      "//     }\r",
                      "\r",
                      "//     return email;\r",
                      "// }\r",
                      "\r",
                      "\r",
                      "// const originalEmail = pm.environment.get(\"email\");\r",
                      "\r",
                      "\r",
                      "// if (originalEmail) {\r",
                      "//     // Use the incrementEmail function to get the incremented email\r",
                      "//     const incrementedEmail = incrementEmail(originalEmail);\r",
                      "\r",
                      "//     // Set the incremented email back to the environment\r",
                      "//     pm.environment.set(\"email\", incrementedEmail);\r",
                      "\r",
                      "//     console.log(\"OriginalEmail:\", originalEmail);\r",
                      "//     console.log(\"IncrementedEmail:\", incrementedEmail);\r",
                      "// } else {\r",
                      "//     console.error(\"Email environment variable not found.\");\r",
                      "// }\r",
                      "\r",
                      "// console.log(pm.environment.get(\"email\"));\r",
                      "\r",
                      "\r",
                      "// -------------------------------------------------------------------\r",
                      "// Define the base part of the email address\r",
                      "const baseEmail = pm.environment.get(\"baseEmail\");\r",
                      "\r",
                      "// Generate a random number between min and max (inclusive)\r",
                      "function getRandomNumber(min, max) {\r",
                      "    return Math.floor(Math.random() * (max - min + 1)) + min;\r",
                      "}\r",
                      "\r",
                      "// Generate a random sequence like +a151, +a152, +a153, and so on\r",
                      "const randomSequence = `+a${getRandomNumber(1, 999)}`;\r",
                      "\r",
                      "// Combine the base and random sequence to create the random email address\r",
                      "const randomEmail = `${baseEmail}${randomSequence}@gmail.com`;\r",
                      "\r",
                      "// Set the random email address as an environment variable for your request\r",
                      "pm.environment.set('randomEmail', randomEmail);\r",
                      "\r",
                      "\r",
                      ""
                    ],
                    "_lastExecutionId": "f0df73d6-9875-49de-aaed-2ffb46745ff0"
                  }
                }
              ]
            },
            {
              "id": "1da8b1e7-3198-4c60-9c34-4a1e8b7e8b15",
              "name": "UserLogin",
              "request": {
                "url": {
                  "path": [
                    "users",
                    "login"
                  ],
                  "host": [
                    "{{exp_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n    \"email\":\"{{randomEmail}}\",\r\n    \"password\":\"{{password}}\"\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "cc8daf67-c0f2-4843-9223-e47d8fe754ec",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Check the status code is 200\", function(){\r",
                      "    pm.response.to.have.status(200);\r",
                      "});\r",
                      "\r",
                      "var jsonData = pm.response.json();\r",
                      "\r",
                      "pm.test(\"Check the success message\", function(){\r",
                      "    pm.expect(jsonData.success).to.eql(true);\r",
                      "});\r",
                      "\r",
                      "pm.test(\"Check the body message\", function(){\r",
                      "    pm.expect(jsonData.message).to.eql(\"Login successful\");\r",
                      "});\r",
                      "\r",
                      "pm.environment.set(\"exp_token\", jsonData.data.token);\r",
                      "\r",
                      "pm.test(\"Verify the values are not null\", function(){\r",
                      "    pm.expect(jsonData.data.id, \"Id is not a null\").to.not.be.null;\r",
                      "    pm.expect(jsonData.data.name, \"name is not a null\").to.not.be.null;\r",
                      "    pm.expect(jsonData.data.email, \"email is not a null\").to.not.be.null;\r",
                      "    pm.expect(jsonData.data.token, \"token is not a null\").to.not.be.null;\r",
                      "});\r",
                      "\r",
                      "pm.test(\"Check the response time\", function(){\r",
                      "    pm.expect(pm.response.responseTime).to.below(2000);\r",
                      "});\r",
                      "\r",
                      ""
                    ],
                    "_lastExecutionId": "4a906166-3676-408b-bc6f-6c09add962a5"
                  }
                },
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "98d0941e-d03e-4ab7-a7b0-84826ad7708a",
                    "type": "text/javascript",
                    "exec": [
                      ""
                    ],
                    "_lastExecutionId": "2f4a3493-6a43-4652-8c74-458390f9ecf9"
                  }
                }
              ]
            },
            {
              "id": "3f4af57c-fb9c-4a3c-8c2b-0f9b603b0679",
              "name": "GetProfile",
              "request": {
                "url": {
                  "path": [
                    "users",
                    "profile"
                  ],
                  "host": [
                    "{{exp_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET",
                "auth": {
                  "type": "apikey",
                  "apikey": [
                    {
                      "type": "string",
                      "value": "{{exp_token}}",
                      "key": "value"
                    },
                    {
                      "type": "string",
                      "value": "header",
                      "key": "in"
                    },
                    {
                      "type": "string",
                      "value": "x-auth-token",
                      "key": "key"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "56a6399c-71a1-414d-b876-9262a848415f",
                    "type": "text/javascript",
                    "exec": [
                      "\r",
                      "let jsonData = pm.response.json();\r",
                      "message = [\r",
                      "    \"Access token is not valid or has expired, you will need to login\",\r",
                      "    \"No authentication token specified in x-auth-token header\",\r",
                      "    \"Bad Request\",\r",
                      "    \"Unauthorized Request\",\r",
                      "    \"Internal Error Server\",\r",
                      "    \"Profile successful\",\r",
                      "    \"Not Found\"\r",
                      "]\r",
                      "\r",
                      "status = [400,401,404,500,200,201]\r",
                      "\r",
                      "if (jsonData.success === false) {\r",
                      "    pm.test(`**** E R R O R ***** ${jsonData.message}`, function(){\r",
                      "        // pm.expect(jsonData.message).to.eql(\"No authentication token specified in x-auth-token header\");\r",
                      "        pm.expect(jsonData.message).to.be.oneOf(message);\r",
                      "    });\r",
                      "\r",
                      "    pm.test(`Check the multiple error status code ${jsonData.status}`, function(){\r",
                      "        pm.expect(pm.response.code).to.be.oneOf(status);\r",
                      "    });\r",
                      "\r",
                      "\r",
                      "}\r",
                      "else {\r",
                      "    pm.test(`*** S U C C E S S *** ${jsonData.message}`, function(){\r",
                      "        // pm.expect(jsonData.message).to.equal(\"Profile successful\");\r",
                      "        pm.expect(jsonData.message).to.be.oneOf(message);\r",
                      "    });\r",
                      "\r",
                      "    pm.test(\"Check the response time\", function(){\r",
                      "    pm.expect(pm.response.responseTime).to.be.below(6000);\r",
                      "    });\r",
                      "\r",
                      "    pm.test(`Check the Status code ${jsonData.status}`, function(){\r",
                      "        pm.expect(pm.response.code).to.be.oneOf(status);\r",
                      "    });\r",
                      "\r",
                      "    pm.test(\"Body matches multiple string\",function(){\r",
                      "    pm.expect(pm.response.text()).to.include(\"id\");\r",
                      "    pm.expect(pm.response.text()).to.include(\"name\");\r",
                      "    pm.expect(pm.response.text()).to.include(\"email\");\r",
                      "});\r",
                      "\r",
                      "}\r",
                      "\r",
                      ""
                    ],
                    "_lastExecutionId": "55d3989d-79a3-476b-87c3-020290feeec2"
                  }
                },
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "5b6727ff-6213-4350-874c-dbaeeb0d0d03",
                    "type": "text/javascript",
                    "exec": [
                      ""
                    ],
                    "_lastExecutionId": "5e07b22a-eb37-441e-b764-c112f7fde3f7"
                  }
                }
              ],
              "protocolProfileBehavior": {
                "disabledSystemHeaders": {}
              }
            },
            {
              "id": "ee9d7916-0288-4df6-a4d2-05ed9c78c4f1",
              "name": "UpdateProfile",
              "request": {
                "url": {
                  "path": [
                    "users",
                    "profile"
                  ],
                  "host": [
                    "{{exp_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "PATCH",
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n    \"name\":\"{{name}}\",\r\n    \"phone\":\"{{random_number}}\",\r\n    \"company\":\"{{$randomCompanyName}}\"\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "auth": {
                  "type": "apikey",
                  "apikey": [
                    {
                      "type": "string",
                      "value": "{{exp_token}}",
                      "key": "value"
                    },
                    {
                      "type": "string",
                      "value": "header",
                      "key": "in"
                    },
                    {
                      "type": "string",
                      "value": "x-auth-token",
                      "key": "key"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "6ab7e932-eb9b-4edc-9edc-b8d42e4162ad",
                    "type": "text/javascript",
                    "exec": [
                      "let jsonData = pm.response.json();\r",
                      "message = [\r",
                      "    \"Access token is not valid or has expired, you will need to login\",\r",
                      "    \"No authentication token specified in x-auth-token header\",\r",
                      "    \"User name must be between 4 and 30 characters\",\r",
                      "    \"Phone number should be between 8 and 20 digits\",\r",
                      "    \"Unauthorized Request\",\r",
                      "    \"Internal Error Server\",\r",
                      "    \"Profile updated successful\",\r",
                      "    \"Not Found\",\r",
                      "    \"Bad Request\"\r",
                      "]\r",
                      "\r",
                      "status = [400,401,404,500,200,201]\r",
                      "// var jsonData1 = pm.response.json();\r",
                      "// pm.environment.set(\"phoneNumber\", jsonData1.data.phone);\r",
                      "\r",
                      "if (jsonData.success === false) {\r",
                      "    pm.test(`**** E R R O R ***** ${jsonData.message}`, function(){\r",
                      "        // pm.expect(jsonData.message).to.eql(\"No authentication token specified in x-auth-token header\");\r",
                      "        pm.expect(jsonData.message).to.be.oneOf(message);\r",
                      "    });\r",
                      "\r",
                      "    pm.test(`Check the multiple error status code ${jsonData.status}`, function(){\r",
                      "        pm.expect(pm.response.code).to.be.oneOf(status);\r",
                      "    });\r",
                      "\r",
                      "\r",
                      "}\r",
                      "else {\r",
                      "    pm.test(`*** S U C C E S S *** ${jsonData.message}`, function(){\r",
                      "        // pm.expect(jsonData.message).to.equal(\"Profile successful\");\r",
                      "        pm.expect(jsonData.message).to.be.oneOf(message);\r",
                      "    });\r",
                      "\r",
                      "    pm.test(\"Check the response time\", function(){\r",
                      "    pm.expect(pm.response.responseTime).to.be.below(6000);\r",
                      "    });\r",
                      "\r",
                      "    pm.test(`Check the Status code ${jsonData.status}`, function(){\r",
                      "        pm.expect(pm.response.code).to.be.oneOf(status);\r",
                      "    });\r",
                      "\r",
                      "    pm.test(\"Body matches multiple string\",function(){\r",
                      "    pm.expect(pm.response.text()).to.include(\"id\");\r",
                      "    pm.expect(pm.response.text()).to.include(\"name\");\r",
                      "    pm.expect(pm.response.text()).to.include(\"email\");\r",
                      "});\r",
                      "\r",
                      "}\r",
                      "\r",
                      ""
                    ],
                    "_lastExecutionId": "bf535ed4-ea27-433b-95ed-0405878d634c"
                  }
                },
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "1dd9ce14-2fea-48d5-b628-446e36acb961",
                    "type": "text/javascript",
                    "exec": [
                      "pm.environment.set(\"random_number\",_.random(1000000000,9999999999));\r",
                      "\r",
                      "\r",
                      ""
                    ],
                    "_lastExecutionId": "81adb337-1695-4fed-b265-391f869dd222"
                  }
                }
              ]
            },
            {
              "id": "03c5b9ed-2c86-4338-932a-d93a799c2d8d",
              "name": "ForgotPassword",
              "request": {
                "url": {
                  "path": [
                    "users",
                    "forgot-password"
                  ],
                  "host": [
                    "{{exp_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n    \"email\":\"{{randomEmail}}\"\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "auth": {
                  "type": "apikey",
                  "apikey": [
                    {
                      "type": "string",
                      "value": "{{exp_token}}",
                      "key": "value"
                    },
                    {
                      "type": "string",
                      "value": "header",
                      "key": "in"
                    },
                    {
                      "type": "string",
                      "value": "x-auth-token",
                      "key": "key"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "72c44319-e1e0-49ac-91f7-f3f0cd439f93",
                    "type": "text/javascript",
                    "exec": [
                      "let jsonData = pm.response.json();\r",
                      "let jsonEmail = JSON.parse(pm.request.body.raw).email;\r",
                      "\r",
                      "message = [\r",
                      "    \"Access token is not valid or has expired, you will need to login\",\r",
                      "    \"No authentication token specified in x-auth-token header\",\r",
                      "    \"Unauthorized Request\",\r",
                      "    \"Internal Error Server\",\r",
                      "    `Password reset link successfully sent to ${pm.environment.get(\"email\")}. Please verify by clicking on the given link`,\r",
                      "    \"Not Found\",\r",
                      "    \"Bad Request\",\r",
                      "    \"A valid email address is required\"\r",
                      "]\r",
                      "\r",
                      "status = [400,401,404,500,200,201]\r",
                      "// var jsonData1 = pm.response.json();\r",
                      "// pm.environment.set(\"phoneNumber\", jsonData1.data.phone);\r",
                      "\r",
                      "if (jsonData.success === false) {\r",
                      "    pm.test(`**** E R R O R ***** ${jsonData.message}`, function(){\r",
                      "        // pm.expect(jsonData.message).to.eql(\"No authentication token specified in x-auth-token header\");\r",
                      "        pm.expect(jsonData.message).to.be.oneOf(message);\r",
                      "    });\r",
                      "\r",
                      "    pm.test(`Check the multiple error status code ${jsonData.status}`, function(){\r",
                      "        pm.expect(pm.response.code).to.be.oneOf(status);\r",
                      "    });\r",
                      "\r",
                      "\r",
                      "}\r",
                      "else {\r",
                      "    pm.test(`*** S U C C E S S *** ${jsonData.message}`, function(){\r",
                      "        // pm.expect(jsonData.message).to.equal(\"Profile successful\");\r",
                      "        pm.expect(jsonData.message).to.be.oneOf(message);\r",
                      "    });\r",
                      "\r",
                      "    pm.test(\"Check the response time\", function(){\r",
                      "    pm.expect(pm.response.responseTime).to.be.below(6000);\r",
                      "    });\r",
                      "\r",
                      "    pm.test(`Check the Status code ${jsonData.status}`, function(){\r",
                      "        pm.expect(pm.response.code).to.be.oneOf(status);\r",
                      "    });\r",
                      "\r",
                      "    pm.test(\"Body matches multiple string\",function(){\r",
                      "    pm.expect(pm.response.text()).to.include(\"message\");\r",
                      "});\r",
                      "\r",
                      "}\r",
                      "\r",
                      ""
                    ],
                    "_lastExecutionId": "a3803636-b917-4048-8873-b62ae1f022d6"
                  }
                },
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "6236deb0-9668-46d8-bb96-97cc86eeb0fa",
                    "type": "text/javascript",
                    "exec": [
                      ""
                    ],
                    "_lastExecutionId": "148f797c-8661-4a45-97c4-527fe81fce77"
                  }
                }
              ]
            },
            {
              "id": "eea8198b-64d4-43e4-b554-aefaae2516cd",
              "name": "GetEmailMessage",
              "request": {
                "url": {
                  "protocol": "https",
                  "path": [
                    "gmail",
                    "v1",
                    "users",
                    "{{user_email_id}}",
                    "messages",
                    ""
                  ],
                  "host": [
                    "gmail",
                    "googleapis",
                    "com"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET",
                "auth": {
                  "type": "oauth2",
                  "oauth2": [
                    {
                      "type": "boolean",
                      "value": false,
                      "key": "useBrowser"
                    },
                    {
                      "type": "string",
                      "value": "{{Scope}}",
                      "key": "scope"
                    },
                    {
                      "type": "string",
                      "value": "{{Client_Secret}}",
                      "key": "clientSecret"
                    },
                    {
                      "type": "string",
                      "value": "{{Client_ID}}",
                      "key": "clientId"
                    },
                    {
                      "type": "string",
                      "value": "{{Access_Token_URL}}",
                      "key": "accessTokenUrl"
                    },
                    {
                      "type": "string",
                      "value": "{{Auth_URL}}",
                      "key": "authUrl"
                    },
                    {
                      "type": "string",
                      "value": "{{Callback_URL}}",
                      "key": "redirect_uri"
                    },
                    {
                      "type": "string",
                      "value": "authorization_code",
                      "key": "grant_type"
                    },
                    {
                      "type": "string",
                      "value": "email_token",
                      "key": "tokenName"
                    },
                    {
                      "type": "string",
                      "value": "header",
                      "key": "addTokenTo"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "705020a4-73b3-44df-86ff-a5984e094d10",
                    "type": "text/javascript",
                    "exec": [
                      "var jsonData = pm.response.json();\r",
                      "pm.environment.set(\"messageId\", jsonData.messages[0].id);\r",
                      "\r",
                      ""
                    ],
                    "_lastExecutionId": "eeef6f2d-f5fd-4a00-be9c-25555c6fa5bc"
                  }
                },
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "cdf7837a-853f-442c-8e05-996129213a95",
                    "type": "text/javascript",
                    "exec": [
                      "var newRefreshToken = pm.environment.get(\"access_token\");\r",
                      "\r",
                      "pm.environment.set(\"refresh_token\", newRefreshToken);"
                    ],
                    "_lastExecutionId": "94790536-1730-42ee-886b-f2872e8a5fee"
                  }
                }
              ]
            },
            {
              "id": "f053ddc8-a8a6-4796-a23f-c89737b34582",
              "name": "GetMessageByID",
              "request": {
                "url": {
                  "protocol": "https",
                  "path": [
                    "gmail",
                    "v1",
                    "users",
                    "{{user_email_id}}",
                    "messages",
                    "{{messageId}}"
                  ],
                  "host": [
                    "gmail",
                    "googleapis",
                    "com"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "multipart/mixed"
                  }
                ],
                "method": "GET",
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "{{access_token}}",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "d94857cd-ae23-40c6-ae38-5f7aaca3e833",
                    "type": "text/javascript",
                    "exec": [
                      "\r",
                      "const response = pm.response.json();\r",
                      "\r",
                      "pm.environment.set(\"message_Body\", response.payload.body.data);\r",
                      "\r",
                      "var atob = require('atob');\r",
                      "\r",
                      "\r",
                      "var base64Data = pm.environment.get(\"message_Body\");\r",
                      "var decodedData = atob(base64Data);\r",
                      "postman.setEnvironmentVariable(\"rest_password\",decodedData);\r",
                      "var tokenRegex = /Reset password link: (https:\\/\\/practice\\.expandtesting\\.com\\/notes\\/app\\/reset-password\\/([\\w\\d]+))[^ ]+/;\r",
                      "var tokenMatch = decodedData.match(tokenRegex);\r",
                      "if (tokenMatch && tokenMatch[2]) {\r",
                      "    var resetPasswordToken = tokenMatch[2];\r",
                      "    \r",
                      "    // Set the reset password link as a Postman environment variable for later use\r",
                      "    pm.environment.set(\"resetPasswordToken\", resetPasswordToken);\r",
                      "    \r",
                      "    // Log the reset password link\r",
                      "    console.log(\"Reset Password Token: \" + resetPasswordToken);\r",
                      "} else {\r",
                      "    console.log(\"Reset password token not found in the response.\");\r",
                      "}\r",
                      "console.log(decodedData);\r",
                      "\r",
                      "\r",
                      "\r",
                      "\r",
                      "\r",
                      "\r",
                      "\r",
                      "\r",
                      "\r",
                      "\r",
                      "\r",
                      ""
                    ],
                    "_lastExecutionId": "4816be40-7f3a-489e-b23c-14c698a58ddc"
                  }
                },
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "8349aa22-c992-434e-9e35-e5fc8ef4a245",
                    "type": "text/javascript",
                    "exec": [
                      ""
                    ],
                    "_lastExecutionId": "e5ddbcb0-9830-4e57-9232-851987938e7d"
                  }
                }
              ]
            },
            {
              "id": "8d884a10-0abd-48de-9b8a-47bfc7ff13cd",
              "name": "verify-reset-password-token",
              "request": {
                "url": {
                  "path": [
                    "users",
                    "verify-reset-password-token"
                  ],
                  "host": [
                    "{{exp_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "accept",
                    "value": "application/json"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/x-www-form-urlencoded"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "urlencoded",
                  "urlencoded": [
                    {
                      "key": "token",
                      "value": "{{resetPasswordToken}}"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "799e647c-efdd-4528-bf8c-ec8d1e1a4b55",
                    "type": "text/javascript",
                    "exec": [
                      "let jsonData = pm.response.json();\r",
                      "\r",
                      "message = [\r",
                      "    \"The provided password reset token is valid\",\r",
                      "    \"Bad Request\",\r",
                      "    \"Internal Error Server\",\r",
                      "    \"The provided password reset token is invalid or has expired\"\r",
                      "]\r",
                      "\r",
                      "status = [200,400,401,500]\r",
                      "\r",
                      "if (jsonData.success === false) {\r",
                      "    pm.test(`**** E R R O R ***** ${jsonData.message}`, function(){\r",
                      "        // pm.expect(jsonData.message).to.eql(\"No authentication token specified in x-auth-token header\");\r",
                      "        pm.expect(jsonData.message).to.be.oneOf(message);\r",
                      "    });\r",
                      "\r",
                      "    pm.test(`Check the multiple error status code ${jsonData.status}`, function(){\r",
                      "        pm.expect(pm.response.code).to.be.oneOf(status);\r",
                      "    });\r",
                      "\r",
                      "\r",
                      "}\r",
                      "else {\r",
                      "    pm.test(`*** S U C C E S S *** ${jsonData.message}`, function(){\r",
                      "        // pm.expect(jsonData.message).to.equal(\"Profile successful\");\r",
                      "        pm.expect(jsonData.message).to.be.oneOf(message);\r",
                      "    });\r",
                      "\r",
                      "    pm.test(\"Check the response time\", function(){\r",
                      "    pm.expect(pm.response.responseTime).to.be.below(6000);\r",
                      "    });\r",
                      "\r",
                      "    pm.test(`Check the Status code ${jsonData.status}`, function(){\r",
                      "        pm.expect(pm.response.code).to.be.oneOf(status);\r",
                      "    });\r",
                      "\r",
                      "    pm.test(\"Body matches multiple string\",function(){\r",
                      "    pm.expect(pm.response.text()).to.include(\"message\");\r",
                      "});\r",
                      "\r",
                      "}\r",
                      "\r",
                      ""
                    ],
                    "_lastExecutionId": "c1d6d515-485d-45cb-ab2b-15662e3830f7"
                  }
                },
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "46fb041c-0790-4ccb-a117-d6dcbb44aa15",
                    "type": "text/javascript",
                    "exec": [
                      ""
                    ],
                    "_lastExecutionId": "48a955fd-f392-4b00-9034-2a273d9fea6d"
                  }
                }
              ]
            },
            {
              "id": "740f7a4b-9db6-4b38-a333-0ad712a2b2a2",
              "name": "reset-password",
              "request": {
                "url": {
                  "protocol": "https",
                  "path": [
                    "notes",
                    "api",
                    "users",
                    "reset-password"
                  ],
                  "host": [
                    "practice",
                    "expandtesting",
                    "com"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "accept",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n    \"token\":\"{{resetPasswordToken}}\",\r\n    \"newPassword\":\"{{$randomPassword}}\"\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "7cdc8324-5612-42e4-8f85-49037412238b",
                    "type": "text/javascript",
                    "exec": [
                      "let jsonData = pm.response.json();\r",
                      "\r",
                      "let newPassword = JSON.parse(pm.request.body.raw).newPassword;\r",
                      "pm.environment.set('password', newPassword);\r",
                      "\r",
                      "\r",
                      "message = [\r",
                      "    \"The password has been successfully reset\",\r",
                      "    \"Token must be between 64 characters\",\r",
                      "    \"Bad Request\",\r",
                      "    \"The password was successfully updated\",\r",
                      "    \"Internal Error Server\",\r",
                      "    \"New password must be between 6 and 30 characters\",\r",
                      "    \"The password reset token is invalid or has expired\"\r",
                      "]\r",
                      "\r",
                      "status = [200,400,401,500]\r",
                      "\r",
                      "if (jsonData.success === false) {\r",
                      "    pm.test(`**** E R R O R ***** ${jsonData.message}`, function(){\r",
                      "        // pm.expect(jsonData.message).to.eql(\"No authentication token specified in x-auth-token header\");\r",
                      "        pm.expect(jsonData.message).to.be.oneOf(message);\r",
                      "    });\r",
                      "\r",
                      "    pm.test(`Check the multiple error status code ${jsonData.status}`, function(){\r",
                      "        pm.expect(pm.response.code).to.be.oneOf(status);\r",
                      "    });\r",
                      "\r",
                      "\r",
                      "}\r",
                      "else {\r",
                      "    pm.test(`*** S U C C E S S *** ${jsonData.message}`, function(){\r",
                      "        // pm.expect(jsonData.message).to.equal(\"Profile successful\");\r",
                      "        pm.expect(jsonData.message).to.be.oneOf(message);\r",
                      "    });\r",
                      "\r",
                      "    pm.test(\"Check the response time\", function(){\r",
                      "    pm.expect(pm.response.responseTime).to.be.below(6000);\r",
                      "    });\r",
                      "\r",
                      "    pm.test(`Check the Status code ${jsonData.status}`, function(){\r",
                      "        pm.expect(pm.response.code).to.be.oneOf(status);\r",
                      "    });\r",
                      "\r",
                      "    pm.test(\"Body matches multiple string\",function(){\r",
                      "    pm.expect(pm.response.text()).to.include(\"message\");\r",
                      "});\r",
                      "\r",
                      "}\r",
                      "\r",
                      "\r",
                      ""
                    ],
                    "_lastExecutionId": "5d234639-2098-4725-8401-094ce8fa851b"
                  }
                },
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "1268a1ec-48a3-4dfd-8fc8-3c14d0fa7f28",
                    "type": "text/javascript",
                    "exec": [
                      ""
                    ],
                    "_lastExecutionId": "3e5db1d1-0c8c-4a29-8797-f14a01a4bedc"
                  }
                }
              ]
            },
            {
              "id": "93821c3b-e028-4eda-a749-05d87d7e6a94",
              "name": "change-password",
              "request": {
                "url": {
                  "path": [
                    "users",
                    "change-password"
                  ],
                  "host": [
                    "{{exp_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "accept",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n    \"currentPassword\":\"{{password}}\",\r\n    \"newPassword\":\"{{$randomPassword}}\"\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "auth": {
                  "type": "apikey",
                  "apikey": [
                    {
                      "type": "string",
                      "value": "{{exp_token}}",
                      "key": "value"
                    },
                    {
                      "type": "string",
                      "value": "x-auth-token",
                      "key": "key"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "3eca22f1-7d4a-4832-8b68-54badb876aa6",
                    "type": "text/javascript",
                    "exec": [
                      "pm.environment.get(\"password\");\r",
                      "\r",
                      "let newPassword = JSON.parse(pm.request.body.raw).newPassword;\r",
                      "pm.environment.set('password', newPassword);\r",
                      "\r",
                      "let jsonData = pm.response.json();\r",
                      "message = [\r",
                      "    \"The password has been successfully reset\",\r",
                      "    \"Token must be between 64 characters\",\r",
                      "    \"Bad Request\",\r",
                      "    \"The password was successfully updated\",\r",
                      "    \"Internal Error Server\",\r",
                      "    \"New password must be between 6 and 30 characters\",\r",
                      "    \"The password reset token is invalid or has expired\"\r",
                      "]\r",
                      "\r",
                      "status = [200,400,401,500]\r",
                      "\r",
                      "if (jsonData.success === false) {\r",
                      "    pm.test(`**** E R R O R ***** ${jsonData.message}`, function(){\r",
                      "        // pm.expect(jsonData.message).to.eql(\"No authentication token specified in x-auth-token header\");\r",
                      "        pm.expect(jsonData.message).to.be.oneOf(message);\r",
                      "    });\r",
                      "\r",
                      "    pm.test(`Check the multiple error status code ${jsonData.status}`, function(){\r",
                      "        pm.expect(pm.response.code).to.be.oneOf(status);\r",
                      "    });\r",
                      "\r",
                      "\r",
                      "}\r",
                      "else {\r",
                      "    pm.test(`*** S U C C E S S *** ${jsonData.message}`, function(){\r",
                      "        // pm.expect(jsonData.message).to.equal(\"Profile successful\");\r",
                      "        pm.expect(jsonData.message).to.be.oneOf(message);\r",
                      "    });\r",
                      "\r",
                      "    pm.test(\"Check the response time\", function(){\r",
                      "    pm.expect(pm.response.responseTime).to.be.below(6000);\r",
                      "    });\r",
                      "\r",
                      "    pm.test(`Check the Status code ${jsonData.status}`, function(){\r",
                      "        pm.expect(pm.response.code).to.be.oneOf(status);\r",
                      "    });\r",
                      "\r",
                      "    pm.test(\"Body matches multiple string\",function(){\r",
                      "    pm.expect(pm.response.text()).to.include(\"message\");\r",
                      "});\r",
                      "\r",
                      "}\r",
                      ""
                    ],
                    "_lastExecutionId": "64be3638-86ca-4200-b966-7a137b03eb2e"
                  }
                },
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "aa473681-09fc-4673-a2fe-7012cf4e42e9",
                    "type": "text/javascript",
                    "exec": [
                      "console.log(pm.environment.get(\"password\"));\r",
                      "\r",
                      "\r",
                      "\r",
                      ""
                    ],
                    "_lastExecutionId": "fb6fc291-ccb6-46ad-9bb8-0e4bf2cf736d"
                  }
                }
              ]
            },
            {
              "id": "f4c8e78d-5700-43a2-8e20-cb1a0de26ce9",
              "name": "UserLogout",
              "request": {
                "url": {
                  "path": [
                    "users",
                    "logout"
                  ],
                  "host": [
                    "{{exp_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "accept",
                    "value": "application/json"
                  }
                ],
                "method": "DELETE",
                "auth": {
                  "type": "apikey",
                  "apikey": [
                    {
                      "type": "string",
                      "value": "{{exp_token}}",
                      "key": "value"
                    },
                    {
                      "type": "string",
                      "value": "x-auth-token",
                      "key": "key"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "43a38bb6-0063-463b-9a7b-ea0674d209fe",
                    "type": "text/javascript",
                    "exec": [
                      "let jsonData = pm.response.json();\r",
                      "message = [\r",
                      "    \"User has been successfully logged out\",\r",
                      "    \"Token must be between 64 characters\",\r",
                      "    \"Bad Request\",\r",
                      "    \"Access token is not valid or has expired, you will need to login\",\r",
                      "    \"No authentication token specified in x-auth-token header\",\r",
                      "    \"Internal Error Server\",\r",
                      "    \"Successful Request\",\r",
                      "    \"Unauthorized Request\"\r",
                      "]\r",
                      "\r",
                      "status = [200,400,401,500]\r",
                      "\r",
                      "if (jsonData.success === false) {\r",
                      "    pm.test(`**** E R R O R ***** ${jsonData.message}`, function(){\r",
                      "        // pm.expect(jsonData.message).to.eql(\"No authentication token specified in x-auth-token header\");\r",
                      "        pm.expect(jsonData.message).to.be.oneOf(message);\r",
                      "    });\r",
                      "\r",
                      "    pm.test(`Check the multiple error status code ${jsonData.status}`, function(){\r",
                      "        pm.expect(pm.response.code).to.be.oneOf(status);\r",
                      "    });\r",
                      "\r",
                      "\r",
                      "}\r",
                      "else {\r",
                      "    pm.test(`*** S U C C E S S *** ${jsonData.message}`, function(){\r",
                      "        // pm.expect(jsonData.message).to.equal(\"Profile successful\");\r",
                      "        pm.expect(jsonData.message).to.be.oneOf(message);\r",
                      "    });\r",
                      "\r",
                      "    pm.test(\"Check the response time\", function(){\r",
                      "    pm.expect(pm.response.responseTime).to.be.below(6000);\r",
                      "    });\r",
                      "\r",
                      "    pm.test(`Check the Status code ${jsonData.status}`, function(){\r",
                      "        pm.expect(pm.response.code).to.be.oneOf(status);\r",
                      "    });\r",
                      "\r",
                      "    pm.test(\"Body matches multiple string\",function(){\r",
                      "    pm.expect(pm.response.text()).to.include(\"message\");\r",
                      "});\r",
                      "\r",
                      "}\r",
                      "\r",
                      "postman.setNextRequest(null);"
                    ],
                    "_lastExecutionId": "c7d982d4-a8dc-460f-a106-6e0c01643e82"
                  }
                },
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "e8ae662d-a080-4bf5-a817-754113435b5e",
                    "type": "text/javascript",
                    "exec": [
                      ""
                    ],
                    "_lastExecutionId": "0b0d404e-4117-40fc-9982-a95619506052"
                  }
                }
              ]
            }
          ],
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "3380df96-f386-44be-9dc8-eb145a929d13",
                "type": "text/javascript",
                "exec": [
                  ""
                ],
                "_lastExecutionId": "c2613397-fddf-4d46-99b6-9ffc9166e0a8"
              }
            },
            {
              "listen": "test",
              "script": {
                "id": "18c4e0bb-9477-4e5f-b627-d550e666c7d3",
                "type": "text/javascript",
                "exec": [
                  ""
                ],
                "_lastExecutionId": "78225eb1-cbe5-408b-978b-a1bf2d2b693c"
              }
            }
          ],
          "variable": [
            {
              "type": "string",
              "value": "https://practice.expandtesting.com/notes/api",
              "key": "exp_url"
            }
          ],
          "info": {
            "_postman_id": "723ea9c3-0635-4605-b90c-d6d9e9835d8c",
            "name": "expandtesting",
            "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
          }
        },
        "cursor": {
          "ref": "8c680752-290f-4c38-ace4-856b0bd8cb56",
          "length": 12,
          "cycles": 1,
          "position": 2,
          "iteration": 0,
          "httpRequestId": "69d50afe-4b0f-4382-9214-badf24234ead",
          "scriptId": "cc8daf67-c0f2-4843-9223-e47d8fe754ec",
          "execution": "4a906166-3676-408b-bc6f-6c09add962a5"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 1,
          "test": "Check the success message",
          "message": "expected false to deeply equal true",
          "stack": "AssertionError: expected false to deeply equal true\n   at Object.eval sandbox-script.js:2:3)",
          "checksum": "2bed87088336adbed15133913daa5830",
          "id": "6c5e57e7-eac4-44b2-ab08-b12d4c31a082",
          "timestamp": 1698733439339,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 2,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 3,
              "native": false
            }
          ]
        },
        "at": "assertion:1 in test-script",
        "source": {
          "id": "1da8b1e7-3198-4c60-9c34-4a1e8b7e8b15",
          "name": "UserLogin",
          "request": {
            "url": {
              "path": [
                "users",
                "login"
              ],
              "host": [
                "{{exp_url}}"
              ],
              "query": [],
              "variable": []
            },
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\r\n    \"email\":\"{{randomEmail}}\",\r\n    \"password\":\"{{password}}\"\r\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "cc8daf67-c0f2-4843-9223-e47d8fe754ec",
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Check the status code is 200\", function(){\r",
                  "    pm.response.to.have.status(200);\r",
                  "});\r",
                  "\r",
                  "var jsonData = pm.response.json();\r",
                  "\r",
                  "pm.test(\"Check the success message\", function(){\r",
                  "    pm.expect(jsonData.success).to.eql(true);\r",
                  "});\r",
                  "\r",
                  "pm.test(\"Check the body message\", function(){\r",
                  "    pm.expect(jsonData.message).to.eql(\"Login successful\");\r",
                  "});\r",
                  "\r",
                  "pm.environment.set(\"exp_token\", jsonData.data.token);\r",
                  "\r",
                  "pm.test(\"Verify the values are not null\", function(){\r",
                  "    pm.expect(jsonData.data.id, \"Id is not a null\").to.not.be.null;\r",
                  "    pm.expect(jsonData.data.name, \"name is not a null\").to.not.be.null;\r",
                  "    pm.expect(jsonData.data.email, \"email is not a null\").to.not.be.null;\r",
                  "    pm.expect(jsonData.data.token, \"token is not a null\").to.not.be.null;\r",
                  "});\r",
                  "\r",
                  "pm.test(\"Check the response time\", function(){\r",
                  "    pm.expect(pm.response.responseTime).to.below(2000);\r",
                  "});\r",
                  "\r",
                  ""
                ],
                "_lastExecutionId": "4a906166-3676-408b-bc6f-6c09add962a5"
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "id": "98d0941e-d03e-4ab7-a7b0-84826ad7708a",
                "type": "text/javascript",
                "exec": [
                  ""
                ],
                "_lastExecutionId": "2f4a3493-6a43-4652-8c74-458390f9ecf9"
              }
            }
          ]
        },
        "parent": {
          "_": {
            "postman_id": "723ea9c3-0635-4605-b90c-d6d9e9835d8c",
            "exporter_id": "13852941",
            "collection_link": "https://galactic-astronaut-894425.postman.co/workspace/b6dafb4f-3507-4e58-a32d-dd31bf6ab148/collection/13852941-723ea9c3-0635-4605-b90c-d6d9e9835d8c?action=share&source=collection_link&creator=13852941"
          },
          "item": [
            {
              "id": "90407c19-d06c-4337-abb9-4dfc2fa17fc8",
              "name": "health_check",
              "request": {
                "url": {
                  "path": [
                    "health-check"
                  ],
                  "host": [
                    "{{exp_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "b075fb8f-9483-4909-a4a4-cf6344c6642b",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Check the Status code 200\", function(){\r",
                      "    pm.response.to.have.status(200);\r",
                      "});\r",
                      "\r",
                      "var jsonData = pm.response.json();\r",
                      "\r",
                      "pm.test(\"Check the success code in body\", function(){\r",
                      "    pm.expect(jsonData.success).to.eql(true);\r",
                      "});\r",
                      "\r",
                      "pm.test(\"Check the Status code in body\", function(){\r",
                      "    pm.expect(jsonData.status).to.eql(200);\r",
                      "});\r",
                      "\r",
                      "pm.test(\"Check the message in body\", function(){\r",
                      "    pm.expect(jsonData.message).to.eql(\"Notes API is Running\");\r",
                      "});\r",
                      "\r",
                      "\r",
                      ""
                    ],
                    "_lastExecutionId": "dcf22f24-f95a-4d61-981a-68f2474c0b1d"
                  }
                },
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "15079d7d-2fc3-468b-b923-1fd697b2156e",
                    "type": "text/javascript",
                    "exec": [
                      ""
                    ],
                    "_lastExecutionId": "a57965c9-dfeb-425b-a87b-14b41a981af7"
                  }
                }
              ]
            },
            {
              "id": "d3b70abb-4c44-4d96-b946-e8ef2e19907f",
              "name": "RegisterUser",
              "request": {
                "url": {
                  "path": [
                    "users",
                    "register"
                  ],
                  "host": [
                    "{{exp_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n    \"name\":\"{{$randomFullName}}\",\r\n    \"email\":\"{{randomEmail}}\",\r\n    \"password\":\"{{$randomPassword}}\"\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "4f0c3c3d-4171-4bea-b8a8-3fd567809f0d",
                    "type": "text/javascript",
                    "exec": [
                      "var jsonData = pm.response.json();\r",
                      "\r",
                      "pm.test(\"Check the success msg is true in body?\", function(){\r",
                      "    pm.expect(jsonData.success).to.eql(true);\r",
                      "});\r",
                      "\r",
                      "pm.test(\"Check the body message\", function(){\r",
                      "    pm.expect(jsonData.message).to.eql(\"User account created successfully\");\r",
                      "});\r",
                      "\r",
                      "pm.test(\"Verify the values are not null\", function(){\r",
                      "    pm.expect(jsonData.data.id, \"Id is not null\").to.not.be.null;\r",
                      "    pm.expect(jsonData.data.name, \"name is not null\").to.not.be.null;\r",
                      "    pm.expect(jsonData.data.email, \"email is not null\").to.not.be.null;\r",
                      "});\r",
                      "\r",
                      "pm.test(\"response property matching an environment variable\", function(){\r",
                      "    pm.expect(jsonData.name).to.eql(pm.environment.get(\"name\"));\r",
                      "});\r",
                      "\r",
                      "pm.test(\"Check the response time\", function(){\r",
                      "    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
                      "});\r",
                      "\r",
                      "pm.environment.set(\"id\", jsonData.data.id);\r",
                      "pm.environment.set(\"name\", jsonData.data.name);\r",
                      "\r",
                      "let password = JSON.parse(pm.request.body.raw).password;\r",
                      "pm.environment.set('password', password);\r",
                      "\r",
                      "message = [\r",
                      "    \"Access token is not valid or has expired, you will need to login\",\r",
                      "    \"No authentication token specified in x-auth-token header\",\r",
                      "    \"User name must be between 4 and 30 characters\",\r",
                      "    \"Phone number should be between 8 and 20 digits\",\r",
                      "    \"Unauthorized Request\",\r",
                      "    \"Internal Error Server\",\r",
                      "    \"Profile updated successful\",\r",
                      "    \"User account created successfully\",\r",
                      "    \"Not Found\",\r",
                      "    \"Bad Request\",\r",
                      "    \"An account already exists with the same email address\"\r",
                      "];\r",
                      "\r",
                      "status = [400,401,404,409,500,200,201];\r",
                      "\r",
                      "if (jsonData.success === false) {\r",
                      "    pm.test(`**** E R R O R ***** ${jsonData.message}`, function(){\r",
                      "        pm.expect(jsonData.message).to.be.oneOf(message);\r",
                      "    });\r",
                      "\r",
                      "    pm.test(`Check the multiple error status code ${jsonData.status}`, function(){\r",
                      "        pm.expect(pm.response.code).to.be.oneOf(status);\r",
                      "    });\r",
                      "}\r",
                      "else {\r",
                      "    pm.test(`*** S U C C E S S *** ${jsonData.message}`, function(){\r",
                      "        pm.expect(jsonData.message).to.be.oneOf(message);\r",
                      "    });\r",
                      "\r",
                      "    pm.test(`Check the Status code ${jsonData.status}`, function(){\r",
                      "        pm.expect(pm.response.code).to.be.oneOf(status);\r",
                      "    });\r",
                      "}"
                    ],
                    "_lastExecutionId": "2fbfcb58-035a-4d0d-afa2-7fc9d5239e13"
                  }
                },
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "3483ef69-d6b6-4835-8746-973a3f7a159e",
                    "type": "text/javascript",
                    "exec": [
                      "\r",
                      "// // Define the incrementEmail function\r",
                      "// function incrementEmail(email) {\r",
                      "//     const match = email.match(/\\+a(\\d+)/);\r",
                      "\r",
                      "//     if (match) {\r",
                      "//         const currentNumber = parseInt(match[1]);\r",
                      "//         const nextNumber = currentNumber + 1;\r",
                      "//         const incrementedEmail = email.replace(/\\+a\\d+/, `+a${nextNumber}`);\r",
                      "//         return incrementedEmail;\r",
                      "//     }\r",
                      "\r",
                      "//     return email;\r",
                      "// }\r",
                      "\r",
                      "\r",
                      "// const originalEmail = pm.environment.get(\"email\");\r",
                      "\r",
                      "\r",
                      "// if (originalEmail) {\r",
                      "//     // Use the incrementEmail function to get the incremented email\r",
                      "//     const incrementedEmail = incrementEmail(originalEmail);\r",
                      "\r",
                      "//     // Set the incremented email back to the environment\r",
                      "//     pm.environment.set(\"email\", incrementedEmail);\r",
                      "\r",
                      "//     console.log(\"OriginalEmail:\", originalEmail);\r",
                      "//     console.log(\"IncrementedEmail:\", incrementedEmail);\r",
                      "// } else {\r",
                      "//     console.error(\"Email environment variable not found.\");\r",
                      "// }\r",
                      "\r",
                      "// console.log(pm.environment.get(\"email\"));\r",
                      "\r",
                      "\r",
                      "// -------------------------------------------------------------------\r",
                      "// Define the base part of the email address\r",
                      "const baseEmail = pm.environment.get(\"baseEmail\");\r",
                      "\r",
                      "// Generate a random number between min and max (inclusive)\r",
                      "function getRandomNumber(min, max) {\r",
                      "    return Math.floor(Math.random() * (max - min + 1)) + min;\r",
                      "}\r",
                      "\r",
                      "// Generate a random sequence like +a151, +a152, +a153, and so on\r",
                      "const randomSequence = `+a${getRandomNumber(1, 999)}`;\r",
                      "\r",
                      "// Combine the base and random sequence to create the random email address\r",
                      "const randomEmail = `${baseEmail}${randomSequence}@gmail.com`;\r",
                      "\r",
                      "// Set the random email address as an environment variable for your request\r",
                      "pm.environment.set('randomEmail', randomEmail);\r",
                      "\r",
                      "\r",
                      ""
                    ],
                    "_lastExecutionId": "f0df73d6-9875-49de-aaed-2ffb46745ff0"
                  }
                }
              ]
            },
            {
              "id": "1da8b1e7-3198-4c60-9c34-4a1e8b7e8b15",
              "name": "UserLogin",
              "request": {
                "url": {
                  "path": [
                    "users",
                    "login"
                  ],
                  "host": [
                    "{{exp_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n    \"email\":\"{{randomEmail}}\",\r\n    \"password\":\"{{password}}\"\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "cc8daf67-c0f2-4843-9223-e47d8fe754ec",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Check the status code is 200\", function(){\r",
                      "    pm.response.to.have.status(200);\r",
                      "});\r",
                      "\r",
                      "var jsonData = pm.response.json();\r",
                      "\r",
                      "pm.test(\"Check the success message\", function(){\r",
                      "    pm.expect(jsonData.success).to.eql(true);\r",
                      "});\r",
                      "\r",
                      "pm.test(\"Check the body message\", function(){\r",
                      "    pm.expect(jsonData.message).to.eql(\"Login successful\");\r",
                      "});\r",
                      "\r",
                      "pm.environment.set(\"exp_token\", jsonData.data.token);\r",
                      "\r",
                      "pm.test(\"Verify the values are not null\", function(){\r",
                      "    pm.expect(jsonData.data.id, \"Id is not a null\").to.not.be.null;\r",
                      "    pm.expect(jsonData.data.name, \"name is not a null\").to.not.be.null;\r",
                      "    pm.expect(jsonData.data.email, \"email is not a null\").to.not.be.null;\r",
                      "    pm.expect(jsonData.data.token, \"token is not a null\").to.not.be.null;\r",
                      "});\r",
                      "\r",
                      "pm.test(\"Check the response time\", function(){\r",
                      "    pm.expect(pm.response.responseTime).to.below(2000);\r",
                      "});\r",
                      "\r",
                      ""
                    ],
                    "_lastExecutionId": "4a906166-3676-408b-bc6f-6c09add962a5"
                  }
                },
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "98d0941e-d03e-4ab7-a7b0-84826ad7708a",
                    "type": "text/javascript",
                    "exec": [
                      ""
                    ],
                    "_lastExecutionId": "2f4a3493-6a43-4652-8c74-458390f9ecf9"
                  }
                }
              ]
            },
            {
              "id": "3f4af57c-fb9c-4a3c-8c2b-0f9b603b0679",
              "name": "GetProfile",
              "request": {
                "url": {
                  "path": [
                    "users",
                    "profile"
                  ],
                  "host": [
                    "{{exp_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET",
                "auth": {
                  "type": "apikey",
                  "apikey": [
                    {
                      "type": "string",
                      "value": "{{exp_token}}",
                      "key": "value"
                    },
                    {
                      "type": "string",
                      "value": "header",
                      "key": "in"
                    },
                    {
                      "type": "string",
                      "value": "x-auth-token",
                      "key": "key"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "56a6399c-71a1-414d-b876-9262a848415f",
                    "type": "text/javascript",
                    "exec": [
                      "\r",
                      "let jsonData = pm.response.json();\r",
                      "message = [\r",
                      "    \"Access token is not valid or has expired, you will need to login\",\r",
                      "    \"No authentication token specified in x-auth-token header\",\r",
                      "    \"Bad Request\",\r",
                      "    \"Unauthorized Request\",\r",
                      "    \"Internal Error Server\",\r",
                      "    \"Profile successful\",\r",
                      "    \"Not Found\"\r",
                      "]\r",
                      "\r",
                      "status = [400,401,404,500,200,201]\r",
                      "\r",
                      "if (jsonData.success === false) {\r",
                      "    pm.test(`**** E R R O R ***** ${jsonData.message}`, function(){\r",
                      "        // pm.expect(jsonData.message).to.eql(\"No authentication token specified in x-auth-token header\");\r",
                      "        pm.expect(jsonData.message).to.be.oneOf(message);\r",
                      "    });\r",
                      "\r",
                      "    pm.test(`Check the multiple error status code ${jsonData.status}`, function(){\r",
                      "        pm.expect(pm.response.code).to.be.oneOf(status);\r",
                      "    });\r",
                      "\r",
                      "\r",
                      "}\r",
                      "else {\r",
                      "    pm.test(`*** S U C C E S S *** ${jsonData.message}`, function(){\r",
                      "        // pm.expect(jsonData.message).to.equal(\"Profile successful\");\r",
                      "        pm.expect(jsonData.message).to.be.oneOf(message);\r",
                      "    });\r",
                      "\r",
                      "    pm.test(\"Check the response time\", function(){\r",
                      "    pm.expect(pm.response.responseTime).to.be.below(6000);\r",
                      "    });\r",
                      "\r",
                      "    pm.test(`Check the Status code ${jsonData.status}`, function(){\r",
                      "        pm.expect(pm.response.code).to.be.oneOf(status);\r",
                      "    });\r",
                      "\r",
                      "    pm.test(\"Body matches multiple string\",function(){\r",
                      "    pm.expect(pm.response.text()).to.include(\"id\");\r",
                      "    pm.expect(pm.response.text()).to.include(\"name\");\r",
                      "    pm.expect(pm.response.text()).to.include(\"email\");\r",
                      "});\r",
                      "\r",
                      "}\r",
                      "\r",
                      ""
                    ],
                    "_lastExecutionId": "55d3989d-79a3-476b-87c3-020290feeec2"
                  }
                },
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "5b6727ff-6213-4350-874c-dbaeeb0d0d03",
                    "type": "text/javascript",
                    "exec": [
                      ""
                    ],
                    "_lastExecutionId": "5e07b22a-eb37-441e-b764-c112f7fde3f7"
                  }
                }
              ],
              "protocolProfileBehavior": {
                "disabledSystemHeaders": {}
              }
            },
            {
              "id": "ee9d7916-0288-4df6-a4d2-05ed9c78c4f1",
              "name": "UpdateProfile",
              "request": {
                "url": {
                  "path": [
                    "users",
                    "profile"
                  ],
                  "host": [
                    "{{exp_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "PATCH",
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n    \"name\":\"{{name}}\",\r\n    \"phone\":\"{{random_number}}\",\r\n    \"company\":\"{{$randomCompanyName}}\"\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "auth": {
                  "type": "apikey",
                  "apikey": [
                    {
                      "type": "string",
                      "value": "{{exp_token}}",
                      "key": "value"
                    },
                    {
                      "type": "string",
                      "value": "header",
                      "key": "in"
                    },
                    {
                      "type": "string",
                      "value": "x-auth-token",
                      "key": "key"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "6ab7e932-eb9b-4edc-9edc-b8d42e4162ad",
                    "type": "text/javascript",
                    "exec": [
                      "let jsonData = pm.response.json();\r",
                      "message = [\r",
                      "    \"Access token is not valid or has expired, you will need to login\",\r",
                      "    \"No authentication token specified in x-auth-token header\",\r",
                      "    \"User name must be between 4 and 30 characters\",\r",
                      "    \"Phone number should be between 8 and 20 digits\",\r",
                      "    \"Unauthorized Request\",\r",
                      "    \"Internal Error Server\",\r",
                      "    \"Profile updated successful\",\r",
                      "    \"Not Found\",\r",
                      "    \"Bad Request\"\r",
                      "]\r",
                      "\r",
                      "status = [400,401,404,500,200,201]\r",
                      "// var jsonData1 = pm.response.json();\r",
                      "// pm.environment.set(\"phoneNumber\", jsonData1.data.phone);\r",
                      "\r",
                      "if (jsonData.success === false) {\r",
                      "    pm.test(`**** E R R O R ***** ${jsonData.message}`, function(){\r",
                      "        // pm.expect(jsonData.message).to.eql(\"No authentication token specified in x-auth-token header\");\r",
                      "        pm.expect(jsonData.message).to.be.oneOf(message);\r",
                      "    });\r",
                      "\r",
                      "    pm.test(`Check the multiple error status code ${jsonData.status}`, function(){\r",
                      "        pm.expect(pm.response.code).to.be.oneOf(status);\r",
                      "    });\r",
                      "\r",
                      "\r",
                      "}\r",
                      "else {\r",
                      "    pm.test(`*** S U C C E S S *** ${jsonData.message}`, function(){\r",
                      "        // pm.expect(jsonData.message).to.equal(\"Profile successful\");\r",
                      "        pm.expect(jsonData.message).to.be.oneOf(message);\r",
                      "    });\r",
                      "\r",
                      "    pm.test(\"Check the response time\", function(){\r",
                      "    pm.expect(pm.response.responseTime).to.be.below(6000);\r",
                      "    });\r",
                      "\r",
                      "    pm.test(`Check the Status code ${jsonData.status}`, function(){\r",
                      "        pm.expect(pm.response.code).to.be.oneOf(status);\r",
                      "    });\r",
                      "\r",
                      "    pm.test(\"Body matches multiple string\",function(){\r",
                      "    pm.expect(pm.response.text()).to.include(\"id\");\r",
                      "    pm.expect(pm.response.text()).to.include(\"name\");\r",
                      "    pm.expect(pm.response.text()).to.include(\"email\");\r",
                      "});\r",
                      "\r",
                      "}\r",
                      "\r",
                      ""
                    ],
                    "_lastExecutionId": "bf535ed4-ea27-433b-95ed-0405878d634c"
                  }
                },
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "1dd9ce14-2fea-48d5-b628-446e36acb961",
                    "type": "text/javascript",
                    "exec": [
                      "pm.environment.set(\"random_number\",_.random(1000000000,9999999999));\r",
                      "\r",
                      "\r",
                      ""
                    ],
                    "_lastExecutionId": "81adb337-1695-4fed-b265-391f869dd222"
                  }
                }
              ]
            },
            {
              "id": "03c5b9ed-2c86-4338-932a-d93a799c2d8d",
              "name": "ForgotPassword",
              "request": {
                "url": {
                  "path": [
                    "users",
                    "forgot-password"
                  ],
                  "host": [
                    "{{exp_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n    \"email\":\"{{randomEmail}}\"\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "auth": {
                  "type": "apikey",
                  "apikey": [
                    {
                      "type": "string",
                      "value": "{{exp_token}}",
                      "key": "value"
                    },
                    {
                      "type": "string",
                      "value": "header",
                      "key": "in"
                    },
                    {
                      "type": "string",
                      "value": "x-auth-token",
                      "key": "key"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "72c44319-e1e0-49ac-91f7-f3f0cd439f93",
                    "type": "text/javascript",
                    "exec": [
                      "let jsonData = pm.response.json();\r",
                      "let jsonEmail = JSON.parse(pm.request.body.raw).email;\r",
                      "\r",
                      "message = [\r",
                      "    \"Access token is not valid or has expired, you will need to login\",\r",
                      "    \"No authentication token specified in x-auth-token header\",\r",
                      "    \"Unauthorized Request\",\r",
                      "    \"Internal Error Server\",\r",
                      "    `Password reset link successfully sent to ${pm.environment.get(\"email\")}. Please verify by clicking on the given link`,\r",
                      "    \"Not Found\",\r",
                      "    \"Bad Request\",\r",
                      "    \"A valid email address is required\"\r",
                      "]\r",
                      "\r",
                      "status = [400,401,404,500,200,201]\r",
                      "// var jsonData1 = pm.response.json();\r",
                      "// pm.environment.set(\"phoneNumber\", jsonData1.data.phone);\r",
                      "\r",
                      "if (jsonData.success === false) {\r",
                      "    pm.test(`**** E R R O R ***** ${jsonData.message}`, function(){\r",
                      "        // pm.expect(jsonData.message).to.eql(\"No authentication token specified in x-auth-token header\");\r",
                      "        pm.expect(jsonData.message).to.be.oneOf(message);\r",
                      "    });\r",
                      "\r",
                      "    pm.test(`Check the multiple error status code ${jsonData.status}`, function(){\r",
                      "        pm.expect(pm.response.code).to.be.oneOf(status);\r",
                      "    });\r",
                      "\r",
                      "\r",
                      "}\r",
                      "else {\r",
                      "    pm.test(`*** S U C C E S S *** ${jsonData.message}`, function(){\r",
                      "        // pm.expect(jsonData.message).to.equal(\"Profile successful\");\r",
                      "        pm.expect(jsonData.message).to.be.oneOf(message);\r",
                      "    });\r",
                      "\r",
                      "    pm.test(\"Check the response time\", function(){\r",
                      "    pm.expect(pm.response.responseTime).to.be.below(6000);\r",
                      "    });\r",
                      "\r",
                      "    pm.test(`Check the Status code ${jsonData.status}`, function(){\r",
                      "        pm.expect(pm.response.code).to.be.oneOf(status);\r",
                      "    });\r",
                      "\r",
                      "    pm.test(\"Body matches multiple string\",function(){\r",
                      "    pm.expect(pm.response.text()).to.include(\"message\");\r",
                      "});\r",
                      "\r",
                      "}\r",
                      "\r",
                      ""
                    ],
                    "_lastExecutionId": "a3803636-b917-4048-8873-b62ae1f022d6"
                  }
                },
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "6236deb0-9668-46d8-bb96-97cc86eeb0fa",
                    "type": "text/javascript",
                    "exec": [
                      ""
                    ],
                    "_lastExecutionId": "148f797c-8661-4a45-97c4-527fe81fce77"
                  }
                }
              ]
            },
            {
              "id": "eea8198b-64d4-43e4-b554-aefaae2516cd",
              "name": "GetEmailMessage",
              "request": {
                "url": {
                  "protocol": "https",
                  "path": [
                    "gmail",
                    "v1",
                    "users",
                    "{{user_email_id}}",
                    "messages",
                    ""
                  ],
                  "host": [
                    "gmail",
                    "googleapis",
                    "com"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET",
                "auth": {
                  "type": "oauth2",
                  "oauth2": [
                    {
                      "type": "boolean",
                      "value": false,
                      "key": "useBrowser"
                    },
                    {
                      "type": "string",
                      "value": "{{Scope}}",
                      "key": "scope"
                    },
                    {
                      "type": "string",
                      "value": "{{Client_Secret}}",
                      "key": "clientSecret"
                    },
                    {
                      "type": "string",
                      "value": "{{Client_ID}}",
                      "key": "clientId"
                    },
                    {
                      "type": "string",
                      "value": "{{Access_Token_URL}}",
                      "key": "accessTokenUrl"
                    },
                    {
                      "type": "string",
                      "value": "{{Auth_URL}}",
                      "key": "authUrl"
                    },
                    {
                      "type": "string",
                      "value": "{{Callback_URL}}",
                      "key": "redirect_uri"
                    },
                    {
                      "type": "string",
                      "value": "authorization_code",
                      "key": "grant_type"
                    },
                    {
                      "type": "string",
                      "value": "email_token",
                      "key": "tokenName"
                    },
                    {
                      "type": "string",
                      "value": "header",
                      "key": "addTokenTo"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "705020a4-73b3-44df-86ff-a5984e094d10",
                    "type": "text/javascript",
                    "exec": [
                      "var jsonData = pm.response.json();\r",
                      "pm.environment.set(\"messageId\", jsonData.messages[0].id);\r",
                      "\r",
                      ""
                    ],
                    "_lastExecutionId": "eeef6f2d-f5fd-4a00-be9c-25555c6fa5bc"
                  }
                },
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "cdf7837a-853f-442c-8e05-996129213a95",
                    "type": "text/javascript",
                    "exec": [
                      "var newRefreshToken = pm.environment.get(\"access_token\");\r",
                      "\r",
                      "pm.environment.set(\"refresh_token\", newRefreshToken);"
                    ],
                    "_lastExecutionId": "94790536-1730-42ee-886b-f2872e8a5fee"
                  }
                }
              ]
            },
            {
              "id": "f053ddc8-a8a6-4796-a23f-c89737b34582",
              "name": "GetMessageByID",
              "request": {
                "url": {
                  "protocol": "https",
                  "path": [
                    "gmail",
                    "v1",
                    "users",
                    "{{user_email_id}}",
                    "messages",
                    "{{messageId}}"
                  ],
                  "host": [
                    "gmail",
                    "googleapis",
                    "com"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "multipart/mixed"
                  }
                ],
                "method": "GET",
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "{{access_token}}",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "d94857cd-ae23-40c6-ae38-5f7aaca3e833",
                    "type": "text/javascript",
                    "exec": [
                      "\r",
                      "const response = pm.response.json();\r",
                      "\r",
                      "pm.environment.set(\"message_Body\", response.payload.body.data);\r",
                      "\r",
                      "var atob = require('atob');\r",
                      "\r",
                      "\r",
                      "var base64Data = pm.environment.get(\"message_Body\");\r",
                      "var decodedData = atob(base64Data);\r",
                      "postman.setEnvironmentVariable(\"rest_password\",decodedData);\r",
                      "var tokenRegex = /Reset password link: (https:\\/\\/practice\\.expandtesting\\.com\\/notes\\/app\\/reset-password\\/([\\w\\d]+))[^ ]+/;\r",
                      "var tokenMatch = decodedData.match(tokenRegex);\r",
                      "if (tokenMatch && tokenMatch[2]) {\r",
                      "    var resetPasswordToken = tokenMatch[2];\r",
                      "    \r",
                      "    // Set the reset password link as a Postman environment variable for later use\r",
                      "    pm.environment.set(\"resetPasswordToken\", resetPasswordToken);\r",
                      "    \r",
                      "    // Log the reset password link\r",
                      "    console.log(\"Reset Password Token: \" + resetPasswordToken);\r",
                      "} else {\r",
                      "    console.log(\"Reset password token not found in the response.\");\r",
                      "}\r",
                      "console.log(decodedData);\r",
                      "\r",
                      "\r",
                      "\r",
                      "\r",
                      "\r",
                      "\r",
                      "\r",
                      "\r",
                      "\r",
                      "\r",
                      "\r",
                      ""
                    ],
                    "_lastExecutionId": "4816be40-7f3a-489e-b23c-14c698a58ddc"
                  }
                },
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "8349aa22-c992-434e-9e35-e5fc8ef4a245",
                    "type": "text/javascript",
                    "exec": [
                      ""
                    ],
                    "_lastExecutionId": "e5ddbcb0-9830-4e57-9232-851987938e7d"
                  }
                }
              ]
            },
            {
              "id": "8d884a10-0abd-48de-9b8a-47bfc7ff13cd",
              "name": "verify-reset-password-token",
              "request": {
                "url": {
                  "path": [
                    "users",
                    "verify-reset-password-token"
                  ],
                  "host": [
                    "{{exp_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "accept",
                    "value": "application/json"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/x-www-form-urlencoded"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "urlencoded",
                  "urlencoded": [
                    {
                      "key": "token",
                      "value": "{{resetPasswordToken}}"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "799e647c-efdd-4528-bf8c-ec8d1e1a4b55",
                    "type": "text/javascript",
                    "exec": [
                      "let jsonData = pm.response.json();\r",
                      "\r",
                      "message = [\r",
                      "    \"The provided password reset token is valid\",\r",
                      "    \"Bad Request\",\r",
                      "    \"Internal Error Server\",\r",
                      "    \"The provided password reset token is invalid or has expired\"\r",
                      "]\r",
                      "\r",
                      "status = [200,400,401,500]\r",
                      "\r",
                      "if (jsonData.success === false) {\r",
                      "    pm.test(`**** E R R O R ***** ${jsonData.message}`, function(){\r",
                      "        // pm.expect(jsonData.message).to.eql(\"No authentication token specified in x-auth-token header\");\r",
                      "        pm.expect(jsonData.message).to.be.oneOf(message);\r",
                      "    });\r",
                      "\r",
                      "    pm.test(`Check the multiple error status code ${jsonData.status}`, function(){\r",
                      "        pm.expect(pm.response.code).to.be.oneOf(status);\r",
                      "    });\r",
                      "\r",
                      "\r",
                      "}\r",
                      "else {\r",
                      "    pm.test(`*** S U C C E S S *** ${jsonData.message}`, function(){\r",
                      "        // pm.expect(jsonData.message).to.equal(\"Profile successful\");\r",
                      "        pm.expect(jsonData.message).to.be.oneOf(message);\r",
                      "    });\r",
                      "\r",
                      "    pm.test(\"Check the response time\", function(){\r",
                      "    pm.expect(pm.response.responseTime).to.be.below(6000);\r",
                      "    });\r",
                      "\r",
                      "    pm.test(`Check the Status code ${jsonData.status}`, function(){\r",
                      "        pm.expect(pm.response.code).to.be.oneOf(status);\r",
                      "    });\r",
                      "\r",
                      "    pm.test(\"Body matches multiple string\",function(){\r",
                      "    pm.expect(pm.response.text()).to.include(\"message\");\r",
                      "});\r",
                      "\r",
                      "}\r",
                      "\r",
                      ""
                    ],
                    "_lastExecutionId": "c1d6d515-485d-45cb-ab2b-15662e3830f7"
                  }
                },
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "46fb041c-0790-4ccb-a117-d6dcbb44aa15",
                    "type": "text/javascript",
                    "exec": [
                      ""
                    ],
                    "_lastExecutionId": "48a955fd-f392-4b00-9034-2a273d9fea6d"
                  }
                }
              ]
            },
            {
              "id": "740f7a4b-9db6-4b38-a333-0ad712a2b2a2",
              "name": "reset-password",
              "request": {
                "url": {
                  "protocol": "https",
                  "path": [
                    "notes",
                    "api",
                    "users",
                    "reset-password"
                  ],
                  "host": [
                    "practice",
                    "expandtesting",
                    "com"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "accept",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n    \"token\":\"{{resetPasswordToken}}\",\r\n    \"newPassword\":\"{{$randomPassword}}\"\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "7cdc8324-5612-42e4-8f85-49037412238b",
                    "type": "text/javascript",
                    "exec": [
                      "let jsonData = pm.response.json();\r",
                      "\r",
                      "let newPassword = JSON.parse(pm.request.body.raw).newPassword;\r",
                      "pm.environment.set('password', newPassword);\r",
                      "\r",
                      "\r",
                      "message = [\r",
                      "    \"The password has been successfully reset\",\r",
                      "    \"Token must be between 64 characters\",\r",
                      "    \"Bad Request\",\r",
                      "    \"The password was successfully updated\",\r",
                      "    \"Internal Error Server\",\r",
                      "    \"New password must be between 6 and 30 characters\",\r",
                      "    \"The password reset token is invalid or has expired\"\r",
                      "]\r",
                      "\r",
                      "status = [200,400,401,500]\r",
                      "\r",
                      "if (jsonData.success === false) {\r",
                      "    pm.test(`**** E R R O R ***** ${jsonData.message}`, function(){\r",
                      "        // pm.expect(jsonData.message).to.eql(\"No authentication token specified in x-auth-token header\");\r",
                      "        pm.expect(jsonData.message).to.be.oneOf(message);\r",
                      "    });\r",
                      "\r",
                      "    pm.test(`Check the multiple error status code ${jsonData.status}`, function(){\r",
                      "        pm.expect(pm.response.code).to.be.oneOf(status);\r",
                      "    });\r",
                      "\r",
                      "\r",
                      "}\r",
                      "else {\r",
                      "    pm.test(`*** S U C C E S S *** ${jsonData.message}`, function(){\r",
                      "        // pm.expect(jsonData.message).to.equal(\"Profile successful\");\r",
                      "        pm.expect(jsonData.message).to.be.oneOf(message);\r",
                      "    });\r",
                      "\r",
                      "    pm.test(\"Check the response time\", function(){\r",
                      "    pm.expect(pm.response.responseTime).to.be.below(6000);\r",
                      "    });\r",
                      "\r",
                      "    pm.test(`Check the Status code ${jsonData.status}`, function(){\r",
                      "        pm.expect(pm.response.code).to.be.oneOf(status);\r",
                      "    });\r",
                      "\r",
                      "    pm.test(\"Body matches multiple string\",function(){\r",
                      "    pm.expect(pm.response.text()).to.include(\"message\");\r",
                      "});\r",
                      "\r",
                      "}\r",
                      "\r",
                      "\r",
                      ""
                    ],
                    "_lastExecutionId": "5d234639-2098-4725-8401-094ce8fa851b"
                  }
                },
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "1268a1ec-48a3-4dfd-8fc8-3c14d0fa7f28",
                    "type": "text/javascript",
                    "exec": [
                      ""
                    ],
                    "_lastExecutionId": "3e5db1d1-0c8c-4a29-8797-f14a01a4bedc"
                  }
                }
              ]
            },
            {
              "id": "93821c3b-e028-4eda-a749-05d87d7e6a94",
              "name": "change-password",
              "request": {
                "url": {
                  "path": [
                    "users",
                    "change-password"
                  ],
                  "host": [
                    "{{exp_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "accept",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n    \"currentPassword\":\"{{password}}\",\r\n    \"newPassword\":\"{{$randomPassword}}\"\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "auth": {
                  "type": "apikey",
                  "apikey": [
                    {
                      "type": "string",
                      "value": "{{exp_token}}",
                      "key": "value"
                    },
                    {
                      "type": "string",
                      "value": "x-auth-token",
                      "key": "key"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "3eca22f1-7d4a-4832-8b68-54badb876aa6",
                    "type": "text/javascript",
                    "exec": [
                      "pm.environment.get(\"password\");\r",
                      "\r",
                      "let newPassword = JSON.parse(pm.request.body.raw).newPassword;\r",
                      "pm.environment.set('password', newPassword);\r",
                      "\r",
                      "let jsonData = pm.response.json();\r",
                      "message = [\r",
                      "    \"The password has been successfully reset\",\r",
                      "    \"Token must be between 64 characters\",\r",
                      "    \"Bad Request\",\r",
                      "    \"The password was successfully updated\",\r",
                      "    \"Internal Error Server\",\r",
                      "    \"New password must be between 6 and 30 characters\",\r",
                      "    \"The password reset token is invalid or has expired\"\r",
                      "]\r",
                      "\r",
                      "status = [200,400,401,500]\r",
                      "\r",
                      "if (jsonData.success === false) {\r",
                      "    pm.test(`**** E R R O R ***** ${jsonData.message}`, function(){\r",
                      "        // pm.expect(jsonData.message).to.eql(\"No authentication token specified in x-auth-token header\");\r",
                      "        pm.expect(jsonData.message).to.be.oneOf(message);\r",
                      "    });\r",
                      "\r",
                      "    pm.test(`Check the multiple error status code ${jsonData.status}`, function(){\r",
                      "        pm.expect(pm.response.code).to.be.oneOf(status);\r",
                      "    });\r",
                      "\r",
                      "\r",
                      "}\r",
                      "else {\r",
                      "    pm.test(`*** S U C C E S S *** ${jsonData.message}`, function(){\r",
                      "        // pm.expect(jsonData.message).to.equal(\"Profile successful\");\r",
                      "        pm.expect(jsonData.message).to.be.oneOf(message);\r",
                      "    });\r",
                      "\r",
                      "    pm.test(\"Check the response time\", function(){\r",
                      "    pm.expect(pm.response.responseTime).to.be.below(6000);\r",
                      "    });\r",
                      "\r",
                      "    pm.test(`Check the Status code ${jsonData.status}`, function(){\r",
                      "        pm.expect(pm.response.code).to.be.oneOf(status);\r",
                      "    });\r",
                      "\r",
                      "    pm.test(\"Body matches multiple string\",function(){\r",
                      "    pm.expect(pm.response.text()).to.include(\"message\");\r",
                      "});\r",
                      "\r",
                      "}\r",
                      ""
                    ],
                    "_lastExecutionId": "64be3638-86ca-4200-b966-7a137b03eb2e"
                  }
                },
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "aa473681-09fc-4673-a2fe-7012cf4e42e9",
                    "type": "text/javascript",
                    "exec": [
                      "console.log(pm.environment.get(\"password\"));\r",
                      "\r",
                      "\r",
                      "\r",
                      ""
                    ],
                    "_lastExecutionId": "fb6fc291-ccb6-46ad-9bb8-0e4bf2cf736d"
                  }
                }
              ]
            },
            {
              "id": "f4c8e78d-5700-43a2-8e20-cb1a0de26ce9",
              "name": "UserLogout",
              "request": {
                "url": {
                  "path": [
                    "users",
                    "logout"
                  ],
                  "host": [
                    "{{exp_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "accept",
                    "value": "application/json"
                  }
                ],
                "method": "DELETE",
                "auth": {
                  "type": "apikey",
                  "apikey": [
                    {
                      "type": "string",
                      "value": "{{exp_token}}",
                      "key": "value"
                    },
                    {
                      "type": "string",
                      "value": "x-auth-token",
                      "key": "key"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "43a38bb6-0063-463b-9a7b-ea0674d209fe",
                    "type": "text/javascript",
                    "exec": [
                      "let jsonData = pm.response.json();\r",
                      "message = [\r",
                      "    \"User has been successfully logged out\",\r",
                      "    \"Token must be between 64 characters\",\r",
                      "    \"Bad Request\",\r",
                      "    \"Access token is not valid or has expired, you will need to login\",\r",
                      "    \"No authentication token specified in x-auth-token header\",\r",
                      "    \"Internal Error Server\",\r",
                      "    \"Successful Request\",\r",
                      "    \"Unauthorized Request\"\r",
                      "]\r",
                      "\r",
                      "status = [200,400,401,500]\r",
                      "\r",
                      "if (jsonData.success === false) {\r",
                      "    pm.test(`**** E R R O R ***** ${jsonData.message}`, function(){\r",
                      "        // pm.expect(jsonData.message).to.eql(\"No authentication token specified in x-auth-token header\");\r",
                      "        pm.expect(jsonData.message).to.be.oneOf(message);\r",
                      "    });\r",
                      "\r",
                      "    pm.test(`Check the multiple error status code ${jsonData.status}`, function(){\r",
                      "        pm.expect(pm.response.code).to.be.oneOf(status);\r",
                      "    });\r",
                      "\r",
                      "\r",
                      "}\r",
                      "else {\r",
                      "    pm.test(`*** S U C C E S S *** ${jsonData.message}`, function(){\r",
                      "        // pm.expect(jsonData.message).to.equal(\"Profile successful\");\r",
                      "        pm.expect(jsonData.message).to.be.oneOf(message);\r",
                      "    });\r",
                      "\r",
                      "    pm.test(\"Check the response time\", function(){\r",
                      "    pm.expect(pm.response.responseTime).to.be.below(6000);\r",
                      "    });\r",
                      "\r",
                      "    pm.test(`Check the Status code ${jsonData.status}`, function(){\r",
                      "        pm.expect(pm.response.code).to.be.oneOf(status);\r",
                      "    });\r",
                      "\r",
                      "    pm.test(\"Body matches multiple string\",function(){\r",
                      "    pm.expect(pm.response.text()).to.include(\"message\");\r",
                      "});\r",
                      "\r",
                      "}\r",
                      "\r",
                      "postman.setNextRequest(null);"
                    ],
                    "_lastExecutionId": "c7d982d4-a8dc-460f-a106-6e0c01643e82"
                  }
                },
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "e8ae662d-a080-4bf5-a817-754113435b5e",
                    "type": "text/javascript",
                    "exec": [
                      ""
                    ],
                    "_lastExecutionId": "0b0d404e-4117-40fc-9982-a95619506052"
                  }
                }
              ]
            }
          ],
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "3380df96-f386-44be-9dc8-eb145a929d13",
                "type": "text/javascript",
                "exec": [
                  ""
                ],
                "_lastExecutionId": "c2613397-fddf-4d46-99b6-9ffc9166e0a8"
              }
            },
            {
              "listen": "test",
              "script": {
                "id": "18c4e0bb-9477-4e5f-b627-d550e666c7d3",
                "type": "text/javascript",
                "exec": [
                  ""
                ],
                "_lastExecutionId": "78225eb1-cbe5-408b-978b-a1bf2d2b693c"
              }
            }
          ],
          "variable": [
            {
              "type": "string",
              "value": "https://practice.expandtesting.com/notes/api",
              "key": "exp_url"
            }
          ],
          "info": {
            "_postman_id": "723ea9c3-0635-4605-b90c-d6d9e9835d8c",
            "name": "expandtesting",
            "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
          }
        },
        "cursor": {
          "ref": "8c680752-290f-4c38-ace4-856b0bd8cb56",
          "length": 12,
          "cycles": 1,
          "position": 2,
          "iteration": 0,
          "httpRequestId": "69d50afe-4b0f-4382-9214-badf24234ead",
          "scriptId": "cc8daf67-c0f2-4843-9223-e47d8fe754ec",
          "execution": "4a906166-3676-408b-bc6f-6c09add962a5"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 2,
          "test": "Check the body message",
          "message": "expected 'Password must be between 6 and 30 cha…' to deeply equal 'Login successful'",
          "stack": "AssertionError: expected 'Password must be between 6 and 30 cha…' to deeply equal 'Login successful'\n   at Object.eval sandbox-script.js:3:3)",
          "checksum": "be46f15dbc8eb6f74f493b499a226cb7",
          "id": "34e71d46-f10c-4f67-b1e9-0930a6a44a78",
          "timestamp": 1698733439340,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 3,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 3,
              "native": false
            }
          ]
        },
        "at": "assertion:2 in test-script",
        "source": {
          "id": "1da8b1e7-3198-4c60-9c34-4a1e8b7e8b15",
          "name": "UserLogin",
          "request": {
            "url": {
              "path": [
                "users",
                "login"
              ],
              "host": [
                "{{exp_url}}"
              ],
              "query": [],
              "variable": []
            },
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\r\n    \"email\":\"{{randomEmail}}\",\r\n    \"password\":\"{{password}}\"\r\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "cc8daf67-c0f2-4843-9223-e47d8fe754ec",
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Check the status code is 200\", function(){\r",
                  "    pm.response.to.have.status(200);\r",
                  "});\r",
                  "\r",
                  "var jsonData = pm.response.json();\r",
                  "\r",
                  "pm.test(\"Check the success message\", function(){\r",
                  "    pm.expect(jsonData.success).to.eql(true);\r",
                  "});\r",
                  "\r",
                  "pm.test(\"Check the body message\", function(){\r",
                  "    pm.expect(jsonData.message).to.eql(\"Login successful\");\r",
                  "});\r",
                  "\r",
                  "pm.environment.set(\"exp_token\", jsonData.data.token);\r",
                  "\r",
                  "pm.test(\"Verify the values are not null\", function(){\r",
                  "    pm.expect(jsonData.data.id, \"Id is not a null\").to.not.be.null;\r",
                  "    pm.expect(jsonData.data.name, \"name is not a null\").to.not.be.null;\r",
                  "    pm.expect(jsonData.data.email, \"email is not a null\").to.not.be.null;\r",
                  "    pm.expect(jsonData.data.token, \"token is not a null\").to.not.be.null;\r",
                  "});\r",
                  "\r",
                  "pm.test(\"Check the response time\", function(){\r",
                  "    pm.expect(pm.response.responseTime).to.below(2000);\r",
                  "});\r",
                  "\r",
                  ""
                ],
                "_lastExecutionId": "4a906166-3676-408b-bc6f-6c09add962a5"
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "id": "98d0941e-d03e-4ab7-a7b0-84826ad7708a",
                "type": "text/javascript",
                "exec": [
                  ""
                ],
                "_lastExecutionId": "2f4a3493-6a43-4652-8c74-458390f9ecf9"
              }
            }
          ]
        },
        "parent": {
          "_": {
            "postman_id": "723ea9c3-0635-4605-b90c-d6d9e9835d8c",
            "exporter_id": "13852941",
            "collection_link": "https://galactic-astronaut-894425.postman.co/workspace/b6dafb4f-3507-4e58-a32d-dd31bf6ab148/collection/13852941-723ea9c3-0635-4605-b90c-d6d9e9835d8c?action=share&source=collection_link&creator=13852941"
          },
          "item": [
            {
              "id": "90407c19-d06c-4337-abb9-4dfc2fa17fc8",
              "name": "health_check",
              "request": {
                "url": {
                  "path": [
                    "health-check"
                  ],
                  "host": [
                    "{{exp_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "b075fb8f-9483-4909-a4a4-cf6344c6642b",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Check the Status code 200\", function(){\r",
                      "    pm.response.to.have.status(200);\r",
                      "});\r",
                      "\r",
                      "var jsonData = pm.response.json();\r",
                      "\r",
                      "pm.test(\"Check the success code in body\", function(){\r",
                      "    pm.expect(jsonData.success).to.eql(true);\r",
                      "});\r",
                      "\r",
                      "pm.test(\"Check the Status code in body\", function(){\r",
                      "    pm.expect(jsonData.status).to.eql(200);\r",
                      "});\r",
                      "\r",
                      "pm.test(\"Check the message in body\", function(){\r",
                      "    pm.expect(jsonData.message).to.eql(\"Notes API is Running\");\r",
                      "});\r",
                      "\r",
                      "\r",
                      ""
                    ],
                    "_lastExecutionId": "dcf22f24-f95a-4d61-981a-68f2474c0b1d"
                  }
                },
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "15079d7d-2fc3-468b-b923-1fd697b2156e",
                    "type": "text/javascript",
                    "exec": [
                      ""
                    ],
                    "_lastExecutionId": "a57965c9-dfeb-425b-a87b-14b41a981af7"
                  }
                }
              ]
            },
            {
              "id": "d3b70abb-4c44-4d96-b946-e8ef2e19907f",
              "name": "RegisterUser",
              "request": {
                "url": {
                  "path": [
                    "users",
                    "register"
                  ],
                  "host": [
                    "{{exp_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n    \"name\":\"{{$randomFullName}}\",\r\n    \"email\":\"{{randomEmail}}\",\r\n    \"password\":\"{{$randomPassword}}\"\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "4f0c3c3d-4171-4bea-b8a8-3fd567809f0d",
                    "type": "text/javascript",
                    "exec": [
                      "var jsonData = pm.response.json();\r",
                      "\r",
                      "pm.test(\"Check the success msg is true in body?\", function(){\r",
                      "    pm.expect(jsonData.success).to.eql(true);\r",
                      "});\r",
                      "\r",
                      "pm.test(\"Check the body message\", function(){\r",
                      "    pm.expect(jsonData.message).to.eql(\"User account created successfully\");\r",
                      "});\r",
                      "\r",
                      "pm.test(\"Verify the values are not null\", function(){\r",
                      "    pm.expect(jsonData.data.id, \"Id is not null\").to.not.be.null;\r",
                      "    pm.expect(jsonData.data.name, \"name is not null\").to.not.be.null;\r",
                      "    pm.expect(jsonData.data.email, \"email is not null\").to.not.be.null;\r",
                      "});\r",
                      "\r",
                      "pm.test(\"response property matching an environment variable\", function(){\r",
                      "    pm.expect(jsonData.name).to.eql(pm.environment.get(\"name\"));\r",
                      "});\r",
                      "\r",
                      "pm.test(\"Check the response time\", function(){\r",
                      "    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
                      "});\r",
                      "\r",
                      "pm.environment.set(\"id\", jsonData.data.id);\r",
                      "pm.environment.set(\"name\", jsonData.data.name);\r",
                      "\r",
                      "let password = JSON.parse(pm.request.body.raw).password;\r",
                      "pm.environment.set('password', password);\r",
                      "\r",
                      "message = [\r",
                      "    \"Access token is not valid or has expired, you will need to login\",\r",
                      "    \"No authentication token specified in x-auth-token header\",\r",
                      "    \"User name must be between 4 and 30 characters\",\r",
                      "    \"Phone number should be between 8 and 20 digits\",\r",
                      "    \"Unauthorized Request\",\r",
                      "    \"Internal Error Server\",\r",
                      "    \"Profile updated successful\",\r",
                      "    \"User account created successfully\",\r",
                      "    \"Not Found\",\r",
                      "    \"Bad Request\",\r",
                      "    \"An account already exists with the same email address\"\r",
                      "];\r",
                      "\r",
                      "status = [400,401,404,409,500,200,201];\r",
                      "\r",
                      "if (jsonData.success === false) {\r",
                      "    pm.test(`**** E R R O R ***** ${jsonData.message}`, function(){\r",
                      "        pm.expect(jsonData.message).to.be.oneOf(message);\r",
                      "    });\r",
                      "\r",
                      "    pm.test(`Check the multiple error status code ${jsonData.status}`, function(){\r",
                      "        pm.expect(pm.response.code).to.be.oneOf(status);\r",
                      "    });\r",
                      "}\r",
                      "else {\r",
                      "    pm.test(`*** S U C C E S S *** ${jsonData.message}`, function(){\r",
                      "        pm.expect(jsonData.message).to.be.oneOf(message);\r",
                      "    });\r",
                      "\r",
                      "    pm.test(`Check the Status code ${jsonData.status}`, function(){\r",
                      "        pm.expect(pm.response.code).to.be.oneOf(status);\r",
                      "    });\r",
                      "}"
                    ],
                    "_lastExecutionId": "2fbfcb58-035a-4d0d-afa2-7fc9d5239e13"
                  }
                },
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "3483ef69-d6b6-4835-8746-973a3f7a159e",
                    "type": "text/javascript",
                    "exec": [
                      "\r",
                      "// // Define the incrementEmail function\r",
                      "// function incrementEmail(email) {\r",
                      "//     const match = email.match(/\\+a(\\d+)/);\r",
                      "\r",
                      "//     if (match) {\r",
                      "//         const currentNumber = parseInt(match[1]);\r",
                      "//         const nextNumber = currentNumber + 1;\r",
                      "//         const incrementedEmail = email.replace(/\\+a\\d+/, `+a${nextNumber}`);\r",
                      "//         return incrementedEmail;\r",
                      "//     }\r",
                      "\r",
                      "//     return email;\r",
                      "// }\r",
                      "\r",
                      "\r",
                      "// const originalEmail = pm.environment.get(\"email\");\r",
                      "\r",
                      "\r",
                      "// if (originalEmail) {\r",
                      "//     // Use the incrementEmail function to get the incremented email\r",
                      "//     const incrementedEmail = incrementEmail(originalEmail);\r",
                      "\r",
                      "//     // Set the incremented email back to the environment\r",
                      "//     pm.environment.set(\"email\", incrementedEmail);\r",
                      "\r",
                      "//     console.log(\"OriginalEmail:\", originalEmail);\r",
                      "//     console.log(\"IncrementedEmail:\", incrementedEmail);\r",
                      "// } else {\r",
                      "//     console.error(\"Email environment variable not found.\");\r",
                      "// }\r",
                      "\r",
                      "// console.log(pm.environment.get(\"email\"));\r",
                      "\r",
                      "\r",
                      "// -------------------------------------------------------------------\r",
                      "// Define the base part of the email address\r",
                      "const baseEmail = pm.environment.get(\"baseEmail\");\r",
                      "\r",
                      "// Generate a random number between min and max (inclusive)\r",
                      "function getRandomNumber(min, max) {\r",
                      "    return Math.floor(Math.random() * (max - min + 1)) + min;\r",
                      "}\r",
                      "\r",
                      "// Generate a random sequence like +a151, +a152, +a153, and so on\r",
                      "const randomSequence = `+a${getRandomNumber(1, 999)}`;\r",
                      "\r",
                      "// Combine the base and random sequence to create the random email address\r",
                      "const randomEmail = `${baseEmail}${randomSequence}@gmail.com`;\r",
                      "\r",
                      "// Set the random email address as an environment variable for your request\r",
                      "pm.environment.set('randomEmail', randomEmail);\r",
                      "\r",
                      "\r",
                      ""
                    ],
                    "_lastExecutionId": "f0df73d6-9875-49de-aaed-2ffb46745ff0"
                  }
                }
              ]
            },
            {
              "id": "1da8b1e7-3198-4c60-9c34-4a1e8b7e8b15",
              "name": "UserLogin",
              "request": {
                "url": {
                  "path": [
                    "users",
                    "login"
                  ],
                  "host": [
                    "{{exp_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n    \"email\":\"{{randomEmail}}\",\r\n    \"password\":\"{{password}}\"\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "cc8daf67-c0f2-4843-9223-e47d8fe754ec",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Check the status code is 200\", function(){\r",
                      "    pm.response.to.have.status(200);\r",
                      "});\r",
                      "\r",
                      "var jsonData = pm.response.json();\r",
                      "\r",
                      "pm.test(\"Check the success message\", function(){\r",
                      "    pm.expect(jsonData.success).to.eql(true);\r",
                      "});\r",
                      "\r",
                      "pm.test(\"Check the body message\", function(){\r",
                      "    pm.expect(jsonData.message).to.eql(\"Login successful\");\r",
                      "});\r",
                      "\r",
                      "pm.environment.set(\"exp_token\", jsonData.data.token);\r",
                      "\r",
                      "pm.test(\"Verify the values are not null\", function(){\r",
                      "    pm.expect(jsonData.data.id, \"Id is not a null\").to.not.be.null;\r",
                      "    pm.expect(jsonData.data.name, \"name is not a null\").to.not.be.null;\r",
                      "    pm.expect(jsonData.data.email, \"email is not a null\").to.not.be.null;\r",
                      "    pm.expect(jsonData.data.token, \"token is not a null\").to.not.be.null;\r",
                      "});\r",
                      "\r",
                      "pm.test(\"Check the response time\", function(){\r",
                      "    pm.expect(pm.response.responseTime).to.below(2000);\r",
                      "});\r",
                      "\r",
                      ""
                    ],
                    "_lastExecutionId": "4a906166-3676-408b-bc6f-6c09add962a5"
                  }
                },
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "98d0941e-d03e-4ab7-a7b0-84826ad7708a",
                    "type": "text/javascript",
                    "exec": [
                      ""
                    ],
                    "_lastExecutionId": "2f4a3493-6a43-4652-8c74-458390f9ecf9"
                  }
                }
              ]
            },
            {
              "id": "3f4af57c-fb9c-4a3c-8c2b-0f9b603b0679",
              "name": "GetProfile",
              "request": {
                "url": {
                  "path": [
                    "users",
                    "profile"
                  ],
                  "host": [
                    "{{exp_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET",
                "auth": {
                  "type": "apikey",
                  "apikey": [
                    {
                      "type": "string",
                      "value": "{{exp_token}}",
                      "key": "value"
                    },
                    {
                      "type": "string",
                      "value": "header",
                      "key": "in"
                    },
                    {
                      "type": "string",
                      "value": "x-auth-token",
                      "key": "key"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "56a6399c-71a1-414d-b876-9262a848415f",
                    "type": "text/javascript",
                    "exec": [
                      "\r",
                      "let jsonData = pm.response.json();\r",
                      "message = [\r",
                      "    \"Access token is not valid or has expired, you will need to login\",\r",
                      "    \"No authentication token specified in x-auth-token header\",\r",
                      "    \"Bad Request\",\r",
                      "    \"Unauthorized Request\",\r",
                      "    \"Internal Error Server\",\r",
                      "    \"Profile successful\",\r",
                      "    \"Not Found\"\r",
                      "]\r",
                      "\r",
                      "status = [400,401,404,500,200,201]\r",
                      "\r",
                      "if (jsonData.success === false) {\r",
                      "    pm.test(`**** E R R O R ***** ${jsonData.message}`, function(){\r",
                      "        // pm.expect(jsonData.message).to.eql(\"No authentication token specified in x-auth-token header\");\r",
                      "        pm.expect(jsonData.message).to.be.oneOf(message);\r",
                      "    });\r",
                      "\r",
                      "    pm.test(`Check the multiple error status code ${jsonData.status}`, function(){\r",
                      "        pm.expect(pm.response.code).to.be.oneOf(status);\r",
                      "    });\r",
                      "\r",
                      "\r",
                      "}\r",
                      "else {\r",
                      "    pm.test(`*** S U C C E S S *** ${jsonData.message}`, function(){\r",
                      "        // pm.expect(jsonData.message).to.equal(\"Profile successful\");\r",
                      "        pm.expect(jsonData.message).to.be.oneOf(message);\r",
                      "    });\r",
                      "\r",
                      "    pm.test(\"Check the response time\", function(){\r",
                      "    pm.expect(pm.response.responseTime).to.be.below(6000);\r",
                      "    });\r",
                      "\r",
                      "    pm.test(`Check the Status code ${jsonData.status}`, function(){\r",
                      "        pm.expect(pm.response.code).to.be.oneOf(status);\r",
                      "    });\r",
                      "\r",
                      "    pm.test(\"Body matches multiple string\",function(){\r",
                      "    pm.expect(pm.response.text()).to.include(\"id\");\r",
                      "    pm.expect(pm.response.text()).to.include(\"name\");\r",
                      "    pm.expect(pm.response.text()).to.include(\"email\");\r",
                      "});\r",
                      "\r",
                      "}\r",
                      "\r",
                      ""
                    ],
                    "_lastExecutionId": "55d3989d-79a3-476b-87c3-020290feeec2"
                  }
                },
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "5b6727ff-6213-4350-874c-dbaeeb0d0d03",
                    "type": "text/javascript",
                    "exec": [
                      ""
                    ],
                    "_lastExecutionId": "5e07b22a-eb37-441e-b764-c112f7fde3f7"
                  }
                }
              ],
              "protocolProfileBehavior": {
                "disabledSystemHeaders": {}
              }
            },
            {
              "id": "ee9d7916-0288-4df6-a4d2-05ed9c78c4f1",
              "name": "UpdateProfile",
              "request": {
                "url": {
                  "path": [
                    "users",
                    "profile"
                  ],
                  "host": [
                    "{{exp_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "PATCH",
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n    \"name\":\"{{name}}\",\r\n    \"phone\":\"{{random_number}}\",\r\n    \"company\":\"{{$randomCompanyName}}\"\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "auth": {
                  "type": "apikey",
                  "apikey": [
                    {
                      "type": "string",
                      "value": "{{exp_token}}",
                      "key": "value"
                    },
                    {
                      "type": "string",
                      "value": "header",
                      "key": "in"
                    },
                    {
                      "type": "string",
                      "value": "x-auth-token",
                      "key": "key"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "6ab7e932-eb9b-4edc-9edc-b8d42e4162ad",
                    "type": "text/javascript",
                    "exec": [
                      "let jsonData = pm.response.json();\r",
                      "message = [\r",
                      "    \"Access token is not valid or has expired, you will need to login\",\r",
                      "    \"No authentication token specified in x-auth-token header\",\r",
                      "    \"User name must be between 4 and 30 characters\",\r",
                      "    \"Phone number should be between 8 and 20 digits\",\r",
                      "    \"Unauthorized Request\",\r",
                      "    \"Internal Error Server\",\r",
                      "    \"Profile updated successful\",\r",
                      "    \"Not Found\",\r",
                      "    \"Bad Request\"\r",
                      "]\r",
                      "\r",
                      "status = [400,401,404,500,200,201]\r",
                      "// var jsonData1 = pm.response.json();\r",
                      "// pm.environment.set(\"phoneNumber\", jsonData1.data.phone);\r",
                      "\r",
                      "if (jsonData.success === false) {\r",
                      "    pm.test(`**** E R R O R ***** ${jsonData.message}`, function(){\r",
                      "        // pm.expect(jsonData.message).to.eql(\"No authentication token specified in x-auth-token header\");\r",
                      "        pm.expect(jsonData.message).to.be.oneOf(message);\r",
                      "    });\r",
                      "\r",
                      "    pm.test(`Check the multiple error status code ${jsonData.status}`, function(){\r",
                      "        pm.expect(pm.response.code).to.be.oneOf(status);\r",
                      "    });\r",
                      "\r",
                      "\r",
                      "}\r",
                      "else {\r",
                      "    pm.test(`*** S U C C E S S *** ${jsonData.message}`, function(){\r",
                      "        // pm.expect(jsonData.message).to.equal(\"Profile successful\");\r",
                      "        pm.expect(jsonData.message).to.be.oneOf(message);\r",
                      "    });\r",
                      "\r",
                      "    pm.test(\"Check the response time\", function(){\r",
                      "    pm.expect(pm.response.responseTime).to.be.below(6000);\r",
                      "    });\r",
                      "\r",
                      "    pm.test(`Check the Status code ${jsonData.status}`, function(){\r",
                      "        pm.expect(pm.response.code).to.be.oneOf(status);\r",
                      "    });\r",
                      "\r",
                      "    pm.test(\"Body matches multiple string\",function(){\r",
                      "    pm.expect(pm.response.text()).to.include(\"id\");\r",
                      "    pm.expect(pm.response.text()).to.include(\"name\");\r",
                      "    pm.expect(pm.response.text()).to.include(\"email\");\r",
                      "});\r",
                      "\r",
                      "}\r",
                      "\r",
                      ""
                    ],
                    "_lastExecutionId": "bf535ed4-ea27-433b-95ed-0405878d634c"
                  }
                },
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "1dd9ce14-2fea-48d5-b628-446e36acb961",
                    "type": "text/javascript",
                    "exec": [
                      "pm.environment.set(\"random_number\",_.random(1000000000,9999999999));\r",
                      "\r",
                      "\r",
                      ""
                    ],
                    "_lastExecutionId": "81adb337-1695-4fed-b265-391f869dd222"
                  }
                }
              ]
            },
            {
              "id": "03c5b9ed-2c86-4338-932a-d93a799c2d8d",
              "name": "ForgotPassword",
              "request": {
                "url": {
                  "path": [
                    "users",
                    "forgot-password"
                  ],
                  "host": [
                    "{{exp_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n    \"email\":\"{{randomEmail}}\"\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "auth": {
                  "type": "apikey",
                  "apikey": [
                    {
                      "type": "string",
                      "value": "{{exp_token}}",
                      "key": "value"
                    },
                    {
                      "type": "string",
                      "value": "header",
                      "key": "in"
                    },
                    {
                      "type": "string",
                      "value": "x-auth-token",
                      "key": "key"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "72c44319-e1e0-49ac-91f7-f3f0cd439f93",
                    "type": "text/javascript",
                    "exec": [
                      "let jsonData = pm.response.json();\r",
                      "let jsonEmail = JSON.parse(pm.request.body.raw).email;\r",
                      "\r",
                      "message = [\r",
                      "    \"Access token is not valid or has expired, you will need to login\",\r",
                      "    \"No authentication token specified in x-auth-token header\",\r",
                      "    \"Unauthorized Request\",\r",
                      "    \"Internal Error Server\",\r",
                      "    `Password reset link successfully sent to ${pm.environment.get(\"email\")}. Please verify by clicking on the given link`,\r",
                      "    \"Not Found\",\r",
                      "    \"Bad Request\",\r",
                      "    \"A valid email address is required\"\r",
                      "]\r",
                      "\r",
                      "status = [400,401,404,500,200,201]\r",
                      "// var jsonData1 = pm.response.json();\r",
                      "// pm.environment.set(\"phoneNumber\", jsonData1.data.phone);\r",
                      "\r",
                      "if (jsonData.success === false) {\r",
                      "    pm.test(`**** E R R O R ***** ${jsonData.message}`, function(){\r",
                      "        // pm.expect(jsonData.message).to.eql(\"No authentication token specified in x-auth-token header\");\r",
                      "        pm.expect(jsonData.message).to.be.oneOf(message);\r",
                      "    });\r",
                      "\r",
                      "    pm.test(`Check the multiple error status code ${jsonData.status}`, function(){\r",
                      "        pm.expect(pm.response.code).to.be.oneOf(status);\r",
                      "    });\r",
                      "\r",
                      "\r",
                      "}\r",
                      "else {\r",
                      "    pm.test(`*** S U C C E S S *** ${jsonData.message}`, function(){\r",
                      "        // pm.expect(jsonData.message).to.equal(\"Profile successful\");\r",
                      "        pm.expect(jsonData.message).to.be.oneOf(message);\r",
                      "    });\r",
                      "\r",
                      "    pm.test(\"Check the response time\", function(){\r",
                      "    pm.expect(pm.response.responseTime).to.be.below(6000);\r",
                      "    });\r",
                      "\r",
                      "    pm.test(`Check the Status code ${jsonData.status}`, function(){\r",
                      "        pm.expect(pm.response.code).to.be.oneOf(status);\r",
                      "    });\r",
                      "\r",
                      "    pm.test(\"Body matches multiple string\",function(){\r",
                      "    pm.expect(pm.response.text()).to.include(\"message\");\r",
                      "});\r",
                      "\r",
                      "}\r",
                      "\r",
                      ""
                    ],
                    "_lastExecutionId": "a3803636-b917-4048-8873-b62ae1f022d6"
                  }
                },
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "6236deb0-9668-46d8-bb96-97cc86eeb0fa",
                    "type": "text/javascript",
                    "exec": [
                      ""
                    ],
                    "_lastExecutionId": "148f797c-8661-4a45-97c4-527fe81fce77"
                  }
                }
              ]
            },
            {
              "id": "eea8198b-64d4-43e4-b554-aefaae2516cd",
              "name": "GetEmailMessage",
              "request": {
                "url": {
                  "protocol": "https",
                  "path": [
                    "gmail",
                    "v1",
                    "users",
                    "{{user_email_id}}",
                    "messages",
                    ""
                  ],
                  "host": [
                    "gmail",
                    "googleapis",
                    "com"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET",
                "auth": {
                  "type": "oauth2",
                  "oauth2": [
                    {
                      "type": "boolean",
                      "value": false,
                      "key": "useBrowser"
                    },
                    {
                      "type": "string",
                      "value": "{{Scope}}",
                      "key": "scope"
                    },
                    {
                      "type": "string",
                      "value": "{{Client_Secret}}",
                      "key": "clientSecret"
                    },
                    {
                      "type": "string",
                      "value": "{{Client_ID}}",
                      "key": "clientId"
                    },
                    {
                      "type": "string",
                      "value": "{{Access_Token_URL}}",
                      "key": "accessTokenUrl"
                    },
                    {
                      "type": "string",
                      "value": "{{Auth_URL}}",
                      "key": "authUrl"
                    },
                    {
                      "type": "string",
                      "value": "{{Callback_URL}}",
                      "key": "redirect_uri"
                    },
                    {
                      "type": "string",
                      "value": "authorization_code",
                      "key": "grant_type"
                    },
                    {
                      "type": "string",
                      "value": "email_token",
                      "key": "tokenName"
                    },
                    {
                      "type": "string",
                      "value": "header",
                      "key": "addTokenTo"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "705020a4-73b3-44df-86ff-a5984e094d10",
                    "type": "text/javascript",
                    "exec": [
                      "var jsonData = pm.response.json();\r",
                      "pm.environment.set(\"messageId\", jsonData.messages[0].id);\r",
                      "\r",
                      ""
                    ],
                    "_lastExecutionId": "eeef6f2d-f5fd-4a00-be9c-25555c6fa5bc"
                  }
                },
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "cdf7837a-853f-442c-8e05-996129213a95",
                    "type": "text/javascript",
                    "exec": [
                      "var newRefreshToken = pm.environment.get(\"access_token\");\r",
                      "\r",
                      "pm.environment.set(\"refresh_token\", newRefreshToken);"
                    ],
                    "_lastExecutionId": "94790536-1730-42ee-886b-f2872e8a5fee"
                  }
                }
              ]
            },
            {
              "id": "f053ddc8-a8a6-4796-a23f-c89737b34582",
              "name": "GetMessageByID",
              "request": {
                "url": {
                  "protocol": "https",
                  "path": [
                    "gmail",
                    "v1",
                    "users",
                    "{{user_email_id}}",
                    "messages",
                    "{{messageId}}"
                  ],
                  "host": [
                    "gmail",
                    "googleapis",
                    "com"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "multipart/mixed"
                  }
                ],
                "method": "GET",
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "{{access_token}}",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "d94857cd-ae23-40c6-ae38-5f7aaca3e833",
                    "type": "text/javascript",
                    "exec": [
                      "\r",
                      "const response = pm.response.json();\r",
                      "\r",
                      "pm.environment.set(\"message_Body\", response.payload.body.data);\r",
                      "\r",
                      "var atob = require('atob');\r",
                      "\r",
                      "\r",
                      "var base64Data = pm.environment.get(\"message_Body\");\r",
                      "var decodedData = atob(base64Data);\r",
                      "postman.setEnvironmentVariable(\"rest_password\",decodedData);\r",
                      "var tokenRegex = /Reset password link: (https:\\/\\/practice\\.expandtesting\\.com\\/notes\\/app\\/reset-password\\/([\\w\\d]+))[^ ]+/;\r",
                      "var tokenMatch = decodedData.match(tokenRegex);\r",
                      "if (tokenMatch && tokenMatch[2]) {\r",
                      "    var resetPasswordToken = tokenMatch[2];\r",
                      "    \r",
                      "    // Set the reset password link as a Postman environment variable for later use\r",
                      "    pm.environment.set(\"resetPasswordToken\", resetPasswordToken);\r",
                      "    \r",
                      "    // Log the reset password link\r",
                      "    console.log(\"Reset Password Token: \" + resetPasswordToken);\r",
                      "} else {\r",
                      "    console.log(\"Reset password token not found in the response.\");\r",
                      "}\r",
                      "console.log(decodedData);\r",
                      "\r",
                      "\r",
                      "\r",
                      "\r",
                      "\r",
                      "\r",
                      "\r",
                      "\r",
                      "\r",
                      "\r",
                      "\r",
                      ""
                    ],
                    "_lastExecutionId": "4816be40-7f3a-489e-b23c-14c698a58ddc"
                  }
                },
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "8349aa22-c992-434e-9e35-e5fc8ef4a245",
                    "type": "text/javascript",
                    "exec": [
                      ""
                    ],
                    "_lastExecutionId": "e5ddbcb0-9830-4e57-9232-851987938e7d"
                  }
                }
              ]
            },
            {
              "id": "8d884a10-0abd-48de-9b8a-47bfc7ff13cd",
              "name": "verify-reset-password-token",
              "request": {
                "url": {
                  "path": [
                    "users",
                    "verify-reset-password-token"
                  ],
                  "host": [
                    "{{exp_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "accept",
                    "value": "application/json"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/x-www-form-urlencoded"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "urlencoded",
                  "urlencoded": [
                    {
                      "key": "token",
                      "value": "{{resetPasswordToken}}"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "799e647c-efdd-4528-bf8c-ec8d1e1a4b55",
                    "type": "text/javascript",
                    "exec": [
                      "let jsonData = pm.response.json();\r",
                      "\r",
                      "message = [\r",
                      "    \"The provided password reset token is valid\",\r",
                      "    \"Bad Request\",\r",
                      "    \"Internal Error Server\",\r",
                      "    \"The provided password reset token is invalid or has expired\"\r",
                      "]\r",
                      "\r",
                      "status = [200,400,401,500]\r",
                      "\r",
                      "if (jsonData.success === false) {\r",
                      "    pm.test(`**** E R R O R ***** ${jsonData.message}`, function(){\r",
                      "        // pm.expect(jsonData.message).to.eql(\"No authentication token specified in x-auth-token header\");\r",
                      "        pm.expect(jsonData.message).to.be.oneOf(message);\r",
                      "    });\r",
                      "\r",
                      "    pm.test(`Check the multiple error status code ${jsonData.status}`, function(){\r",
                      "        pm.expect(pm.response.code).to.be.oneOf(status);\r",
                      "    });\r",
                      "\r",
                      "\r",
                      "}\r",
                      "else {\r",
                      "    pm.test(`*** S U C C E S S *** ${jsonData.message}`, function(){\r",
                      "        // pm.expect(jsonData.message).to.equal(\"Profile successful\");\r",
                      "        pm.expect(jsonData.message).to.be.oneOf(message);\r",
                      "    });\r",
                      "\r",
                      "    pm.test(\"Check the response time\", function(){\r",
                      "    pm.expect(pm.response.responseTime).to.be.below(6000);\r",
                      "    });\r",
                      "\r",
                      "    pm.test(`Check the Status code ${jsonData.status}`, function(){\r",
                      "        pm.expect(pm.response.code).to.be.oneOf(status);\r",
                      "    });\r",
                      "\r",
                      "    pm.test(\"Body matches multiple string\",function(){\r",
                      "    pm.expect(pm.response.text()).to.include(\"message\");\r",
                      "});\r",
                      "\r",
                      "}\r",
                      "\r",
                      ""
                    ],
                    "_lastExecutionId": "c1d6d515-485d-45cb-ab2b-15662e3830f7"
                  }
                },
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "46fb041c-0790-4ccb-a117-d6dcbb44aa15",
                    "type": "text/javascript",
                    "exec": [
                      ""
                    ],
                    "_lastExecutionId": "48a955fd-f392-4b00-9034-2a273d9fea6d"
                  }
                }
              ]
            },
            {
              "id": "740f7a4b-9db6-4b38-a333-0ad712a2b2a2",
              "name": "reset-password",
              "request": {
                "url": {
                  "protocol": "https",
                  "path": [
                    "notes",
                    "api",
                    "users",
                    "reset-password"
                  ],
                  "host": [
                    "practice",
                    "expandtesting",
                    "com"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "accept",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n    \"token\":\"{{resetPasswordToken}}\",\r\n    \"newPassword\":\"{{$randomPassword}}\"\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "7cdc8324-5612-42e4-8f85-49037412238b",
                    "type": "text/javascript",
                    "exec": [
                      "let jsonData = pm.response.json();\r",
                      "\r",
                      "let newPassword = JSON.parse(pm.request.body.raw).newPassword;\r",
                      "pm.environment.set('password', newPassword);\r",
                      "\r",
                      "\r",
                      "message = [\r",
                      "    \"The password has been successfully reset\",\r",
                      "    \"Token must be between 64 characters\",\r",
                      "    \"Bad Request\",\r",
                      "    \"The password was successfully updated\",\r",
                      "    \"Internal Error Server\",\r",
                      "    \"New password must be between 6 and 30 characters\",\r",
                      "    \"The password reset token is invalid or has expired\"\r",
                      "]\r",
                      "\r",
                      "status = [200,400,401,500]\r",
                      "\r",
                      "if (jsonData.success === false) {\r",
                      "    pm.test(`**** E R R O R ***** ${jsonData.message}`, function(){\r",
                      "        // pm.expect(jsonData.message).to.eql(\"No authentication token specified in x-auth-token header\");\r",
                      "        pm.expect(jsonData.message).to.be.oneOf(message);\r",
                      "    });\r",
                      "\r",
                      "    pm.test(`Check the multiple error status code ${jsonData.status}`, function(){\r",
                      "        pm.expect(pm.response.code).to.be.oneOf(status);\r",
                      "    });\r",
                      "\r",
                      "\r",
                      "}\r",
                      "else {\r",
                      "    pm.test(`*** S U C C E S S *** ${jsonData.message}`, function(){\r",
                      "        // pm.expect(jsonData.message).to.equal(\"Profile successful\");\r",
                      "        pm.expect(jsonData.message).to.be.oneOf(message);\r",
                      "    });\r",
                      "\r",
                      "    pm.test(\"Check the response time\", function(){\r",
                      "    pm.expect(pm.response.responseTime).to.be.below(6000);\r",
                      "    });\r",
                      "\r",
                      "    pm.test(`Check the Status code ${jsonData.status}`, function(){\r",
                      "        pm.expect(pm.response.code).to.be.oneOf(status);\r",
                      "    });\r",
                      "\r",
                      "    pm.test(\"Body matches multiple string\",function(){\r",
                      "    pm.expect(pm.response.text()).to.include(\"message\");\r",
                      "});\r",
                      "\r",
                      "}\r",
                      "\r",
                      "\r",
                      ""
                    ],
                    "_lastExecutionId": "5d234639-2098-4725-8401-094ce8fa851b"
                  }
                },
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "1268a1ec-48a3-4dfd-8fc8-3c14d0fa7f28",
                    "type": "text/javascript",
                    "exec": [
                      ""
                    ],
                    "_lastExecutionId": "3e5db1d1-0c8c-4a29-8797-f14a01a4bedc"
                  }
                }
              ]
            },
            {
              "id": "93821c3b-e028-4eda-a749-05d87d7e6a94",
              "name": "change-password",
              "request": {
                "url": {
                  "path": [
                    "users",
                    "change-password"
                  ],
                  "host": [
                    "{{exp_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "accept",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n    \"currentPassword\":\"{{password}}\",\r\n    \"newPassword\":\"{{$randomPassword}}\"\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "auth": {
                  "type": "apikey",
                  "apikey": [
                    {
                      "type": "string",
                      "value": "{{exp_token}}",
                      "key": "value"
                    },
                    {
                      "type": "string",
                      "value": "x-auth-token",
                      "key": "key"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "3eca22f1-7d4a-4832-8b68-54badb876aa6",
                    "type": "text/javascript",
                    "exec": [
                      "pm.environment.get(\"password\");\r",
                      "\r",
                      "let newPassword = JSON.parse(pm.request.body.raw).newPassword;\r",
                      "pm.environment.set('password', newPassword);\r",
                      "\r",
                      "let jsonData = pm.response.json();\r",
                      "message = [\r",
                      "    \"The password has been successfully reset\",\r",
                      "    \"Token must be between 64 characters\",\r",
                      "    \"Bad Request\",\r",
                      "    \"The password was successfully updated\",\r",
                      "    \"Internal Error Server\",\r",
                      "    \"New password must be between 6 and 30 characters\",\r",
                      "    \"The password reset token is invalid or has expired\"\r",
                      "]\r",
                      "\r",
                      "status = [200,400,401,500]\r",
                      "\r",
                      "if (jsonData.success === false) {\r",
                      "    pm.test(`**** E R R O R ***** ${jsonData.message}`, function(){\r",
                      "        // pm.expect(jsonData.message).to.eql(\"No authentication token specified in x-auth-token header\");\r",
                      "        pm.expect(jsonData.message).to.be.oneOf(message);\r",
                      "    });\r",
                      "\r",
                      "    pm.test(`Check the multiple error status code ${jsonData.status}`, function(){\r",
                      "        pm.expect(pm.response.code).to.be.oneOf(status);\r",
                      "    });\r",
                      "\r",
                      "\r",
                      "}\r",
                      "else {\r",
                      "    pm.test(`*** S U C C E S S *** ${jsonData.message}`, function(){\r",
                      "        // pm.expect(jsonData.message).to.equal(\"Profile successful\");\r",
                      "        pm.expect(jsonData.message).to.be.oneOf(message);\r",
                      "    });\r",
                      "\r",
                      "    pm.test(\"Check the response time\", function(){\r",
                      "    pm.expect(pm.response.responseTime).to.be.below(6000);\r",
                      "    });\r",
                      "\r",
                      "    pm.test(`Check the Status code ${jsonData.status}`, function(){\r",
                      "        pm.expect(pm.response.code).to.be.oneOf(status);\r",
                      "    });\r",
                      "\r",
                      "    pm.test(\"Body matches multiple string\",function(){\r",
                      "    pm.expect(pm.response.text()).to.include(\"message\");\r",
                      "});\r",
                      "\r",
                      "}\r",
                      ""
                    ],
                    "_lastExecutionId": "64be3638-86ca-4200-b966-7a137b03eb2e"
                  }
                },
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "aa473681-09fc-4673-a2fe-7012cf4e42e9",
                    "type": "text/javascript",
                    "exec": [
                      "console.log(pm.environment.get(\"password\"));\r",
                      "\r",
                      "\r",
                      "\r",
                      ""
                    ],
                    "_lastExecutionId": "fb6fc291-ccb6-46ad-9bb8-0e4bf2cf736d"
                  }
                }
              ]
            },
            {
              "id": "f4c8e78d-5700-43a2-8e20-cb1a0de26ce9",
              "name": "UserLogout",
              "request": {
                "url": {
                  "path": [
                    "users",
                    "logout"
                  ],
                  "host": [
                    "{{exp_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "accept",
                    "value": "application/json"
                  }
                ],
                "method": "DELETE",
                "auth": {
                  "type": "apikey",
                  "apikey": [
                    {
                      "type": "string",
                      "value": "{{exp_token}}",
                      "key": "value"
                    },
                    {
                      "type": "string",
                      "value": "x-auth-token",
                      "key": "key"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "43a38bb6-0063-463b-9a7b-ea0674d209fe",
                    "type": "text/javascript",
                    "exec": [
                      "let jsonData = pm.response.json();\r",
                      "message = [\r",
                      "    \"User has been successfully logged out\",\r",
                      "    \"Token must be between 64 characters\",\r",
                      "    \"Bad Request\",\r",
                      "    \"Access token is not valid or has expired, you will need to login\",\r",
                      "    \"No authentication token specified in x-auth-token header\",\r",
                      "    \"Internal Error Server\",\r",
                      "    \"Successful Request\",\r",
                      "    \"Unauthorized Request\"\r",
                      "]\r",
                      "\r",
                      "status = [200,400,401,500]\r",
                      "\r",
                      "if (jsonData.success === false) {\r",
                      "    pm.test(`**** E R R O R ***** ${jsonData.message}`, function(){\r",
                      "        // pm.expect(jsonData.message).to.eql(\"No authentication token specified in x-auth-token header\");\r",
                      "        pm.expect(jsonData.message).to.be.oneOf(message);\r",
                      "    });\r",
                      "\r",
                      "    pm.test(`Check the multiple error status code ${jsonData.status}`, function(){\r",
                      "        pm.expect(pm.response.code).to.be.oneOf(status);\r",
                      "    });\r",
                      "\r",
                      "\r",
                      "}\r",
                      "else {\r",
                      "    pm.test(`*** S U C C E S S *** ${jsonData.message}`, function(){\r",
                      "        // pm.expect(jsonData.message).to.equal(\"Profile successful\");\r",
                      "        pm.expect(jsonData.message).to.be.oneOf(message);\r",
                      "    });\r",
                      "\r",
                      "    pm.test(\"Check the response time\", function(){\r",
                      "    pm.expect(pm.response.responseTime).to.be.below(6000);\r",
                      "    });\r",
                      "\r",
                      "    pm.test(`Check the Status code ${jsonData.status}`, function(){\r",
                      "        pm.expect(pm.response.code).to.be.oneOf(status);\r",
                      "    });\r",
                      "\r",
                      "    pm.test(\"Body matches multiple string\",function(){\r",
                      "    pm.expect(pm.response.text()).to.include(\"message\");\r",
                      "});\r",
                      "\r",
                      "}\r",
                      "\r",
                      "postman.setNextRequest(null);"
                    ],
                    "_lastExecutionId": "c7d982d4-a8dc-460f-a106-6e0c01643e82"
                  }
                },
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "e8ae662d-a080-4bf5-a817-754113435b5e",
                    "type": "text/javascript",
                    "exec": [
                      ""
                    ],
                    "_lastExecutionId": "0b0d404e-4117-40fc-9982-a95619506052"
                  }
                }
              ]
            }
          ],
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "3380df96-f386-44be-9dc8-eb145a929d13",
                "type": "text/javascript",
                "exec": [
                  ""
                ],
                "_lastExecutionId": "c2613397-fddf-4d46-99b6-9ffc9166e0a8"
              }
            },
            {
              "listen": "test",
              "script": {
                "id": "18c4e0bb-9477-4e5f-b627-d550e666c7d3",
                "type": "text/javascript",
                "exec": [
                  ""
                ],
                "_lastExecutionId": "78225eb1-cbe5-408b-978b-a1bf2d2b693c"
              }
            }
          ],
          "variable": [
            {
              "type": "string",
              "value": "https://practice.expandtesting.com/notes/api",
              "key": "exp_url"
            }
          ],
          "info": {
            "_postman_id": "723ea9c3-0635-4605-b90c-d6d9e9835d8c",
            "name": "expandtesting",
            "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
          }
        },
        "cursor": {
          "ref": "8c680752-290f-4c38-ace4-856b0bd8cb56",
          "length": 12,
          "cycles": 1,
          "position": 2,
          "iteration": 0,
          "httpRequestId": "69d50afe-4b0f-4382-9214-badf24234ead",
          "scriptId": "cc8daf67-c0f2-4843-9223-e47d8fe754ec",
          "execution": "4a906166-3676-408b-bc6f-6c09add962a5"
        }
      },
      {
        "error": {
          "type": "Error",
          "name": "TypeError",
          "message": "Cannot read properties of undefined (reading 'token')",
          "checksum": "f359f9c4d4796d6510f032fd446b6817",
          "id": "368e5023-4cb4-4ed5-834d-9e2bdfbbe2ad",
          "timestamp": 1698733439341,
          "stacktrace": []
        },
        "at": "test-script",
        "source": {
          "id": "1da8b1e7-3198-4c60-9c34-4a1e8b7e8b15",
          "name": "UserLogin",
          "request": {
            "url": {
              "path": [
                "users",
                "login"
              ],
              "host": [
                "{{exp_url}}"
              ],
              "query": [],
              "variable": []
            },
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\r\n    \"email\":\"{{randomEmail}}\",\r\n    \"password\":\"{{password}}\"\r\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "cc8daf67-c0f2-4843-9223-e47d8fe754ec",
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Check the status code is 200\", function(){\r",
                  "    pm.response.to.have.status(200);\r",
                  "});\r",
                  "\r",
                  "var jsonData = pm.response.json();\r",
                  "\r",
                  "pm.test(\"Check the success message\", function(){\r",
                  "    pm.expect(jsonData.success).to.eql(true);\r",
                  "});\r",
                  "\r",
                  "pm.test(\"Check the body message\", function(){\r",
                  "    pm.expect(jsonData.message).to.eql(\"Login successful\");\r",
                  "});\r",
                  "\r",
                  "pm.environment.set(\"exp_token\", jsonData.data.token);\r",
                  "\r",
                  "pm.test(\"Verify the values are not null\", function(){\r",
                  "    pm.expect(jsonData.data.id, \"Id is not a null\").to.not.be.null;\r",
                  "    pm.expect(jsonData.data.name, \"name is not a null\").to.not.be.null;\r",
                  "    pm.expect(jsonData.data.email, \"email is not a null\").to.not.be.null;\r",
                  "    pm.expect(jsonData.data.token, \"token is not a null\").to.not.be.null;\r",
                  "});\r",
                  "\r",
                  "pm.test(\"Check the response time\", function(){\r",
                  "    pm.expect(pm.response.responseTime).to.below(2000);\r",
                  "});\r",
                  "\r",
                  ""
                ],
                "_lastExecutionId": "4a906166-3676-408b-bc6f-6c09add962a5"
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "id": "98d0941e-d03e-4ab7-a7b0-84826ad7708a",
                "type": "text/javascript",
                "exec": [
                  ""
                ],
                "_lastExecutionId": "2f4a3493-6a43-4652-8c74-458390f9ecf9"
              }
            }
          ]
        },
        "parent": {
          "_": {
            "postman_id": "723ea9c3-0635-4605-b90c-d6d9e9835d8c",
            "exporter_id": "13852941",
            "collection_link": "https://galactic-astronaut-894425.postman.co/workspace/b6dafb4f-3507-4e58-a32d-dd31bf6ab148/collection/13852941-723ea9c3-0635-4605-b90c-d6d9e9835d8c?action=share&source=collection_link&creator=13852941"
          },
          "item": [
            {
              "id": "90407c19-d06c-4337-abb9-4dfc2fa17fc8",
              "name": "health_check",
              "request": {
                "url": {
                  "path": [
                    "health-check"
                  ],
                  "host": [
                    "{{exp_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "b075fb8f-9483-4909-a4a4-cf6344c6642b",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Check the Status code 200\", function(){\r",
                      "    pm.response.to.have.status(200);\r",
                      "});\r",
                      "\r",
                      "var jsonData = pm.response.json();\r",
                      "\r",
                      "pm.test(\"Check the success code in body\", function(){\r",
                      "    pm.expect(jsonData.success).to.eql(true);\r",
                      "});\r",
                      "\r",
                      "pm.test(\"Check the Status code in body\", function(){\r",
                      "    pm.expect(jsonData.status).to.eql(200);\r",
                      "});\r",
                      "\r",
                      "pm.test(\"Check the message in body\", function(){\r",
                      "    pm.expect(jsonData.message).to.eql(\"Notes API is Running\");\r",
                      "});\r",
                      "\r",
                      "\r",
                      ""
                    ],
                    "_lastExecutionId": "dcf22f24-f95a-4d61-981a-68f2474c0b1d"
                  }
                },
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "15079d7d-2fc3-468b-b923-1fd697b2156e",
                    "type": "text/javascript",
                    "exec": [
                      ""
                    ],
                    "_lastExecutionId": "a57965c9-dfeb-425b-a87b-14b41a981af7"
                  }
                }
              ]
            },
            {
              "id": "d3b70abb-4c44-4d96-b946-e8ef2e19907f",
              "name": "RegisterUser",
              "request": {
                "url": {
                  "path": [
                    "users",
                    "register"
                  ],
                  "host": [
                    "{{exp_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n    \"name\":\"{{$randomFullName}}\",\r\n    \"email\":\"{{randomEmail}}\",\r\n    \"password\":\"{{$randomPassword}}\"\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "4f0c3c3d-4171-4bea-b8a8-3fd567809f0d",
                    "type": "text/javascript",
                    "exec": [
                      "var jsonData = pm.response.json();\r",
                      "\r",
                      "pm.test(\"Check the success msg is true in body?\", function(){\r",
                      "    pm.expect(jsonData.success).to.eql(true);\r",
                      "});\r",
                      "\r",
                      "pm.test(\"Check the body message\", function(){\r",
                      "    pm.expect(jsonData.message).to.eql(\"User account created successfully\");\r",
                      "});\r",
                      "\r",
                      "pm.test(\"Verify the values are not null\", function(){\r",
                      "    pm.expect(jsonData.data.id, \"Id is not null\").to.not.be.null;\r",
                      "    pm.expect(jsonData.data.name, \"name is not null\").to.not.be.null;\r",
                      "    pm.expect(jsonData.data.email, \"email is not null\").to.not.be.null;\r",
                      "});\r",
                      "\r",
                      "pm.test(\"response property matching an environment variable\", function(){\r",
                      "    pm.expect(jsonData.name).to.eql(pm.environment.get(\"name\"));\r",
                      "});\r",
                      "\r",
                      "pm.test(\"Check the response time\", function(){\r",
                      "    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
                      "});\r",
                      "\r",
                      "pm.environment.set(\"id\", jsonData.data.id);\r",
                      "pm.environment.set(\"name\", jsonData.data.name);\r",
                      "\r",
                      "let password = JSON.parse(pm.request.body.raw).password;\r",
                      "pm.environment.set('password', password);\r",
                      "\r",
                      "message = [\r",
                      "    \"Access token is not valid or has expired, you will need to login\",\r",
                      "    \"No authentication token specified in x-auth-token header\",\r",
                      "    \"User name must be between 4 and 30 characters\",\r",
                      "    \"Phone number should be between 8 and 20 digits\",\r",
                      "    \"Unauthorized Request\",\r",
                      "    \"Internal Error Server\",\r",
                      "    \"Profile updated successful\",\r",
                      "    \"User account created successfully\",\r",
                      "    \"Not Found\",\r",
                      "    \"Bad Request\",\r",
                      "    \"An account already exists with the same email address\"\r",
                      "];\r",
                      "\r",
                      "status = [400,401,404,409,500,200,201];\r",
                      "\r",
                      "if (jsonData.success === false) {\r",
                      "    pm.test(`**** E R R O R ***** ${jsonData.message}`, function(){\r",
                      "        pm.expect(jsonData.message).to.be.oneOf(message);\r",
                      "    });\r",
                      "\r",
                      "    pm.test(`Check the multiple error status code ${jsonData.status}`, function(){\r",
                      "        pm.expect(pm.response.code).to.be.oneOf(status);\r",
                      "    });\r",
                      "}\r",
                      "else {\r",
                      "    pm.test(`*** S U C C E S S *** ${jsonData.message}`, function(){\r",
                      "        pm.expect(jsonData.message).to.be.oneOf(message);\r",
                      "    });\r",
                      "\r",
                      "    pm.test(`Check the Status code ${jsonData.status}`, function(){\r",
                      "        pm.expect(pm.response.code).to.be.oneOf(status);\r",
                      "    });\r",
                      "}"
                    ],
                    "_lastExecutionId": "2fbfcb58-035a-4d0d-afa2-7fc9d5239e13"
                  }
                },
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "3483ef69-d6b6-4835-8746-973a3f7a159e",
                    "type": "text/javascript",
                    "exec": [
                      "\r",
                      "// // Define the incrementEmail function\r",
                      "// function incrementEmail(email) {\r",
                      "//     const match = email.match(/\\+a(\\d+)/);\r",
                      "\r",
                      "//     if (match) {\r",
                      "//         const currentNumber = parseInt(match[1]);\r",
                      "//         const nextNumber = currentNumber + 1;\r",
                      "//         const incrementedEmail = email.replace(/\\+a\\d+/, `+a${nextNumber}`);\r",
                      "//         return incrementedEmail;\r",
                      "//     }\r",
                      "\r",
                      "//     return email;\r",
                      "// }\r",
                      "\r",
                      "\r",
                      "// const originalEmail = pm.environment.get(\"email\");\r",
                      "\r",
                      "\r",
                      "// if (originalEmail) {\r",
                      "//     // Use the incrementEmail function to get the incremented email\r",
                      "//     const incrementedEmail = incrementEmail(originalEmail);\r",
                      "\r",
                      "//     // Set the incremented email back to the environment\r",
                      "//     pm.environment.set(\"email\", incrementedEmail);\r",
                      "\r",
                      "//     console.log(\"OriginalEmail:\", originalEmail);\r",
                      "//     console.log(\"IncrementedEmail:\", incrementedEmail);\r",
                      "// } else {\r",
                      "//     console.error(\"Email environment variable not found.\");\r",
                      "// }\r",
                      "\r",
                      "// console.log(pm.environment.get(\"email\"));\r",
                      "\r",
                      "\r",
                      "// -------------------------------------------------------------------\r",
                      "// Define the base part of the email address\r",
                      "const baseEmail = pm.environment.get(\"baseEmail\");\r",
                      "\r",
                      "// Generate a random number between min and max (inclusive)\r",
                      "function getRandomNumber(min, max) {\r",
                      "    return Math.floor(Math.random() * (max - min + 1)) + min;\r",
                      "}\r",
                      "\r",
                      "// Generate a random sequence like +a151, +a152, +a153, and so on\r",
                      "const randomSequence = `+a${getRandomNumber(1, 999)}`;\r",
                      "\r",
                      "// Combine the base and random sequence to create the random email address\r",
                      "const randomEmail = `${baseEmail}${randomSequence}@gmail.com`;\r",
                      "\r",
                      "// Set the random email address as an environment variable for your request\r",
                      "pm.environment.set('randomEmail', randomEmail);\r",
                      "\r",
                      "\r",
                      ""
                    ],
                    "_lastExecutionId": "f0df73d6-9875-49de-aaed-2ffb46745ff0"
                  }
                }
              ]
            },
            {
              "id": "1da8b1e7-3198-4c60-9c34-4a1e8b7e8b15",
              "name": "UserLogin",
              "request": {
                "url": {
                  "path": [
                    "users",
                    "login"
                  ],
                  "host": [
                    "{{exp_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n    \"email\":\"{{randomEmail}}\",\r\n    \"password\":\"{{password}}\"\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "cc8daf67-c0f2-4843-9223-e47d8fe754ec",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Check the status code is 200\", function(){\r",
                      "    pm.response.to.have.status(200);\r",
                      "});\r",
                      "\r",
                      "var jsonData = pm.response.json();\r",
                      "\r",
                      "pm.test(\"Check the success message\", function(){\r",
                      "    pm.expect(jsonData.success).to.eql(true);\r",
                      "});\r",
                      "\r",
                      "pm.test(\"Check the body message\", function(){\r",
                      "    pm.expect(jsonData.message).to.eql(\"Login successful\");\r",
                      "});\r",
                      "\r",
                      "pm.environment.set(\"exp_token\", jsonData.data.token);\r",
                      "\r",
                      "pm.test(\"Verify the values are not null\", function(){\r",
                      "    pm.expect(jsonData.data.id, \"Id is not a null\").to.not.be.null;\r",
                      "    pm.expect(jsonData.data.name, \"name is not a null\").to.not.be.null;\r",
                      "    pm.expect(jsonData.data.email, \"email is not a null\").to.not.be.null;\r",
                      "    pm.expect(jsonData.data.token, \"token is not a null\").to.not.be.null;\r",
                      "});\r",
                      "\r",
                      "pm.test(\"Check the response time\", function(){\r",
                      "    pm.expect(pm.response.responseTime).to.below(2000);\r",
                      "});\r",
                      "\r",
                      ""
                    ],
                    "_lastExecutionId": "4a906166-3676-408b-bc6f-6c09add962a5"
                  }
                },
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "98d0941e-d03e-4ab7-a7b0-84826ad7708a",
                    "type": "text/javascript",
                    "exec": [
                      ""
                    ],
                    "_lastExecutionId": "2f4a3493-6a43-4652-8c74-458390f9ecf9"
                  }
                }
              ]
            },
            {
              "id": "3f4af57c-fb9c-4a3c-8c2b-0f9b603b0679",
              "name": "GetProfile",
              "request": {
                "url": {
                  "path": [
                    "users",
                    "profile"
                  ],
                  "host": [
                    "{{exp_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET",
                "auth": {
                  "type": "apikey",
                  "apikey": [
                    {
                      "type": "string",
                      "value": "{{exp_token}}",
                      "key": "value"
                    },
                    {
                      "type": "string",
                      "value": "header",
                      "key": "in"
                    },
                    {
                      "type": "string",
                      "value": "x-auth-token",
                      "key": "key"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "56a6399c-71a1-414d-b876-9262a848415f",
                    "type": "text/javascript",
                    "exec": [
                      "\r",
                      "let jsonData = pm.response.json();\r",
                      "message = [\r",
                      "    \"Access token is not valid or has expired, you will need to login\",\r",
                      "    \"No authentication token specified in x-auth-token header\",\r",
                      "    \"Bad Request\",\r",
                      "    \"Unauthorized Request\",\r",
                      "    \"Internal Error Server\",\r",
                      "    \"Profile successful\",\r",
                      "    \"Not Found\"\r",
                      "]\r",
                      "\r",
                      "status = [400,401,404,500,200,201]\r",
                      "\r",
                      "if (jsonData.success === false) {\r",
                      "    pm.test(`**** E R R O R ***** ${jsonData.message}`, function(){\r",
                      "        // pm.expect(jsonData.message).to.eql(\"No authentication token specified in x-auth-token header\");\r",
                      "        pm.expect(jsonData.message).to.be.oneOf(message);\r",
                      "    });\r",
                      "\r",
                      "    pm.test(`Check the multiple error status code ${jsonData.status}`, function(){\r",
                      "        pm.expect(pm.response.code).to.be.oneOf(status);\r",
                      "    });\r",
                      "\r",
                      "\r",
                      "}\r",
                      "else {\r",
                      "    pm.test(`*** S U C C E S S *** ${jsonData.message}`, function(){\r",
                      "        // pm.expect(jsonData.message).to.equal(\"Profile successful\");\r",
                      "        pm.expect(jsonData.message).to.be.oneOf(message);\r",
                      "    });\r",
                      "\r",
                      "    pm.test(\"Check the response time\", function(){\r",
                      "    pm.expect(pm.response.responseTime).to.be.below(6000);\r",
                      "    });\r",
                      "\r",
                      "    pm.test(`Check the Status code ${jsonData.status}`, function(){\r",
                      "        pm.expect(pm.response.code).to.be.oneOf(status);\r",
                      "    });\r",
                      "\r",
                      "    pm.test(\"Body matches multiple string\",function(){\r",
                      "    pm.expect(pm.response.text()).to.include(\"id\");\r",
                      "    pm.expect(pm.response.text()).to.include(\"name\");\r",
                      "    pm.expect(pm.response.text()).to.include(\"email\");\r",
                      "});\r",
                      "\r",
                      "}\r",
                      "\r",
                      ""
                    ],
                    "_lastExecutionId": "55d3989d-79a3-476b-87c3-020290feeec2"
                  }
                },
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "5b6727ff-6213-4350-874c-dbaeeb0d0d03",
                    "type": "text/javascript",
                    "exec": [
                      ""
                    ],
                    "_lastExecutionId": "5e07b22a-eb37-441e-b764-c112f7fde3f7"
                  }
                }
              ],
              "protocolProfileBehavior": {
                "disabledSystemHeaders": {}
              }
            },
            {
              "id": "ee9d7916-0288-4df6-a4d2-05ed9c78c4f1",
              "name": "UpdateProfile",
              "request": {
                "url": {
                  "path": [
                    "users",
                    "profile"
                  ],
                  "host": [
                    "{{exp_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "PATCH",
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n    \"name\":\"{{name}}\",\r\n    \"phone\":\"{{random_number}}\",\r\n    \"company\":\"{{$randomCompanyName}}\"\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "auth": {
                  "type": "apikey",
                  "apikey": [
                    {
                      "type": "string",
                      "value": "{{exp_token}}",
                      "key": "value"
                    },
                    {
                      "type": "string",
                      "value": "header",
                      "key": "in"
                    },
                    {
                      "type": "string",
                      "value": "x-auth-token",
                      "key": "key"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "6ab7e932-eb9b-4edc-9edc-b8d42e4162ad",
                    "type": "text/javascript",
                    "exec": [
                      "let jsonData = pm.response.json();\r",
                      "message = [\r",
                      "    \"Access token is not valid or has expired, you will need to login\",\r",
                      "    \"No authentication token specified in x-auth-token header\",\r",
                      "    \"User name must be between 4 and 30 characters\",\r",
                      "    \"Phone number should be between 8 and 20 digits\",\r",
                      "    \"Unauthorized Request\",\r",
                      "    \"Internal Error Server\",\r",
                      "    \"Profile updated successful\",\r",
                      "    \"Not Found\",\r",
                      "    \"Bad Request\"\r",
                      "]\r",
                      "\r",
                      "status = [400,401,404,500,200,201]\r",
                      "// var jsonData1 = pm.response.json();\r",
                      "// pm.environment.set(\"phoneNumber\", jsonData1.data.phone);\r",
                      "\r",
                      "if (jsonData.success === false) {\r",
                      "    pm.test(`**** E R R O R ***** ${jsonData.message}`, function(){\r",
                      "        // pm.expect(jsonData.message).to.eql(\"No authentication token specified in x-auth-token header\");\r",
                      "        pm.expect(jsonData.message).to.be.oneOf(message);\r",
                      "    });\r",
                      "\r",
                      "    pm.test(`Check the multiple error status code ${jsonData.status}`, function(){\r",
                      "        pm.expect(pm.response.code).to.be.oneOf(status);\r",
                      "    });\r",
                      "\r",
                      "\r",
                      "}\r",
                      "else {\r",
                      "    pm.test(`*** S U C C E S S *** ${jsonData.message}`, function(){\r",
                      "        // pm.expect(jsonData.message).to.equal(\"Profile successful\");\r",
                      "        pm.expect(jsonData.message).to.be.oneOf(message);\r",
                      "    });\r",
                      "\r",
                      "    pm.test(\"Check the response time\", function(){\r",
                      "    pm.expect(pm.response.responseTime).to.be.below(6000);\r",
                      "    });\r",
                      "\r",
                      "    pm.test(`Check the Status code ${jsonData.status}`, function(){\r",
                      "        pm.expect(pm.response.code).to.be.oneOf(status);\r",
                      "    });\r",
                      "\r",
                      "    pm.test(\"Body matches multiple string\",function(){\r",
                      "    pm.expect(pm.response.text()).to.include(\"id\");\r",
                      "    pm.expect(pm.response.text()).to.include(\"name\");\r",
                      "    pm.expect(pm.response.text()).to.include(\"email\");\r",
                      "});\r",
                      "\r",
                      "}\r",
                      "\r",
                      ""
                    ],
                    "_lastExecutionId": "bf535ed4-ea27-433b-95ed-0405878d634c"
                  }
                },
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "1dd9ce14-2fea-48d5-b628-446e36acb961",
                    "type": "text/javascript",
                    "exec": [
                      "pm.environment.set(\"random_number\",_.random(1000000000,9999999999));\r",
                      "\r",
                      "\r",
                      ""
                    ],
                    "_lastExecutionId": "81adb337-1695-4fed-b265-391f869dd222"
                  }
                }
              ]
            },
            {
              "id": "03c5b9ed-2c86-4338-932a-d93a799c2d8d",
              "name": "ForgotPassword",
              "request": {
                "url": {
                  "path": [
                    "users",
                    "forgot-password"
                  ],
                  "host": [
                    "{{exp_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n    \"email\":\"{{randomEmail}}\"\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "auth": {
                  "type": "apikey",
                  "apikey": [
                    {
                      "type": "string",
                      "value": "{{exp_token}}",
                      "key": "value"
                    },
                    {
                      "type": "string",
                      "value": "header",
                      "key": "in"
                    },
                    {
                      "type": "string",
                      "value": "x-auth-token",
                      "key": "key"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "72c44319-e1e0-49ac-91f7-f3f0cd439f93",
                    "type": "text/javascript",
                    "exec": [
                      "let jsonData = pm.response.json();\r",
                      "let jsonEmail = JSON.parse(pm.request.body.raw).email;\r",
                      "\r",
                      "message = [\r",
                      "    \"Access token is not valid or has expired, you will need to login\",\r",
                      "    \"No authentication token specified in x-auth-token header\",\r",
                      "    \"Unauthorized Request\",\r",
                      "    \"Internal Error Server\",\r",
                      "    `Password reset link successfully sent to ${pm.environment.get(\"email\")}. Please verify by clicking on the given link`,\r",
                      "    \"Not Found\",\r",
                      "    \"Bad Request\",\r",
                      "    \"A valid email address is required\"\r",
                      "]\r",
                      "\r",
                      "status = [400,401,404,500,200,201]\r",
                      "// var jsonData1 = pm.response.json();\r",
                      "// pm.environment.set(\"phoneNumber\", jsonData1.data.phone);\r",
                      "\r",
                      "if (jsonData.success === false) {\r",
                      "    pm.test(`**** E R R O R ***** ${jsonData.message}`, function(){\r",
                      "        // pm.expect(jsonData.message).to.eql(\"No authentication token specified in x-auth-token header\");\r",
                      "        pm.expect(jsonData.message).to.be.oneOf(message);\r",
                      "    });\r",
                      "\r",
                      "    pm.test(`Check the multiple error status code ${jsonData.status}`, function(){\r",
                      "        pm.expect(pm.response.code).to.be.oneOf(status);\r",
                      "    });\r",
                      "\r",
                      "\r",
                      "}\r",
                      "else {\r",
                      "    pm.test(`*** S U C C E S S *** ${jsonData.message}`, function(){\r",
                      "        // pm.expect(jsonData.message).to.equal(\"Profile successful\");\r",
                      "        pm.expect(jsonData.message).to.be.oneOf(message);\r",
                      "    });\r",
                      "\r",
                      "    pm.test(\"Check the response time\", function(){\r",
                      "    pm.expect(pm.response.responseTime).to.be.below(6000);\r",
                      "    });\r",
                      "\r",
                      "    pm.test(`Check the Status code ${jsonData.status}`, function(){\r",
                      "        pm.expect(pm.response.code).to.be.oneOf(status);\r",
                      "    });\r",
                      "\r",
                      "    pm.test(\"Body matches multiple string\",function(){\r",
                      "    pm.expect(pm.response.text()).to.include(\"message\");\r",
                      "});\r",
                      "\r",
                      "}\r",
                      "\r",
                      ""
                    ],
                    "_lastExecutionId": "a3803636-b917-4048-8873-b62ae1f022d6"
                  }
                },
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "6236deb0-9668-46d8-bb96-97cc86eeb0fa",
                    "type": "text/javascript",
                    "exec": [
                      ""
                    ],
                    "_lastExecutionId": "148f797c-8661-4a45-97c4-527fe81fce77"
                  }
                }
              ]
            },
            {
              "id": "eea8198b-64d4-43e4-b554-aefaae2516cd",
              "name": "GetEmailMessage",
              "request": {
                "url": {
                  "protocol": "https",
                  "path": [
                    "gmail",
                    "v1",
                    "users",
                    "{{user_email_id}}",
                    "messages",
                    ""
                  ],
                  "host": [
                    "gmail",
                    "googleapis",
                    "com"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET",
                "auth": {
                  "type": "oauth2",
                  "oauth2": [
                    {
                      "type": "boolean",
                      "value": false,
                      "key": "useBrowser"
                    },
                    {
                      "type": "string",
                      "value": "{{Scope}}",
                      "key": "scope"
                    },
                    {
                      "type": "string",
                      "value": "{{Client_Secret}}",
                      "key": "clientSecret"
                    },
                    {
                      "type": "string",
                      "value": "{{Client_ID}}",
                      "key": "clientId"
                    },
                    {
                      "type": "string",
                      "value": "{{Access_Token_URL}}",
                      "key": "accessTokenUrl"
                    },
                    {
                      "type": "string",
                      "value": "{{Auth_URL}}",
                      "key": "authUrl"
                    },
                    {
                      "type": "string",
                      "value": "{{Callback_URL}}",
                      "key": "redirect_uri"
                    },
                    {
                      "type": "string",
                      "value": "authorization_code",
                      "key": "grant_type"
                    },
                    {
                      "type": "string",
                      "value": "email_token",
                      "key": "tokenName"
                    },
                    {
                      "type": "string",
                      "value": "header",
                      "key": "addTokenTo"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "705020a4-73b3-44df-86ff-a5984e094d10",
                    "type": "text/javascript",
                    "exec": [
                      "var jsonData = pm.response.json();\r",
                      "pm.environment.set(\"messageId\", jsonData.messages[0].id);\r",
                      "\r",
                      ""
                    ],
                    "_lastExecutionId": "eeef6f2d-f5fd-4a00-be9c-25555c6fa5bc"
                  }
                },
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "cdf7837a-853f-442c-8e05-996129213a95",
                    "type": "text/javascript",
                    "exec": [
                      "var newRefreshToken = pm.environment.get(\"access_token\");\r",
                      "\r",
                      "pm.environment.set(\"refresh_token\", newRefreshToken);"
                    ],
                    "_lastExecutionId": "94790536-1730-42ee-886b-f2872e8a5fee"
                  }
                }
              ]
            },
            {
              "id": "f053ddc8-a8a6-4796-a23f-c89737b34582",
              "name": "GetMessageByID",
              "request": {
                "url": {
                  "protocol": "https",
                  "path": [
                    "gmail",
                    "v1",
                    "users",
                    "{{user_email_id}}",
                    "messages",
                    "{{messageId}}"
                  ],
                  "host": [
                    "gmail",
                    "googleapis",
                    "com"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "multipart/mixed"
                  }
                ],
                "method": "GET",
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "{{access_token}}",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "d94857cd-ae23-40c6-ae38-5f7aaca3e833",
                    "type": "text/javascript",
                    "exec": [
                      "\r",
                      "const response = pm.response.json();\r",
                      "\r",
                      "pm.environment.set(\"message_Body\", response.payload.body.data);\r",
                      "\r",
                      "var atob = require('atob');\r",
                      "\r",
                      "\r",
                      "var base64Data = pm.environment.get(\"message_Body\");\r",
                      "var decodedData = atob(base64Data);\r",
                      "postman.setEnvironmentVariable(\"rest_password\",decodedData);\r",
                      "var tokenRegex = /Reset password link: (https:\\/\\/practice\\.expandtesting\\.com\\/notes\\/app\\/reset-password\\/([\\w\\d]+))[^ ]+/;\r",
                      "var tokenMatch = decodedData.match(tokenRegex);\r",
                      "if (tokenMatch && tokenMatch[2]) {\r",
                      "    var resetPasswordToken = tokenMatch[2];\r",
                      "    \r",
                      "    // Set the reset password link as a Postman environment variable for later use\r",
                      "    pm.environment.set(\"resetPasswordToken\", resetPasswordToken);\r",
                      "    \r",
                      "    // Log the reset password link\r",
                      "    console.log(\"Reset Password Token: \" + resetPasswordToken);\r",
                      "} else {\r",
                      "    console.log(\"Reset password token not found in the response.\");\r",
                      "}\r",
                      "console.log(decodedData);\r",
                      "\r",
                      "\r",
                      "\r",
                      "\r",
                      "\r",
                      "\r",
                      "\r",
                      "\r",
                      "\r",
                      "\r",
                      "\r",
                      ""
                    ],
                    "_lastExecutionId": "4816be40-7f3a-489e-b23c-14c698a58ddc"
                  }
                },
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "8349aa22-c992-434e-9e35-e5fc8ef4a245",
                    "type": "text/javascript",
                    "exec": [
                      ""
                    ],
                    "_lastExecutionId": "e5ddbcb0-9830-4e57-9232-851987938e7d"
                  }
                }
              ]
            },
            {
              "id": "8d884a10-0abd-48de-9b8a-47bfc7ff13cd",
              "name": "verify-reset-password-token",
              "request": {
                "url": {
                  "path": [
                    "users",
                    "verify-reset-password-token"
                  ],
                  "host": [
                    "{{exp_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "accept",
                    "value": "application/json"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/x-www-form-urlencoded"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "urlencoded",
                  "urlencoded": [
                    {
                      "key": "token",
                      "value": "{{resetPasswordToken}}"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "799e647c-efdd-4528-bf8c-ec8d1e1a4b55",
                    "type": "text/javascript",
                    "exec": [
                      "let jsonData = pm.response.json();\r",
                      "\r",
                      "message = [\r",
                      "    \"The provided password reset token is valid\",\r",
                      "    \"Bad Request\",\r",
                      "    \"Internal Error Server\",\r",
                      "    \"The provided password reset token is invalid or has expired\"\r",
                      "]\r",
                      "\r",
                      "status = [200,400,401,500]\r",
                      "\r",
                      "if (jsonData.success === false) {\r",
                      "    pm.test(`**** E R R O R ***** ${jsonData.message}`, function(){\r",
                      "        // pm.expect(jsonData.message).to.eql(\"No authentication token specified in x-auth-token header\");\r",
                      "        pm.expect(jsonData.message).to.be.oneOf(message);\r",
                      "    });\r",
                      "\r",
                      "    pm.test(`Check the multiple error status code ${jsonData.status}`, function(){\r",
                      "        pm.expect(pm.response.code).to.be.oneOf(status);\r",
                      "    });\r",
                      "\r",
                      "\r",
                      "}\r",
                      "else {\r",
                      "    pm.test(`*** S U C C E S S *** ${jsonData.message}`, function(){\r",
                      "        // pm.expect(jsonData.message).to.equal(\"Profile successful\");\r",
                      "        pm.expect(jsonData.message).to.be.oneOf(message);\r",
                      "    });\r",
                      "\r",
                      "    pm.test(\"Check the response time\", function(){\r",
                      "    pm.expect(pm.response.responseTime).to.be.below(6000);\r",
                      "    });\r",
                      "\r",
                      "    pm.test(`Check the Status code ${jsonData.status}`, function(){\r",
                      "        pm.expect(pm.response.code).to.be.oneOf(status);\r",
                      "    });\r",
                      "\r",
                      "    pm.test(\"Body matches multiple string\",function(){\r",
                      "    pm.expect(pm.response.text()).to.include(\"message\");\r",
                      "});\r",
                      "\r",
                      "}\r",
                      "\r",
                      ""
                    ],
                    "_lastExecutionId": "c1d6d515-485d-45cb-ab2b-15662e3830f7"
                  }
                },
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "46fb041c-0790-4ccb-a117-d6dcbb44aa15",
                    "type": "text/javascript",
                    "exec": [
                      ""
                    ],
                    "_lastExecutionId": "48a955fd-f392-4b00-9034-2a273d9fea6d"
                  }
                }
              ]
            },
            {
              "id": "740f7a4b-9db6-4b38-a333-0ad712a2b2a2",
              "name": "reset-password",
              "request": {
                "url": {
                  "protocol": "https",
                  "path": [
                    "notes",
                    "api",
                    "users",
                    "reset-password"
                  ],
                  "host": [
                    "practice",
                    "expandtesting",
                    "com"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "accept",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n    \"token\":\"{{resetPasswordToken}}\",\r\n    \"newPassword\":\"{{$randomPassword}}\"\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "7cdc8324-5612-42e4-8f85-49037412238b",
                    "type": "text/javascript",
                    "exec": [
                      "let jsonData = pm.response.json();\r",
                      "\r",
                      "let newPassword = JSON.parse(pm.request.body.raw).newPassword;\r",
                      "pm.environment.set('password', newPassword);\r",
                      "\r",
                      "\r",
                      "message = [\r",
                      "    \"The password has been successfully reset\",\r",
                      "    \"Token must be between 64 characters\",\r",
                      "    \"Bad Request\",\r",
                      "    \"The password was successfully updated\",\r",
                      "    \"Internal Error Server\",\r",
                      "    \"New password must be between 6 and 30 characters\",\r",
                      "    \"The password reset token is invalid or has expired\"\r",
                      "]\r",
                      "\r",
                      "status = [200,400,401,500]\r",
                      "\r",
                      "if (jsonData.success === false) {\r",
                      "    pm.test(`**** E R R O R ***** ${jsonData.message}`, function(){\r",
                      "        // pm.expect(jsonData.message).to.eql(\"No authentication token specified in x-auth-token header\");\r",
                      "        pm.expect(jsonData.message).to.be.oneOf(message);\r",
                      "    });\r",
                      "\r",
                      "    pm.test(`Check the multiple error status code ${jsonData.status}`, function(){\r",
                      "        pm.expect(pm.response.code).to.be.oneOf(status);\r",
                      "    });\r",
                      "\r",
                      "\r",
                      "}\r",
                      "else {\r",
                      "    pm.test(`*** S U C C E S S *** ${jsonData.message}`, function(){\r",
                      "        // pm.expect(jsonData.message).to.equal(\"Profile successful\");\r",
                      "        pm.expect(jsonData.message).to.be.oneOf(message);\r",
                      "    });\r",
                      "\r",
                      "    pm.test(\"Check the response time\", function(){\r",
                      "    pm.expect(pm.response.responseTime).to.be.below(6000);\r",
                      "    });\r",
                      "\r",
                      "    pm.test(`Check the Status code ${jsonData.status}`, function(){\r",
                      "        pm.expect(pm.response.code).to.be.oneOf(status);\r",
                      "    });\r",
                      "\r",
                      "    pm.test(\"Body matches multiple string\",function(){\r",
                      "    pm.expect(pm.response.text()).to.include(\"message\");\r",
                      "});\r",
                      "\r",
                      "}\r",
                      "\r",
                      "\r",
                      ""
                    ],
                    "_lastExecutionId": "5d234639-2098-4725-8401-094ce8fa851b"
                  }
                },
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "1268a1ec-48a3-4dfd-8fc8-3c14d0fa7f28",
                    "type": "text/javascript",
                    "exec": [
                      ""
                    ],
                    "_lastExecutionId": "3e5db1d1-0c8c-4a29-8797-f14a01a4bedc"
                  }
                }
              ]
            },
            {
              "id": "93821c3b-e028-4eda-a749-05d87d7e6a94",
              "name": "change-password",
              "request": {
                "url": {
                  "path": [
                    "users",
                    "change-password"
                  ],
                  "host": [
                    "{{exp_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "accept",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n    \"currentPassword\":\"{{password}}\",\r\n    \"newPassword\":\"{{$randomPassword}}\"\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "auth": {
                  "type": "apikey",
                  "apikey": [
                    {
                      "type": "string",
                      "value": "{{exp_token}}",
                      "key": "value"
                    },
                    {
                      "type": "string",
                      "value": "x-auth-token",
                      "key": "key"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "3eca22f1-7d4a-4832-8b68-54badb876aa6",
                    "type": "text/javascript",
                    "exec": [
                      "pm.environment.get(\"password\");\r",
                      "\r",
                      "let newPassword = JSON.parse(pm.request.body.raw).newPassword;\r",
                      "pm.environment.set('password', newPassword);\r",
                      "\r",
                      "let jsonData = pm.response.json();\r",
                      "message = [\r",
                      "    \"The password has been successfully reset\",\r",
                      "    \"Token must be between 64 characters\",\r",
                      "    \"Bad Request\",\r",
                      "    \"The password was successfully updated\",\r",
                      "    \"Internal Error Server\",\r",
                      "    \"New password must be between 6 and 30 characters\",\r",
                      "    \"The password reset token is invalid or has expired\"\r",
                      "]\r",
                      "\r",
                      "status = [200,400,401,500]\r",
                      "\r",
                      "if (jsonData.success === false) {\r",
                      "    pm.test(`**** E R R O R ***** ${jsonData.message}`, function(){\r",
                      "        // pm.expect(jsonData.message).to.eql(\"No authentication token specified in x-auth-token header\");\r",
                      "        pm.expect(jsonData.message).to.be.oneOf(message);\r",
                      "    });\r",
                      "\r",
                      "    pm.test(`Check the multiple error status code ${jsonData.status}`, function(){\r",
                      "        pm.expect(pm.response.code).to.be.oneOf(status);\r",
                      "    });\r",
                      "\r",
                      "\r",
                      "}\r",
                      "else {\r",
                      "    pm.test(`*** S U C C E S S *** ${jsonData.message}`, function(){\r",
                      "        // pm.expect(jsonData.message).to.equal(\"Profile successful\");\r",
                      "        pm.expect(jsonData.message).to.be.oneOf(message);\r",
                      "    });\r",
                      "\r",
                      "    pm.test(\"Check the response time\", function(){\r",
                      "    pm.expect(pm.response.responseTime).to.be.below(6000);\r",
                      "    });\r",
                      "\r",
                      "    pm.test(`Check the Status code ${jsonData.status}`, function(){\r",
                      "        pm.expect(pm.response.code).to.be.oneOf(status);\r",
                      "    });\r",
                      "\r",
                      "    pm.test(\"Body matches multiple string\",function(){\r",
                      "    pm.expect(pm.response.text()).to.include(\"message\");\r",
                      "});\r",
                      "\r",
                      "}\r",
                      ""
                    ],
                    "_lastExecutionId": "64be3638-86ca-4200-b966-7a137b03eb2e"
                  }
                },
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "aa473681-09fc-4673-a2fe-7012cf4e42e9",
                    "type": "text/javascript",
                    "exec": [
                      "console.log(pm.environment.get(\"password\"));\r",
                      "\r",
                      "\r",
                      "\r",
                      ""
                    ],
                    "_lastExecutionId": "fb6fc291-ccb6-46ad-9bb8-0e4bf2cf736d"
                  }
                }
              ]
            },
            {
              "id": "f4c8e78d-5700-43a2-8e20-cb1a0de26ce9",
              "name": "UserLogout",
              "request": {
                "url": {
                  "path": [
                    "users",
                    "logout"
                  ],
                  "host": [
                    "{{exp_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "accept",
                    "value": "application/json"
                  }
                ],
                "method": "DELETE",
                "auth": {
                  "type": "apikey",
                  "apikey": [
                    {
                      "type": "string",
                      "value": "{{exp_token}}",
                      "key": "value"
                    },
                    {
                      "type": "string",
                      "value": "x-auth-token",
                      "key": "key"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "43a38bb6-0063-463b-9a7b-ea0674d209fe",
                    "type": "text/javascript",
                    "exec": [
                      "let jsonData = pm.response.json();\r",
                      "message = [\r",
                      "    \"User has been successfully logged out\",\r",
                      "    \"Token must be between 64 characters\",\r",
                      "    \"Bad Request\",\r",
                      "    \"Access token is not valid or has expired, you will need to login\",\r",
                      "    \"No authentication token specified in x-auth-token header\",\r",
                      "    \"Internal Error Server\",\r",
                      "    \"Successful Request\",\r",
                      "    \"Unauthorized Request\"\r",
                      "]\r",
                      "\r",
                      "status = [200,400,401,500]\r",
                      "\r",
                      "if (jsonData.success === false) {\r",
                      "    pm.test(`**** E R R O R ***** ${jsonData.message}`, function(){\r",
                      "        // pm.expect(jsonData.message).to.eql(\"No authentication token specified in x-auth-token header\");\r",
                      "        pm.expect(jsonData.message).to.be.oneOf(message);\r",
                      "    });\r",
                      "\r",
                      "    pm.test(`Check the multiple error status code ${jsonData.status}`, function(){\r",
                      "        pm.expect(pm.response.code).to.be.oneOf(status);\r",
                      "    });\r",
                      "\r",
                      "\r",
                      "}\r",
                      "else {\r",
                      "    pm.test(`*** S U C C E S S *** ${jsonData.message}`, function(){\r",
                      "        // pm.expect(jsonData.message).to.equal(\"Profile successful\");\r",
                      "        pm.expect(jsonData.message).to.be.oneOf(message);\r",
                      "    });\r",
                      "\r",
                      "    pm.test(\"Check the response time\", function(){\r",
                      "    pm.expect(pm.response.responseTime).to.be.below(6000);\r",
                      "    });\r",
                      "\r",
                      "    pm.test(`Check the Status code ${jsonData.status}`, function(){\r",
                      "        pm.expect(pm.response.code).to.be.oneOf(status);\r",
                      "    });\r",
                      "\r",
                      "    pm.test(\"Body matches multiple string\",function(){\r",
                      "    pm.expect(pm.response.text()).to.include(\"message\");\r",
                      "});\r",
                      "\r",
                      "}\r",
                      "\r",
                      "postman.setNextRequest(null);"
                    ],
                    "_lastExecutionId": "c7d982d4-a8dc-460f-a106-6e0c01643e82"
                  }
                },
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "e8ae662d-a080-4bf5-a817-754113435b5e",
                    "type": "text/javascript",
                    "exec": [
                      ""
                    ],
                    "_lastExecutionId": "0b0d404e-4117-40fc-9982-a95619506052"
                  }
                }
              ]
            }
          ],
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "3380df96-f386-44be-9dc8-eb145a929d13",
                "type": "text/javascript",
                "exec": [
                  ""
                ],
                "_lastExecutionId": "c2613397-fddf-4d46-99b6-9ffc9166e0a8"
              }
            },
            {
              "listen": "test",
              "script": {
                "id": "18c4e0bb-9477-4e5f-b627-d550e666c7d3",
                "type": "text/javascript",
                "exec": [
                  ""
                ],
                "_lastExecutionId": "78225eb1-cbe5-408b-978b-a1bf2d2b693c"
              }
            }
          ],
          "variable": [
            {
              "type": "string",
              "value": "https://practice.expandtesting.com/notes/api",
              "key": "exp_url"
            }
          ],
          "info": {
            "_postman_id": "723ea9c3-0635-4605-b90c-d6d9e9835d8c",
            "name": "expandtesting",
            "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
          }
        },
        "cursor": {
          "ref": "8c680752-290f-4c38-ace4-856b0bd8cb56",
          "length": 12,
          "cycles": 1,
          "position": 2,
          "iteration": 0,
          "httpRequestId": "69d50afe-4b0f-4382-9214-badf24234ead",
          "scriptId": "cc8daf67-c0f2-4843-9223-e47d8fe754ec"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 0,
          "test": "*** S U C C E S S *** Password reset link successfully sent to qat2613+a53@gmail.com. Please verify by clicking on the given link",
          "message": "expected 'Password reset link successfully sent…' to be one of [ …(8) ]",
          "stack": "AssertionError: expected 'Password reset link successfully sent…' to be one of [ …(8) ]\n   at Object.eval sandbox-script.js:1:6)",
          "checksum": "990b99ddba0a679340683d9752ffed1d",
          "id": "7399e062-1089-4dc6-9f1b-c0858f6fd23f",
          "timestamp": 1698733440668,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 1,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 6,
              "native": false
            }
          ]
        },
        "at": "assertion:0 in test-script",
        "source": {
          "id": "03c5b9ed-2c86-4338-932a-d93a799c2d8d",
          "name": "ForgotPassword",
          "request": {
            "url": {
              "path": [
                "users",
                "forgot-password"
              ],
              "host": [
                "{{exp_url}}"
              ],
              "query": [],
              "variable": []
            },
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\r\n    \"email\":\"{{randomEmail}}\"\r\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "auth": {
              "type": "apikey",
              "apikey": [
                {
                  "type": "string",
                  "value": "{{exp_token}}",
                  "key": "value"
                },
                {
                  "type": "string",
                  "value": "header",
                  "key": "in"
                },
                {
                  "type": "string",
                  "value": "x-auth-token",
                  "key": "key"
                }
              ]
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "72c44319-e1e0-49ac-91f7-f3f0cd439f93",
                "type": "text/javascript",
                "exec": [
                  "let jsonData = pm.response.json();\r",
                  "let jsonEmail = JSON.parse(pm.request.body.raw).email;\r",
                  "\r",
                  "message = [\r",
                  "    \"Access token is not valid or has expired, you will need to login\",\r",
                  "    \"No authentication token specified in x-auth-token header\",\r",
                  "    \"Unauthorized Request\",\r",
                  "    \"Internal Error Server\",\r",
                  "    `Password reset link successfully sent to ${pm.environment.get(\"email\")}. Please verify by clicking on the given link`,\r",
                  "    \"Not Found\",\r",
                  "    \"Bad Request\",\r",
                  "    \"A valid email address is required\"\r",
                  "]\r",
                  "\r",
                  "status = [400,401,404,500,200,201]\r",
                  "// var jsonData1 = pm.response.json();\r",
                  "// pm.environment.set(\"phoneNumber\", jsonData1.data.phone);\r",
                  "\r",
                  "if (jsonData.success === false) {\r",
                  "    pm.test(`**** E R R O R ***** ${jsonData.message}`, function(){\r",
                  "        // pm.expect(jsonData.message).to.eql(\"No authentication token specified in x-auth-token header\");\r",
                  "        pm.expect(jsonData.message).to.be.oneOf(message);\r",
                  "    });\r",
                  "\r",
                  "    pm.test(`Check the multiple error status code ${jsonData.status}`, function(){\r",
                  "        pm.expect(pm.response.code).to.be.oneOf(status);\r",
                  "    });\r",
                  "\r",
                  "\r",
                  "}\r",
                  "else {\r",
                  "    pm.test(`*** S U C C E S S *** ${jsonData.message}`, function(){\r",
                  "        // pm.expect(jsonData.message).to.equal(\"Profile successful\");\r",
                  "        pm.expect(jsonData.message).to.be.oneOf(message);\r",
                  "    });\r",
                  "\r",
                  "    pm.test(\"Check the response time\", function(){\r",
                  "    pm.expect(pm.response.responseTime).to.be.below(6000);\r",
                  "    });\r",
                  "\r",
                  "    pm.test(`Check the Status code ${jsonData.status}`, function(){\r",
                  "        pm.expect(pm.response.code).to.be.oneOf(status);\r",
                  "    });\r",
                  "\r",
                  "    pm.test(\"Body matches multiple string\",function(){\r",
                  "    pm.expect(pm.response.text()).to.include(\"message\");\r",
                  "});\r",
                  "\r",
                  "}\r",
                  "\r",
                  ""
                ],
                "_lastExecutionId": "a3803636-b917-4048-8873-b62ae1f022d6"
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "id": "6236deb0-9668-46d8-bb96-97cc86eeb0fa",
                "type": "text/javascript",
                "exec": [
                  ""
                ],
                "_lastExecutionId": "148f797c-8661-4a45-97c4-527fe81fce77"
              }
            }
          ]
        },
        "parent": {
          "_": {
            "postman_id": "723ea9c3-0635-4605-b90c-d6d9e9835d8c",
            "exporter_id": "13852941",
            "collection_link": "https://galactic-astronaut-894425.postman.co/workspace/b6dafb4f-3507-4e58-a32d-dd31bf6ab148/collection/13852941-723ea9c3-0635-4605-b90c-d6d9e9835d8c?action=share&source=collection_link&creator=13852941"
          },
          "item": [
            {
              "id": "90407c19-d06c-4337-abb9-4dfc2fa17fc8",
              "name": "health_check",
              "request": {
                "url": {
                  "path": [
                    "health-check"
                  ],
                  "host": [
                    "{{exp_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "b075fb8f-9483-4909-a4a4-cf6344c6642b",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Check the Status code 200\", function(){\r",
                      "    pm.response.to.have.status(200);\r",
                      "});\r",
                      "\r",
                      "var jsonData = pm.response.json();\r",
                      "\r",
                      "pm.test(\"Check the success code in body\", function(){\r",
                      "    pm.expect(jsonData.success).to.eql(true);\r",
                      "});\r",
                      "\r",
                      "pm.test(\"Check the Status code in body\", function(){\r",
                      "    pm.expect(jsonData.status).to.eql(200);\r",
                      "});\r",
                      "\r",
                      "pm.test(\"Check the message in body\", function(){\r",
                      "    pm.expect(jsonData.message).to.eql(\"Notes API is Running\");\r",
                      "});\r",
                      "\r",
                      "\r",
                      ""
                    ],
                    "_lastExecutionId": "dcf22f24-f95a-4d61-981a-68f2474c0b1d"
                  }
                },
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "15079d7d-2fc3-468b-b923-1fd697b2156e",
                    "type": "text/javascript",
                    "exec": [
                      ""
                    ],
                    "_lastExecutionId": "a57965c9-dfeb-425b-a87b-14b41a981af7"
                  }
                }
              ]
            },
            {
              "id": "d3b70abb-4c44-4d96-b946-e8ef2e19907f",
              "name": "RegisterUser",
              "request": {
                "url": {
                  "path": [
                    "users",
                    "register"
                  ],
                  "host": [
                    "{{exp_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n    \"name\":\"{{$randomFullName}}\",\r\n    \"email\":\"{{randomEmail}}\",\r\n    \"password\":\"{{$randomPassword}}\"\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "4f0c3c3d-4171-4bea-b8a8-3fd567809f0d",
                    "type": "text/javascript",
                    "exec": [
                      "var jsonData = pm.response.json();\r",
                      "\r",
                      "pm.test(\"Check the success msg is true in body?\", function(){\r",
                      "    pm.expect(jsonData.success).to.eql(true);\r",
                      "});\r",
                      "\r",
                      "pm.test(\"Check the body message\", function(){\r",
                      "    pm.expect(jsonData.message).to.eql(\"User account created successfully\");\r",
                      "});\r",
                      "\r",
                      "pm.test(\"Verify the values are not null\", function(){\r",
                      "    pm.expect(jsonData.data.id, \"Id is not null\").to.not.be.null;\r",
                      "    pm.expect(jsonData.data.name, \"name is not null\").to.not.be.null;\r",
                      "    pm.expect(jsonData.data.email, \"email is not null\").to.not.be.null;\r",
                      "});\r",
                      "\r",
                      "pm.test(\"response property matching an environment variable\", function(){\r",
                      "    pm.expect(jsonData.name).to.eql(pm.environment.get(\"name\"));\r",
                      "});\r",
                      "\r",
                      "pm.test(\"Check the response time\", function(){\r",
                      "    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
                      "});\r",
                      "\r",
                      "pm.environment.set(\"id\", jsonData.data.id);\r",
                      "pm.environment.set(\"name\", jsonData.data.name);\r",
                      "\r",
                      "let password = JSON.parse(pm.request.body.raw).password;\r",
                      "pm.environment.set('password', password);\r",
                      "\r",
                      "message = [\r",
                      "    \"Access token is not valid or has expired, you will need to login\",\r",
                      "    \"No authentication token specified in x-auth-token header\",\r",
                      "    \"User name must be between 4 and 30 characters\",\r",
                      "    \"Phone number should be between 8 and 20 digits\",\r",
                      "    \"Unauthorized Request\",\r",
                      "    \"Internal Error Server\",\r",
                      "    \"Profile updated successful\",\r",
                      "    \"User account created successfully\",\r",
                      "    \"Not Found\",\r",
                      "    \"Bad Request\",\r",
                      "    \"An account already exists with the same email address\"\r",
                      "];\r",
                      "\r",
                      "status = [400,401,404,409,500,200,201];\r",
                      "\r",
                      "if (jsonData.success === false) {\r",
                      "    pm.test(`**** E R R O R ***** ${jsonData.message}`, function(){\r",
                      "        pm.expect(jsonData.message).to.be.oneOf(message);\r",
                      "    });\r",
                      "\r",
                      "    pm.test(`Check the multiple error status code ${jsonData.status}`, function(){\r",
                      "        pm.expect(pm.response.code).to.be.oneOf(status);\r",
                      "    });\r",
                      "}\r",
                      "else {\r",
                      "    pm.test(`*** S U C C E S S *** ${jsonData.message}`, function(){\r",
                      "        pm.expect(jsonData.message).to.be.oneOf(message);\r",
                      "    });\r",
                      "\r",
                      "    pm.test(`Check the Status code ${jsonData.status}`, function(){\r",
                      "        pm.expect(pm.response.code).to.be.oneOf(status);\r",
                      "    });\r",
                      "}"
                    ],
                    "_lastExecutionId": "2fbfcb58-035a-4d0d-afa2-7fc9d5239e13"
                  }
                },
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "3483ef69-d6b6-4835-8746-973a3f7a159e",
                    "type": "text/javascript",
                    "exec": [
                      "\r",
                      "// // Define the incrementEmail function\r",
                      "// function incrementEmail(email) {\r",
                      "//     const match = email.match(/\\+a(\\d+)/);\r",
                      "\r",
                      "//     if (match) {\r",
                      "//         const currentNumber = parseInt(match[1]);\r",
                      "//         const nextNumber = currentNumber + 1;\r",
                      "//         const incrementedEmail = email.replace(/\\+a\\d+/, `+a${nextNumber}`);\r",
                      "//         return incrementedEmail;\r",
                      "//     }\r",
                      "\r",
                      "//     return email;\r",
                      "// }\r",
                      "\r",
                      "\r",
                      "// const originalEmail = pm.environment.get(\"email\");\r",
                      "\r",
                      "\r",
                      "// if (originalEmail) {\r",
                      "//     // Use the incrementEmail function to get the incremented email\r",
                      "//     const incrementedEmail = incrementEmail(originalEmail);\r",
                      "\r",
                      "//     // Set the incremented email back to the environment\r",
                      "//     pm.environment.set(\"email\", incrementedEmail);\r",
                      "\r",
                      "//     console.log(\"OriginalEmail:\", originalEmail);\r",
                      "//     console.log(\"IncrementedEmail:\", incrementedEmail);\r",
                      "// } else {\r",
                      "//     console.error(\"Email environment variable not found.\");\r",
                      "// }\r",
                      "\r",
                      "// console.log(pm.environment.get(\"email\"));\r",
                      "\r",
                      "\r",
                      "// -------------------------------------------------------------------\r",
                      "// Define the base part of the email address\r",
                      "const baseEmail = pm.environment.get(\"baseEmail\");\r",
                      "\r",
                      "// Generate a random number between min and max (inclusive)\r",
                      "function getRandomNumber(min, max) {\r",
                      "    return Math.floor(Math.random() * (max - min + 1)) + min;\r",
                      "}\r",
                      "\r",
                      "// Generate a random sequence like +a151, +a152, +a153, and so on\r",
                      "const randomSequence = `+a${getRandomNumber(1, 999)}`;\r",
                      "\r",
                      "// Combine the base and random sequence to create the random email address\r",
                      "const randomEmail = `${baseEmail}${randomSequence}@gmail.com`;\r",
                      "\r",
                      "// Set the random email address as an environment variable for your request\r",
                      "pm.environment.set('randomEmail', randomEmail);\r",
                      "\r",
                      "\r",
                      ""
                    ],
                    "_lastExecutionId": "f0df73d6-9875-49de-aaed-2ffb46745ff0"
                  }
                }
              ]
            },
            {
              "id": "1da8b1e7-3198-4c60-9c34-4a1e8b7e8b15",
              "name": "UserLogin",
              "request": {
                "url": {
                  "path": [
                    "users",
                    "login"
                  ],
                  "host": [
                    "{{exp_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n    \"email\":\"{{randomEmail}}\",\r\n    \"password\":\"{{password}}\"\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "cc8daf67-c0f2-4843-9223-e47d8fe754ec",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Check the status code is 200\", function(){\r",
                      "    pm.response.to.have.status(200);\r",
                      "});\r",
                      "\r",
                      "var jsonData = pm.response.json();\r",
                      "\r",
                      "pm.test(\"Check the success message\", function(){\r",
                      "    pm.expect(jsonData.success).to.eql(true);\r",
                      "});\r",
                      "\r",
                      "pm.test(\"Check the body message\", function(){\r",
                      "    pm.expect(jsonData.message).to.eql(\"Login successful\");\r",
                      "});\r",
                      "\r",
                      "pm.environment.set(\"exp_token\", jsonData.data.token);\r",
                      "\r",
                      "pm.test(\"Verify the values are not null\", function(){\r",
                      "    pm.expect(jsonData.data.id, \"Id is not a null\").to.not.be.null;\r",
                      "    pm.expect(jsonData.data.name, \"name is not a null\").to.not.be.null;\r",
                      "    pm.expect(jsonData.data.email, \"email is not a null\").to.not.be.null;\r",
                      "    pm.expect(jsonData.data.token, \"token is not a null\").to.not.be.null;\r",
                      "});\r",
                      "\r",
                      "pm.test(\"Check the response time\", function(){\r",
                      "    pm.expect(pm.response.responseTime).to.below(2000);\r",
                      "});\r",
                      "\r",
                      ""
                    ],
                    "_lastExecutionId": "4a906166-3676-408b-bc6f-6c09add962a5"
                  }
                },
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "98d0941e-d03e-4ab7-a7b0-84826ad7708a",
                    "type": "text/javascript",
                    "exec": [
                      ""
                    ],
                    "_lastExecutionId": "2f4a3493-6a43-4652-8c74-458390f9ecf9"
                  }
                }
              ]
            },
            {
              "id": "3f4af57c-fb9c-4a3c-8c2b-0f9b603b0679",
              "name": "GetProfile",
              "request": {
                "url": {
                  "path": [
                    "users",
                    "profile"
                  ],
                  "host": [
                    "{{exp_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET",
                "auth": {
                  "type": "apikey",
                  "apikey": [
                    {
                      "type": "string",
                      "value": "{{exp_token}}",
                      "key": "value"
                    },
                    {
                      "type": "string",
                      "value": "header",
                      "key": "in"
                    },
                    {
                      "type": "string",
                      "value": "x-auth-token",
                      "key": "key"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "56a6399c-71a1-414d-b876-9262a848415f",
                    "type": "text/javascript",
                    "exec": [
                      "\r",
                      "let jsonData = pm.response.json();\r",
                      "message = [\r",
                      "    \"Access token is not valid or has expired, you will need to login\",\r",
                      "    \"No authentication token specified in x-auth-token header\",\r",
                      "    \"Bad Request\",\r",
                      "    \"Unauthorized Request\",\r",
                      "    \"Internal Error Server\",\r",
                      "    \"Profile successful\",\r",
                      "    \"Not Found\"\r",
                      "]\r",
                      "\r",
                      "status = [400,401,404,500,200,201]\r",
                      "\r",
                      "if (jsonData.success === false) {\r",
                      "    pm.test(`**** E R R O R ***** ${jsonData.message}`, function(){\r",
                      "        // pm.expect(jsonData.message).to.eql(\"No authentication token specified in x-auth-token header\");\r",
                      "        pm.expect(jsonData.message).to.be.oneOf(message);\r",
                      "    });\r",
                      "\r",
                      "    pm.test(`Check the multiple error status code ${jsonData.status}`, function(){\r",
                      "        pm.expect(pm.response.code).to.be.oneOf(status);\r",
                      "    });\r",
                      "\r",
                      "\r",
                      "}\r",
                      "else {\r",
                      "    pm.test(`*** S U C C E S S *** ${jsonData.message}`, function(){\r",
                      "        // pm.expect(jsonData.message).to.equal(\"Profile successful\");\r",
                      "        pm.expect(jsonData.message).to.be.oneOf(message);\r",
                      "    });\r",
                      "\r",
                      "    pm.test(\"Check the response time\", function(){\r",
                      "    pm.expect(pm.response.responseTime).to.be.below(6000);\r",
                      "    });\r",
                      "\r",
                      "    pm.test(`Check the Status code ${jsonData.status}`, function(){\r",
                      "        pm.expect(pm.response.code).to.be.oneOf(status);\r",
                      "    });\r",
                      "\r",
                      "    pm.test(\"Body matches multiple string\",function(){\r",
                      "    pm.expect(pm.response.text()).to.include(\"id\");\r",
                      "    pm.expect(pm.response.text()).to.include(\"name\");\r",
                      "    pm.expect(pm.response.text()).to.include(\"email\");\r",
                      "});\r",
                      "\r",
                      "}\r",
                      "\r",
                      ""
                    ],
                    "_lastExecutionId": "55d3989d-79a3-476b-87c3-020290feeec2"
                  }
                },
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "5b6727ff-6213-4350-874c-dbaeeb0d0d03",
                    "type": "text/javascript",
                    "exec": [
                      ""
                    ],
                    "_lastExecutionId": "5e07b22a-eb37-441e-b764-c112f7fde3f7"
                  }
                }
              ],
              "protocolProfileBehavior": {
                "disabledSystemHeaders": {}
              }
            },
            {
              "id": "ee9d7916-0288-4df6-a4d2-05ed9c78c4f1",
              "name": "UpdateProfile",
              "request": {
                "url": {
                  "path": [
                    "users",
                    "profile"
                  ],
                  "host": [
                    "{{exp_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "PATCH",
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n    \"name\":\"{{name}}\",\r\n    \"phone\":\"{{random_number}}\",\r\n    \"company\":\"{{$randomCompanyName}}\"\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "auth": {
                  "type": "apikey",
                  "apikey": [
                    {
                      "type": "string",
                      "value": "{{exp_token}}",
                      "key": "value"
                    },
                    {
                      "type": "string",
                      "value": "header",
                      "key": "in"
                    },
                    {
                      "type": "string",
                      "value": "x-auth-token",
                      "key": "key"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "6ab7e932-eb9b-4edc-9edc-b8d42e4162ad",
                    "type": "text/javascript",
                    "exec": [
                      "let jsonData = pm.response.json();\r",
                      "message = [\r",
                      "    \"Access token is not valid or has expired, you will need to login\",\r",
                      "    \"No authentication token specified in x-auth-token header\",\r",
                      "    \"User name must be between 4 and 30 characters\",\r",
                      "    \"Phone number should be between 8 and 20 digits\",\r",
                      "    \"Unauthorized Request\",\r",
                      "    \"Internal Error Server\",\r",
                      "    \"Profile updated successful\",\r",
                      "    \"Not Found\",\r",
                      "    \"Bad Request\"\r",
                      "]\r",
                      "\r",
                      "status = [400,401,404,500,200,201]\r",
                      "// var jsonData1 = pm.response.json();\r",
                      "// pm.environment.set(\"phoneNumber\", jsonData1.data.phone);\r",
                      "\r",
                      "if (jsonData.success === false) {\r",
                      "    pm.test(`**** E R R O R ***** ${jsonData.message}`, function(){\r",
                      "        // pm.expect(jsonData.message).to.eql(\"No authentication token specified in x-auth-token header\");\r",
                      "        pm.expect(jsonData.message).to.be.oneOf(message);\r",
                      "    });\r",
                      "\r",
                      "    pm.test(`Check the multiple error status code ${jsonData.status}`, function(){\r",
                      "        pm.expect(pm.response.code).to.be.oneOf(status);\r",
                      "    });\r",
                      "\r",
                      "\r",
                      "}\r",
                      "else {\r",
                      "    pm.test(`*** S U C C E S S *** ${jsonData.message}`, function(){\r",
                      "        // pm.expect(jsonData.message).to.equal(\"Profile successful\");\r",
                      "        pm.expect(jsonData.message).to.be.oneOf(message);\r",
                      "    });\r",
                      "\r",
                      "    pm.test(\"Check the response time\", function(){\r",
                      "    pm.expect(pm.response.responseTime).to.be.below(6000);\r",
                      "    });\r",
                      "\r",
                      "    pm.test(`Check the Status code ${jsonData.status}`, function(){\r",
                      "        pm.expect(pm.response.code).to.be.oneOf(status);\r",
                      "    });\r",
                      "\r",
                      "    pm.test(\"Body matches multiple string\",function(){\r",
                      "    pm.expect(pm.response.text()).to.include(\"id\");\r",
                      "    pm.expect(pm.response.text()).to.include(\"name\");\r",
                      "    pm.expect(pm.response.text()).to.include(\"email\");\r",
                      "});\r",
                      "\r",
                      "}\r",
                      "\r",
                      ""
                    ],
                    "_lastExecutionId": "bf535ed4-ea27-433b-95ed-0405878d634c"
                  }
                },
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "1dd9ce14-2fea-48d5-b628-446e36acb961",
                    "type": "text/javascript",
                    "exec": [
                      "pm.environment.set(\"random_number\",_.random(1000000000,9999999999));\r",
                      "\r",
                      "\r",
                      ""
                    ],
                    "_lastExecutionId": "81adb337-1695-4fed-b265-391f869dd222"
                  }
                }
              ]
            },
            {
              "id": "03c5b9ed-2c86-4338-932a-d93a799c2d8d",
              "name": "ForgotPassword",
              "request": {
                "url": {
                  "path": [
                    "users",
                    "forgot-password"
                  ],
                  "host": [
                    "{{exp_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n    \"email\":\"{{randomEmail}}\"\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "auth": {
                  "type": "apikey",
                  "apikey": [
                    {
                      "type": "string",
                      "value": "{{exp_token}}",
                      "key": "value"
                    },
                    {
                      "type": "string",
                      "value": "header",
                      "key": "in"
                    },
                    {
                      "type": "string",
                      "value": "x-auth-token",
                      "key": "key"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "72c44319-e1e0-49ac-91f7-f3f0cd439f93",
                    "type": "text/javascript",
                    "exec": [
                      "let jsonData = pm.response.json();\r",
                      "let jsonEmail = JSON.parse(pm.request.body.raw).email;\r",
                      "\r",
                      "message = [\r",
                      "    \"Access token is not valid or has expired, you will need to login\",\r",
                      "    \"No authentication token specified in x-auth-token header\",\r",
                      "    \"Unauthorized Request\",\r",
                      "    \"Internal Error Server\",\r",
                      "    `Password reset link successfully sent to ${pm.environment.get(\"email\")}. Please verify by clicking on the given link`,\r",
                      "    \"Not Found\",\r",
                      "    \"Bad Request\",\r",
                      "    \"A valid email address is required\"\r",
                      "]\r",
                      "\r",
                      "status = [400,401,404,500,200,201]\r",
                      "// var jsonData1 = pm.response.json();\r",
                      "// pm.environment.set(\"phoneNumber\", jsonData1.data.phone);\r",
                      "\r",
                      "if (jsonData.success === false) {\r",
                      "    pm.test(`**** E R R O R ***** ${jsonData.message}`, function(){\r",
                      "        // pm.expect(jsonData.message).to.eql(\"No authentication token specified in x-auth-token header\");\r",
                      "        pm.expect(jsonData.message).to.be.oneOf(message);\r",
                      "    });\r",
                      "\r",
                      "    pm.test(`Check the multiple error status code ${jsonData.status}`, function(){\r",
                      "        pm.expect(pm.response.code).to.be.oneOf(status);\r",
                      "    });\r",
                      "\r",
                      "\r",
                      "}\r",
                      "else {\r",
                      "    pm.test(`*** S U C C E S S *** ${jsonData.message}`, function(){\r",
                      "        // pm.expect(jsonData.message).to.equal(\"Profile successful\");\r",
                      "        pm.expect(jsonData.message).to.be.oneOf(message);\r",
                      "    });\r",
                      "\r",
                      "    pm.test(\"Check the response time\", function(){\r",
                      "    pm.expect(pm.response.responseTime).to.be.below(6000);\r",
                      "    });\r",
                      "\r",
                      "    pm.test(`Check the Status code ${jsonData.status}`, function(){\r",
                      "        pm.expect(pm.response.code).to.be.oneOf(status);\r",
                      "    });\r",
                      "\r",
                      "    pm.test(\"Body matches multiple string\",function(){\r",
                      "    pm.expect(pm.response.text()).to.include(\"message\");\r",
                      "});\r",
                      "\r",
                      "}\r",
                      "\r",
                      ""
                    ],
                    "_lastExecutionId": "a3803636-b917-4048-8873-b62ae1f022d6"
                  }
                },
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "6236deb0-9668-46d8-bb96-97cc86eeb0fa",
                    "type": "text/javascript",
                    "exec": [
                      ""
                    ],
                    "_lastExecutionId": "148f797c-8661-4a45-97c4-527fe81fce77"
                  }
                }
              ]
            },
            {
              "id": "eea8198b-64d4-43e4-b554-aefaae2516cd",
              "name": "GetEmailMessage",
              "request": {
                "url": {
                  "protocol": "https",
                  "path": [
                    "gmail",
                    "v1",
                    "users",
                    "{{user_email_id}}",
                    "messages",
                    ""
                  ],
                  "host": [
                    "gmail",
                    "googleapis",
                    "com"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET",
                "auth": {
                  "type": "oauth2",
                  "oauth2": [
                    {
                      "type": "boolean",
                      "value": false,
                      "key": "useBrowser"
                    },
                    {
                      "type": "string",
                      "value": "{{Scope}}",
                      "key": "scope"
                    },
                    {
                      "type": "string",
                      "value": "{{Client_Secret}}",
                      "key": "clientSecret"
                    },
                    {
                      "type": "string",
                      "value": "{{Client_ID}}",
                      "key": "clientId"
                    },
                    {
                      "type": "string",
                      "value": "{{Access_Token_URL}}",
                      "key": "accessTokenUrl"
                    },
                    {
                      "type": "string",
                      "value": "{{Auth_URL}}",
                      "key": "authUrl"
                    },
                    {
                      "type": "string",
                      "value": "{{Callback_URL}}",
                      "key": "redirect_uri"
                    },
                    {
                      "type": "string",
                      "value": "authorization_code",
                      "key": "grant_type"
                    },
                    {
                      "type": "string",
                      "value": "email_token",
                      "key": "tokenName"
                    },
                    {
                      "type": "string",
                      "value": "header",
                      "key": "addTokenTo"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "705020a4-73b3-44df-86ff-a5984e094d10",
                    "type": "text/javascript",
                    "exec": [
                      "var jsonData = pm.response.json();\r",
                      "pm.environment.set(\"messageId\", jsonData.messages[0].id);\r",
                      "\r",
                      ""
                    ],
                    "_lastExecutionId": "eeef6f2d-f5fd-4a00-be9c-25555c6fa5bc"
                  }
                },
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "cdf7837a-853f-442c-8e05-996129213a95",
                    "type": "text/javascript",
                    "exec": [
                      "var newRefreshToken = pm.environment.get(\"access_token\");\r",
                      "\r",
                      "pm.environment.set(\"refresh_token\", newRefreshToken);"
                    ],
                    "_lastExecutionId": "94790536-1730-42ee-886b-f2872e8a5fee"
                  }
                }
              ]
            },
            {
              "id": "f053ddc8-a8a6-4796-a23f-c89737b34582",
              "name": "GetMessageByID",
              "request": {
                "url": {
                  "protocol": "https",
                  "path": [
                    "gmail",
                    "v1",
                    "users",
                    "{{user_email_id}}",
                    "messages",
                    "{{messageId}}"
                  ],
                  "host": [
                    "gmail",
                    "googleapis",
                    "com"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "multipart/mixed"
                  }
                ],
                "method": "GET",
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "{{access_token}}",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "d94857cd-ae23-40c6-ae38-5f7aaca3e833",
                    "type": "text/javascript",
                    "exec": [
                      "\r",
                      "const response = pm.response.json();\r",
                      "\r",
                      "pm.environment.set(\"message_Body\", response.payload.body.data);\r",
                      "\r",
                      "var atob = require('atob');\r",
                      "\r",
                      "\r",
                      "var base64Data = pm.environment.get(\"message_Body\");\r",
                      "var decodedData = atob(base64Data);\r",
                      "postman.setEnvironmentVariable(\"rest_password\",decodedData);\r",
                      "var tokenRegex = /Reset password link: (https:\\/\\/practice\\.expandtesting\\.com\\/notes\\/app\\/reset-password\\/([\\w\\d]+))[^ ]+/;\r",
                      "var tokenMatch = decodedData.match(tokenRegex);\r",
                      "if (tokenMatch && tokenMatch[2]) {\r",
                      "    var resetPasswordToken = tokenMatch[2];\r",
                      "    \r",
                      "    // Set the reset password link as a Postman environment variable for later use\r",
                      "    pm.environment.set(\"resetPasswordToken\", resetPasswordToken);\r",
                      "    \r",
                      "    // Log the reset password link\r",
                      "    console.log(\"Reset Password Token: \" + resetPasswordToken);\r",
                      "} else {\r",
                      "    console.log(\"Reset password token not found in the response.\");\r",
                      "}\r",
                      "console.log(decodedData);\r",
                      "\r",
                      "\r",
                      "\r",
                      "\r",
                      "\r",
                      "\r",
                      "\r",
                      "\r",
                      "\r",
                      "\r",
                      "\r",
                      ""
                    ],
                    "_lastExecutionId": "4816be40-7f3a-489e-b23c-14c698a58ddc"
                  }
                },
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "8349aa22-c992-434e-9e35-e5fc8ef4a245",
                    "type": "text/javascript",
                    "exec": [
                      ""
                    ],
                    "_lastExecutionId": "e5ddbcb0-9830-4e57-9232-851987938e7d"
                  }
                }
              ]
            },
            {
              "id": "8d884a10-0abd-48de-9b8a-47bfc7ff13cd",
              "name": "verify-reset-password-token",
              "request": {
                "url": {
                  "path": [
                    "users",
                    "verify-reset-password-token"
                  ],
                  "host": [
                    "{{exp_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "accept",
                    "value": "application/json"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/x-www-form-urlencoded"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "urlencoded",
                  "urlencoded": [
                    {
                      "key": "token",
                      "value": "{{resetPasswordToken}}"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "799e647c-efdd-4528-bf8c-ec8d1e1a4b55",
                    "type": "text/javascript",
                    "exec": [
                      "let jsonData = pm.response.json();\r",
                      "\r",
                      "message = [\r",
                      "    \"The provided password reset token is valid\",\r",
                      "    \"Bad Request\",\r",
                      "    \"Internal Error Server\",\r",
                      "    \"The provided password reset token is invalid or has expired\"\r",
                      "]\r",
                      "\r",
                      "status = [200,400,401,500]\r",
                      "\r",
                      "if (jsonData.success === false) {\r",
                      "    pm.test(`**** E R R O R ***** ${jsonData.message}`, function(){\r",
                      "        // pm.expect(jsonData.message).to.eql(\"No authentication token specified in x-auth-token header\");\r",
                      "        pm.expect(jsonData.message).to.be.oneOf(message);\r",
                      "    });\r",
                      "\r",
                      "    pm.test(`Check the multiple error status code ${jsonData.status}`, function(){\r",
                      "        pm.expect(pm.response.code).to.be.oneOf(status);\r",
                      "    });\r",
                      "\r",
                      "\r",
                      "}\r",
                      "else {\r",
                      "    pm.test(`*** S U C C E S S *** ${jsonData.message}`, function(){\r",
                      "        // pm.expect(jsonData.message).to.equal(\"Profile successful\");\r",
                      "        pm.expect(jsonData.message).to.be.oneOf(message);\r",
                      "    });\r",
                      "\r",
                      "    pm.test(\"Check the response time\", function(){\r",
                      "    pm.expect(pm.response.responseTime).to.be.below(6000);\r",
                      "    });\r",
                      "\r",
                      "    pm.test(`Check the Status code ${jsonData.status}`, function(){\r",
                      "        pm.expect(pm.response.code).to.be.oneOf(status);\r",
                      "    });\r",
                      "\r",
                      "    pm.test(\"Body matches multiple string\",function(){\r",
                      "    pm.expect(pm.response.text()).to.include(\"message\");\r",
                      "});\r",
                      "\r",
                      "}\r",
                      "\r",
                      ""
                    ],
                    "_lastExecutionId": "c1d6d515-485d-45cb-ab2b-15662e3830f7"
                  }
                },
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "46fb041c-0790-4ccb-a117-d6dcbb44aa15",
                    "type": "text/javascript",
                    "exec": [
                      ""
                    ],
                    "_lastExecutionId": "48a955fd-f392-4b00-9034-2a273d9fea6d"
                  }
                }
              ]
            },
            {
              "id": "740f7a4b-9db6-4b38-a333-0ad712a2b2a2",
              "name": "reset-password",
              "request": {
                "url": {
                  "protocol": "https",
                  "path": [
                    "notes",
                    "api",
                    "users",
                    "reset-password"
                  ],
                  "host": [
                    "practice",
                    "expandtesting",
                    "com"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "accept",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n    \"token\":\"{{resetPasswordToken}}\",\r\n    \"newPassword\":\"{{$randomPassword}}\"\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "7cdc8324-5612-42e4-8f85-49037412238b",
                    "type": "text/javascript",
                    "exec": [
                      "let jsonData = pm.response.json();\r",
                      "\r",
                      "let newPassword = JSON.parse(pm.request.body.raw).newPassword;\r",
                      "pm.environment.set('password', newPassword);\r",
                      "\r",
                      "\r",
                      "message = [\r",
                      "    \"The password has been successfully reset\",\r",
                      "    \"Token must be between 64 characters\",\r",
                      "    \"Bad Request\",\r",
                      "    \"The password was successfully updated\",\r",
                      "    \"Internal Error Server\",\r",
                      "    \"New password must be between 6 and 30 characters\",\r",
                      "    \"The password reset token is invalid or has expired\"\r",
                      "]\r",
                      "\r",
                      "status = [200,400,401,500]\r",
                      "\r",
                      "if (jsonData.success === false) {\r",
                      "    pm.test(`**** E R R O R ***** ${jsonData.message}`, function(){\r",
                      "        // pm.expect(jsonData.message).to.eql(\"No authentication token specified in x-auth-token header\");\r",
                      "        pm.expect(jsonData.message).to.be.oneOf(message);\r",
                      "    });\r",
                      "\r",
                      "    pm.test(`Check the multiple error status code ${jsonData.status}`, function(){\r",
                      "        pm.expect(pm.response.code).to.be.oneOf(status);\r",
                      "    });\r",
                      "\r",
                      "\r",
                      "}\r",
                      "else {\r",
                      "    pm.test(`*** S U C C E S S *** ${jsonData.message}`, function(){\r",
                      "        // pm.expect(jsonData.message).to.equal(\"Profile successful\");\r",
                      "        pm.expect(jsonData.message).to.be.oneOf(message);\r",
                      "    });\r",
                      "\r",
                      "    pm.test(\"Check the response time\", function(){\r",
                      "    pm.expect(pm.response.responseTime).to.be.below(6000);\r",
                      "    });\r",
                      "\r",
                      "    pm.test(`Check the Status code ${jsonData.status}`, function(){\r",
                      "        pm.expect(pm.response.code).to.be.oneOf(status);\r",
                      "    });\r",
                      "\r",
                      "    pm.test(\"Body matches multiple string\",function(){\r",
                      "    pm.expect(pm.response.text()).to.include(\"message\");\r",
                      "});\r",
                      "\r",
                      "}\r",
                      "\r",
                      "\r",
                      ""
                    ],
                    "_lastExecutionId": "5d234639-2098-4725-8401-094ce8fa851b"
                  }
                },
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "1268a1ec-48a3-4dfd-8fc8-3c14d0fa7f28",
                    "type": "text/javascript",
                    "exec": [
                      ""
                    ],
                    "_lastExecutionId": "3e5db1d1-0c8c-4a29-8797-f14a01a4bedc"
                  }
                }
              ]
            },
            {
              "id": "93821c3b-e028-4eda-a749-05d87d7e6a94",
              "name": "change-password",
              "request": {
                "url": {
                  "path": [
                    "users",
                    "change-password"
                  ],
                  "host": [
                    "{{exp_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "accept",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n    \"currentPassword\":\"{{password}}\",\r\n    \"newPassword\":\"{{$randomPassword}}\"\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "auth": {
                  "type": "apikey",
                  "apikey": [
                    {
                      "type": "string",
                      "value": "{{exp_token}}",
                      "key": "value"
                    },
                    {
                      "type": "string",
                      "value": "x-auth-token",
                      "key": "key"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "3eca22f1-7d4a-4832-8b68-54badb876aa6",
                    "type": "text/javascript",
                    "exec": [
                      "pm.environment.get(\"password\");\r",
                      "\r",
                      "let newPassword = JSON.parse(pm.request.body.raw).newPassword;\r",
                      "pm.environment.set('password', newPassword);\r",
                      "\r",
                      "let jsonData = pm.response.json();\r",
                      "message = [\r",
                      "    \"The password has been successfully reset\",\r",
                      "    \"Token must be between 64 characters\",\r",
                      "    \"Bad Request\",\r",
                      "    \"The password was successfully updated\",\r",
                      "    \"Internal Error Server\",\r",
                      "    \"New password must be between 6 and 30 characters\",\r",
                      "    \"The password reset token is invalid or has expired\"\r",
                      "]\r",
                      "\r",
                      "status = [200,400,401,500]\r",
                      "\r",
                      "if (jsonData.success === false) {\r",
                      "    pm.test(`**** E R R O R ***** ${jsonData.message}`, function(){\r",
                      "        // pm.expect(jsonData.message).to.eql(\"No authentication token specified in x-auth-token header\");\r",
                      "        pm.expect(jsonData.message).to.be.oneOf(message);\r",
                      "    });\r",
                      "\r",
                      "    pm.test(`Check the multiple error status code ${jsonData.status}`, function(){\r",
                      "        pm.expect(pm.response.code).to.be.oneOf(status);\r",
                      "    });\r",
                      "\r",
                      "\r",
                      "}\r",
                      "else {\r",
                      "    pm.test(`*** S U C C E S S *** ${jsonData.message}`, function(){\r",
                      "        // pm.expect(jsonData.message).to.equal(\"Profile successful\");\r",
                      "        pm.expect(jsonData.message).to.be.oneOf(message);\r",
                      "    });\r",
                      "\r",
                      "    pm.test(\"Check the response time\", function(){\r",
                      "    pm.expect(pm.response.responseTime).to.be.below(6000);\r",
                      "    });\r",
                      "\r",
                      "    pm.test(`Check the Status code ${jsonData.status}`, function(){\r",
                      "        pm.expect(pm.response.code).to.be.oneOf(status);\r",
                      "    });\r",
                      "\r",
                      "    pm.test(\"Body matches multiple string\",function(){\r",
                      "    pm.expect(pm.response.text()).to.include(\"message\");\r",
                      "});\r",
                      "\r",
                      "}\r",
                      ""
                    ],
                    "_lastExecutionId": "64be3638-86ca-4200-b966-7a137b03eb2e"
                  }
                },
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "aa473681-09fc-4673-a2fe-7012cf4e42e9",
                    "type": "text/javascript",
                    "exec": [
                      "console.log(pm.environment.get(\"password\"));\r",
                      "\r",
                      "\r",
                      "\r",
                      ""
                    ],
                    "_lastExecutionId": "fb6fc291-ccb6-46ad-9bb8-0e4bf2cf736d"
                  }
                }
              ]
            },
            {
              "id": "f4c8e78d-5700-43a2-8e20-cb1a0de26ce9",
              "name": "UserLogout",
              "request": {
                "url": {
                  "path": [
                    "users",
                    "logout"
                  ],
                  "host": [
                    "{{exp_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "accept",
                    "value": "application/json"
                  }
                ],
                "method": "DELETE",
                "auth": {
                  "type": "apikey",
                  "apikey": [
                    {
                      "type": "string",
                      "value": "{{exp_token}}",
                      "key": "value"
                    },
                    {
                      "type": "string",
                      "value": "x-auth-token",
                      "key": "key"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "43a38bb6-0063-463b-9a7b-ea0674d209fe",
                    "type": "text/javascript",
                    "exec": [
                      "let jsonData = pm.response.json();\r",
                      "message = [\r",
                      "    \"User has been successfully logged out\",\r",
                      "    \"Token must be between 64 characters\",\r",
                      "    \"Bad Request\",\r",
                      "    \"Access token is not valid or has expired, you will need to login\",\r",
                      "    \"No authentication token specified in x-auth-token header\",\r",
                      "    \"Internal Error Server\",\r",
                      "    \"Successful Request\",\r",
                      "    \"Unauthorized Request\"\r",
                      "]\r",
                      "\r",
                      "status = [200,400,401,500]\r",
                      "\r",
                      "if (jsonData.success === false) {\r",
                      "    pm.test(`**** E R R O R ***** ${jsonData.message}`, function(){\r",
                      "        // pm.expect(jsonData.message).to.eql(\"No authentication token specified in x-auth-token header\");\r",
                      "        pm.expect(jsonData.message).to.be.oneOf(message);\r",
                      "    });\r",
                      "\r",
                      "    pm.test(`Check the multiple error status code ${jsonData.status}`, function(){\r",
                      "        pm.expect(pm.response.code).to.be.oneOf(status);\r",
                      "    });\r",
                      "\r",
                      "\r",
                      "}\r",
                      "else {\r",
                      "    pm.test(`*** S U C C E S S *** ${jsonData.message}`, function(){\r",
                      "        // pm.expect(jsonData.message).to.equal(\"Profile successful\");\r",
                      "        pm.expect(jsonData.message).to.be.oneOf(message);\r",
                      "    });\r",
                      "\r",
                      "    pm.test(\"Check the response time\", function(){\r",
                      "    pm.expect(pm.response.responseTime).to.be.below(6000);\r",
                      "    });\r",
                      "\r",
                      "    pm.test(`Check the Status code ${jsonData.status}`, function(){\r",
                      "        pm.expect(pm.response.code).to.be.oneOf(status);\r",
                      "    });\r",
                      "\r",
                      "    pm.test(\"Body matches multiple string\",function(){\r",
                      "    pm.expect(pm.response.text()).to.include(\"message\");\r",
                      "});\r",
                      "\r",
                      "}\r",
                      "\r",
                      "postman.setNextRequest(null);"
                    ],
                    "_lastExecutionId": "c7d982d4-a8dc-460f-a106-6e0c01643e82"
                  }
                },
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "e8ae662d-a080-4bf5-a817-754113435b5e",
                    "type": "text/javascript",
                    "exec": [
                      ""
                    ],
                    "_lastExecutionId": "0b0d404e-4117-40fc-9982-a95619506052"
                  }
                }
              ]
            }
          ],
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "3380df96-f386-44be-9dc8-eb145a929d13",
                "type": "text/javascript",
                "exec": [
                  ""
                ],
                "_lastExecutionId": "c2613397-fddf-4d46-99b6-9ffc9166e0a8"
              }
            },
            {
              "listen": "test",
              "script": {
                "id": "18c4e0bb-9477-4e5f-b627-d550e666c7d3",
                "type": "text/javascript",
                "exec": [
                  ""
                ],
                "_lastExecutionId": "78225eb1-cbe5-408b-978b-a1bf2d2b693c"
              }
            }
          ],
          "variable": [
            {
              "type": "string",
              "value": "https://practice.expandtesting.com/notes/api",
              "key": "exp_url"
            }
          ],
          "info": {
            "_postman_id": "723ea9c3-0635-4605-b90c-d6d9e9835d8c",
            "name": "expandtesting",
            "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
          }
        },
        "cursor": {
          "ref": "9347b181-aa7d-47a6-9677-3a62f1960f90",
          "length": 12,
          "cycles": 1,
          "position": 5,
          "iteration": 0,
          "httpRequestId": "c98a6aec-f32b-4bb9-b8ff-ea8845b6a2ae",
          "scriptId": "72c44319-e1e0-49ac-91f7-f3f0cd439f93",
          "execution": "a3803636-b917-4048-8873-b62ae1f022d6"
        }
      },
      {
        "error": {
          "type": "Error",
          "name": "TypeError",
          "message": "Cannot read properties of undefined (reading '0')",
          "checksum": "47716cbf29f9fc789b5db8a9dae9103d",
          "id": "4e4a055c-6588-4e5c-8460-c64beb168e82",
          "timestamp": 1698733441268,
          "stacktrace": []
        },
        "at": "test-script",
        "source": {
          "id": "eea8198b-64d4-43e4-b554-aefaae2516cd",
          "name": "GetEmailMessage",
          "request": {
            "url": {
              "protocol": "https",
              "path": [
                "gmail",
                "v1",
                "users",
                "{{user_email_id}}",
                "messages",
                ""
              ],
              "host": [
                "gmail",
                "googleapis",
                "com"
              ],
              "query": [],
              "variable": []
            },
            "method": "GET",
            "auth": {
              "type": "oauth2",
              "oauth2": [
                {
                  "type": "boolean",
                  "value": false,
                  "key": "useBrowser"
                },
                {
                  "type": "string",
                  "value": "{{Scope}}",
                  "key": "scope"
                },
                {
                  "type": "string",
                  "value": "{{Client_Secret}}",
                  "key": "clientSecret"
                },
                {
                  "type": "string",
                  "value": "{{Client_ID}}",
                  "key": "clientId"
                },
                {
                  "type": "string",
                  "value": "{{Access_Token_URL}}",
                  "key": "accessTokenUrl"
                },
                {
                  "type": "string",
                  "value": "{{Auth_URL}}",
                  "key": "authUrl"
                },
                {
                  "type": "string",
                  "value": "{{Callback_URL}}",
                  "key": "redirect_uri"
                },
                {
                  "type": "string",
                  "value": "authorization_code",
                  "key": "grant_type"
                },
                {
                  "type": "string",
                  "value": "email_token",
                  "key": "tokenName"
                },
                {
                  "type": "string",
                  "value": "header",
                  "key": "addTokenTo"
                }
              ]
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "705020a4-73b3-44df-86ff-a5984e094d10",
                "type": "text/javascript",
                "exec": [
                  "var jsonData = pm.response.json();\r",
                  "pm.environment.set(\"messageId\", jsonData.messages[0].id);\r",
                  "\r",
                  ""
                ],
                "_lastExecutionId": "eeef6f2d-f5fd-4a00-be9c-25555c6fa5bc"
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "id": "cdf7837a-853f-442c-8e05-996129213a95",
                "type": "text/javascript",
                "exec": [
                  "var newRefreshToken = pm.environment.get(\"access_token\");\r",
                  "\r",
                  "pm.environment.set(\"refresh_token\", newRefreshToken);"
                ],
                "_lastExecutionId": "94790536-1730-42ee-886b-f2872e8a5fee"
              }
            }
          ]
        },
        "parent": {
          "_": {
            "postman_id": "723ea9c3-0635-4605-b90c-d6d9e9835d8c",
            "exporter_id": "13852941",
            "collection_link": "https://galactic-astronaut-894425.postman.co/workspace/b6dafb4f-3507-4e58-a32d-dd31bf6ab148/collection/13852941-723ea9c3-0635-4605-b90c-d6d9e9835d8c?action=share&source=collection_link&creator=13852941"
          },
          "item": [
            {
              "id": "90407c19-d06c-4337-abb9-4dfc2fa17fc8",
              "name": "health_check",
              "request": {
                "url": {
                  "path": [
                    "health-check"
                  ],
                  "host": [
                    "{{exp_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "b075fb8f-9483-4909-a4a4-cf6344c6642b",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Check the Status code 200\", function(){\r",
                      "    pm.response.to.have.status(200);\r",
                      "});\r",
                      "\r",
                      "var jsonData = pm.response.json();\r",
                      "\r",
                      "pm.test(\"Check the success code in body\", function(){\r",
                      "    pm.expect(jsonData.success).to.eql(true);\r",
                      "});\r",
                      "\r",
                      "pm.test(\"Check the Status code in body\", function(){\r",
                      "    pm.expect(jsonData.status).to.eql(200);\r",
                      "});\r",
                      "\r",
                      "pm.test(\"Check the message in body\", function(){\r",
                      "    pm.expect(jsonData.message).to.eql(\"Notes API is Running\");\r",
                      "});\r",
                      "\r",
                      "\r",
                      ""
                    ],
                    "_lastExecutionId": "dcf22f24-f95a-4d61-981a-68f2474c0b1d"
                  }
                },
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "15079d7d-2fc3-468b-b923-1fd697b2156e",
                    "type": "text/javascript",
                    "exec": [
                      ""
                    ],
                    "_lastExecutionId": "a57965c9-dfeb-425b-a87b-14b41a981af7"
                  }
                }
              ]
            },
            {
              "id": "d3b70abb-4c44-4d96-b946-e8ef2e19907f",
              "name": "RegisterUser",
              "request": {
                "url": {
                  "path": [
                    "users",
                    "register"
                  ],
                  "host": [
                    "{{exp_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n    \"name\":\"{{$randomFullName}}\",\r\n    \"email\":\"{{randomEmail}}\",\r\n    \"password\":\"{{$randomPassword}}\"\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "4f0c3c3d-4171-4bea-b8a8-3fd567809f0d",
                    "type": "text/javascript",
                    "exec": [
                      "var jsonData = pm.response.json();\r",
                      "\r",
                      "pm.test(\"Check the success msg is true in body?\", function(){\r",
                      "    pm.expect(jsonData.success).to.eql(true);\r",
                      "});\r",
                      "\r",
                      "pm.test(\"Check the body message\", function(){\r",
                      "    pm.expect(jsonData.message).to.eql(\"User account created successfully\");\r",
                      "});\r",
                      "\r",
                      "pm.test(\"Verify the values are not null\", function(){\r",
                      "    pm.expect(jsonData.data.id, \"Id is not null\").to.not.be.null;\r",
                      "    pm.expect(jsonData.data.name, \"name is not null\").to.not.be.null;\r",
                      "    pm.expect(jsonData.data.email, \"email is not null\").to.not.be.null;\r",
                      "});\r",
                      "\r",
                      "pm.test(\"response property matching an environment variable\", function(){\r",
                      "    pm.expect(jsonData.name).to.eql(pm.environment.get(\"name\"));\r",
                      "});\r",
                      "\r",
                      "pm.test(\"Check the response time\", function(){\r",
                      "    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
                      "});\r",
                      "\r",
                      "pm.environment.set(\"id\", jsonData.data.id);\r",
                      "pm.environment.set(\"name\", jsonData.data.name);\r",
                      "\r",
                      "let password = JSON.parse(pm.request.body.raw).password;\r",
                      "pm.environment.set('password', password);\r",
                      "\r",
                      "message = [\r",
                      "    \"Access token is not valid or has expired, you will need to login\",\r",
                      "    \"No authentication token specified in x-auth-token header\",\r",
                      "    \"User name must be between 4 and 30 characters\",\r",
                      "    \"Phone number should be between 8 and 20 digits\",\r",
                      "    \"Unauthorized Request\",\r",
                      "    \"Internal Error Server\",\r",
                      "    \"Profile updated successful\",\r",
                      "    \"User account created successfully\",\r",
                      "    \"Not Found\",\r",
                      "    \"Bad Request\",\r",
                      "    \"An account already exists with the same email address\"\r",
                      "];\r",
                      "\r",
                      "status = [400,401,404,409,500,200,201];\r",
                      "\r",
                      "if (jsonData.success === false) {\r",
                      "    pm.test(`**** E R R O R ***** ${jsonData.message}`, function(){\r",
                      "        pm.expect(jsonData.message).to.be.oneOf(message);\r",
                      "    });\r",
                      "\r",
                      "    pm.test(`Check the multiple error status code ${jsonData.status}`, function(){\r",
                      "        pm.expect(pm.response.code).to.be.oneOf(status);\r",
                      "    });\r",
                      "}\r",
                      "else {\r",
                      "    pm.test(`*** S U C C E S S *** ${jsonData.message}`, function(){\r",
                      "        pm.expect(jsonData.message).to.be.oneOf(message);\r",
                      "    });\r",
                      "\r",
                      "    pm.test(`Check the Status code ${jsonData.status}`, function(){\r",
                      "        pm.expect(pm.response.code).to.be.oneOf(status);\r",
                      "    });\r",
                      "}"
                    ],
                    "_lastExecutionId": "2fbfcb58-035a-4d0d-afa2-7fc9d5239e13"
                  }
                },
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "3483ef69-d6b6-4835-8746-973a3f7a159e",
                    "type": "text/javascript",
                    "exec": [
                      "\r",
                      "// // Define the incrementEmail function\r",
                      "// function incrementEmail(email) {\r",
                      "//     const match = email.match(/\\+a(\\d+)/);\r",
                      "\r",
                      "//     if (match) {\r",
                      "//         const currentNumber = parseInt(match[1]);\r",
                      "//         const nextNumber = currentNumber + 1;\r",
                      "//         const incrementedEmail = email.replace(/\\+a\\d+/, `+a${nextNumber}`);\r",
                      "//         return incrementedEmail;\r",
                      "//     }\r",
                      "\r",
                      "//     return email;\r",
                      "// }\r",
                      "\r",
                      "\r",
                      "// const originalEmail = pm.environment.get(\"email\");\r",
                      "\r",
                      "\r",
                      "// if (originalEmail) {\r",
                      "//     // Use the incrementEmail function to get the incremented email\r",
                      "//     const incrementedEmail = incrementEmail(originalEmail);\r",
                      "\r",
                      "//     // Set the incremented email back to the environment\r",
                      "//     pm.environment.set(\"email\", incrementedEmail);\r",
                      "\r",
                      "//     console.log(\"OriginalEmail:\", originalEmail);\r",
                      "//     console.log(\"IncrementedEmail:\", incrementedEmail);\r",
                      "// } else {\r",
                      "//     console.error(\"Email environment variable not found.\");\r",
                      "// }\r",
                      "\r",
                      "// console.log(pm.environment.get(\"email\"));\r",
                      "\r",
                      "\r",
                      "// -------------------------------------------------------------------\r",
                      "// Define the base part of the email address\r",
                      "const baseEmail = pm.environment.get(\"baseEmail\");\r",
                      "\r",
                      "// Generate a random number between min and max (inclusive)\r",
                      "function getRandomNumber(min, max) {\r",
                      "    return Math.floor(Math.random() * (max - min + 1)) + min;\r",
                      "}\r",
                      "\r",
                      "// Generate a random sequence like +a151, +a152, +a153, and so on\r",
                      "const randomSequence = `+a${getRandomNumber(1, 999)}`;\r",
                      "\r",
                      "// Combine the base and random sequence to create the random email address\r",
                      "const randomEmail = `${baseEmail}${randomSequence}@gmail.com`;\r",
                      "\r",
                      "// Set the random email address as an environment variable for your request\r",
                      "pm.environment.set('randomEmail', randomEmail);\r",
                      "\r",
                      "\r",
                      ""
                    ],
                    "_lastExecutionId": "f0df73d6-9875-49de-aaed-2ffb46745ff0"
                  }
                }
              ]
            },
            {
              "id": "1da8b1e7-3198-4c60-9c34-4a1e8b7e8b15",
              "name": "UserLogin",
              "request": {
                "url": {
                  "path": [
                    "users",
                    "login"
                  ],
                  "host": [
                    "{{exp_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n    \"email\":\"{{randomEmail}}\",\r\n    \"password\":\"{{password}}\"\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "cc8daf67-c0f2-4843-9223-e47d8fe754ec",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Check the status code is 200\", function(){\r",
                      "    pm.response.to.have.status(200);\r",
                      "});\r",
                      "\r",
                      "var jsonData = pm.response.json();\r",
                      "\r",
                      "pm.test(\"Check the success message\", function(){\r",
                      "    pm.expect(jsonData.success).to.eql(true);\r",
                      "});\r",
                      "\r",
                      "pm.test(\"Check the body message\", function(){\r",
                      "    pm.expect(jsonData.message).to.eql(\"Login successful\");\r",
                      "});\r",
                      "\r",
                      "pm.environment.set(\"exp_token\", jsonData.data.token);\r",
                      "\r",
                      "pm.test(\"Verify the values are not null\", function(){\r",
                      "    pm.expect(jsonData.data.id, \"Id is not a null\").to.not.be.null;\r",
                      "    pm.expect(jsonData.data.name, \"name is not a null\").to.not.be.null;\r",
                      "    pm.expect(jsonData.data.email, \"email is not a null\").to.not.be.null;\r",
                      "    pm.expect(jsonData.data.token, \"token is not a null\").to.not.be.null;\r",
                      "});\r",
                      "\r",
                      "pm.test(\"Check the response time\", function(){\r",
                      "    pm.expect(pm.response.responseTime).to.below(2000);\r",
                      "});\r",
                      "\r",
                      ""
                    ],
                    "_lastExecutionId": "4a906166-3676-408b-bc6f-6c09add962a5"
                  }
                },
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "98d0941e-d03e-4ab7-a7b0-84826ad7708a",
                    "type": "text/javascript",
                    "exec": [
                      ""
                    ],
                    "_lastExecutionId": "2f4a3493-6a43-4652-8c74-458390f9ecf9"
                  }
                }
              ]
            },
            {
              "id": "3f4af57c-fb9c-4a3c-8c2b-0f9b603b0679",
              "name": "GetProfile",
              "request": {
                "url": {
                  "path": [
                    "users",
                    "profile"
                  ],
                  "host": [
                    "{{exp_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET",
                "auth": {
                  "type": "apikey",
                  "apikey": [
                    {
                      "type": "string",
                      "value": "{{exp_token}}",
                      "key": "value"
                    },
                    {
                      "type": "string",
                      "value": "header",
                      "key": "in"
                    },
                    {
                      "type": "string",
                      "value": "x-auth-token",
                      "key": "key"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "56a6399c-71a1-414d-b876-9262a848415f",
                    "type": "text/javascript",
                    "exec": [
                      "\r",
                      "let jsonData = pm.response.json();\r",
                      "message = [\r",
                      "    \"Access token is not valid or has expired, you will need to login\",\r",
                      "    \"No authentication token specified in x-auth-token header\",\r",
                      "    \"Bad Request\",\r",
                      "    \"Unauthorized Request\",\r",
                      "    \"Internal Error Server\",\r",
                      "    \"Profile successful\",\r",
                      "    \"Not Found\"\r",
                      "]\r",
                      "\r",
                      "status = [400,401,404,500,200,201]\r",
                      "\r",
                      "if (jsonData.success === false) {\r",
                      "    pm.test(`**** E R R O R ***** ${jsonData.message}`, function(){\r",
                      "        // pm.expect(jsonData.message).to.eql(\"No authentication token specified in x-auth-token header\");\r",
                      "        pm.expect(jsonData.message).to.be.oneOf(message);\r",
                      "    });\r",
                      "\r",
                      "    pm.test(`Check the multiple error status code ${jsonData.status}`, function(){\r",
                      "        pm.expect(pm.response.code).to.be.oneOf(status);\r",
                      "    });\r",
                      "\r",
                      "\r",
                      "}\r",
                      "else {\r",
                      "    pm.test(`*** S U C C E S S *** ${jsonData.message}`, function(){\r",
                      "        // pm.expect(jsonData.message).to.equal(\"Profile successful\");\r",
                      "        pm.expect(jsonData.message).to.be.oneOf(message);\r",
                      "    });\r",
                      "\r",
                      "    pm.test(\"Check the response time\", function(){\r",
                      "    pm.expect(pm.response.responseTime).to.be.below(6000);\r",
                      "    });\r",
                      "\r",
                      "    pm.test(`Check the Status code ${jsonData.status}`, function(){\r",
                      "        pm.expect(pm.response.code).to.be.oneOf(status);\r",
                      "    });\r",
                      "\r",
                      "    pm.test(\"Body matches multiple string\",function(){\r",
                      "    pm.expect(pm.response.text()).to.include(\"id\");\r",
                      "    pm.expect(pm.response.text()).to.include(\"name\");\r",
                      "    pm.expect(pm.response.text()).to.include(\"email\");\r",
                      "});\r",
                      "\r",
                      "}\r",
                      "\r",
                      ""
                    ],
                    "_lastExecutionId": "55d3989d-79a3-476b-87c3-020290feeec2"
                  }
                },
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "5b6727ff-6213-4350-874c-dbaeeb0d0d03",
                    "type": "text/javascript",
                    "exec": [
                      ""
                    ],
                    "_lastExecutionId": "5e07b22a-eb37-441e-b764-c112f7fde3f7"
                  }
                }
              ],
              "protocolProfileBehavior": {
                "disabledSystemHeaders": {}
              }
            },
            {
              "id": "ee9d7916-0288-4df6-a4d2-05ed9c78c4f1",
              "name": "UpdateProfile",
              "request": {
                "url": {
                  "path": [
                    "users",
                    "profile"
                  ],
                  "host": [
                    "{{exp_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "PATCH",
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n    \"name\":\"{{name}}\",\r\n    \"phone\":\"{{random_number}}\",\r\n    \"company\":\"{{$randomCompanyName}}\"\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "auth": {
                  "type": "apikey",
                  "apikey": [
                    {
                      "type": "string",
                      "value": "{{exp_token}}",
                      "key": "value"
                    },
                    {
                      "type": "string",
                      "value": "header",
                      "key": "in"
                    },
                    {
                      "type": "string",
                      "value": "x-auth-token",
                      "key": "key"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "6ab7e932-eb9b-4edc-9edc-b8d42e4162ad",
                    "type": "text/javascript",
                    "exec": [
                      "let jsonData = pm.response.json();\r",
                      "message = [\r",
                      "    \"Access token is not valid or has expired, you will need to login\",\r",
                      "    \"No authentication token specified in x-auth-token header\",\r",
                      "    \"User name must be between 4 and 30 characters\",\r",
                      "    \"Phone number should be between 8 and 20 digits\",\r",
                      "    \"Unauthorized Request\",\r",
                      "    \"Internal Error Server\",\r",
                      "    \"Profile updated successful\",\r",
                      "    \"Not Found\",\r",
                      "    \"Bad Request\"\r",
                      "]\r",
                      "\r",
                      "status = [400,401,404,500,200,201]\r",
                      "// var jsonData1 = pm.response.json();\r",
                      "// pm.environment.set(\"phoneNumber\", jsonData1.data.phone);\r",
                      "\r",
                      "if (jsonData.success === false) {\r",
                      "    pm.test(`**** E R R O R ***** ${jsonData.message}`, function(){\r",
                      "        // pm.expect(jsonData.message).to.eql(\"No authentication token specified in x-auth-token header\");\r",
                      "        pm.expect(jsonData.message).to.be.oneOf(message);\r",
                      "    });\r",
                      "\r",
                      "    pm.test(`Check the multiple error status code ${jsonData.status}`, function(){\r",
                      "        pm.expect(pm.response.code).to.be.oneOf(status);\r",
                      "    });\r",
                      "\r",
                      "\r",
                      "}\r",
                      "else {\r",
                      "    pm.test(`*** S U C C E S S *** ${jsonData.message}`, function(){\r",
                      "        // pm.expect(jsonData.message).to.equal(\"Profile successful\");\r",
                      "        pm.expect(jsonData.message).to.be.oneOf(message);\r",
                      "    });\r",
                      "\r",
                      "    pm.test(\"Check the response time\", function(){\r",
                      "    pm.expect(pm.response.responseTime).to.be.below(6000);\r",
                      "    });\r",
                      "\r",
                      "    pm.test(`Check the Status code ${jsonData.status}`, function(){\r",
                      "        pm.expect(pm.response.code).to.be.oneOf(status);\r",
                      "    });\r",
                      "\r",
                      "    pm.test(\"Body matches multiple string\",function(){\r",
                      "    pm.expect(pm.response.text()).to.include(\"id\");\r",
                      "    pm.expect(pm.response.text()).to.include(\"name\");\r",
                      "    pm.expect(pm.response.text()).to.include(\"email\");\r",
                      "});\r",
                      "\r",
                      "}\r",
                      "\r",
                      ""
                    ],
                    "_lastExecutionId": "bf535ed4-ea27-433b-95ed-0405878d634c"
                  }
                },
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "1dd9ce14-2fea-48d5-b628-446e36acb961",
                    "type": "text/javascript",
                    "exec": [
                      "pm.environment.set(\"random_number\",_.random(1000000000,9999999999));\r",
                      "\r",
                      "\r",
                      ""
                    ],
                    "_lastExecutionId": "81adb337-1695-4fed-b265-391f869dd222"
                  }
                }
              ]
            },
            {
              "id": "03c5b9ed-2c86-4338-932a-d93a799c2d8d",
              "name": "ForgotPassword",
              "request": {
                "url": {
                  "path": [
                    "users",
                    "forgot-password"
                  ],
                  "host": [
                    "{{exp_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n    \"email\":\"{{randomEmail}}\"\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "auth": {
                  "type": "apikey",
                  "apikey": [
                    {
                      "type": "string",
                      "value": "{{exp_token}}",
                      "key": "value"
                    },
                    {
                      "type": "string",
                      "value": "header",
                      "key": "in"
                    },
                    {
                      "type": "string",
                      "value": "x-auth-token",
                      "key": "key"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "72c44319-e1e0-49ac-91f7-f3f0cd439f93",
                    "type": "text/javascript",
                    "exec": [
                      "let jsonData = pm.response.json();\r",
                      "let jsonEmail = JSON.parse(pm.request.body.raw).email;\r",
                      "\r",
                      "message = [\r",
                      "    \"Access token is not valid or has expired, you will need to login\",\r",
                      "    \"No authentication token specified in x-auth-token header\",\r",
                      "    \"Unauthorized Request\",\r",
                      "    \"Internal Error Server\",\r",
                      "    `Password reset link successfully sent to ${pm.environment.get(\"email\")}. Please verify by clicking on the given link`,\r",
                      "    \"Not Found\",\r",
                      "    \"Bad Request\",\r",
                      "    \"A valid email address is required\"\r",
                      "]\r",
                      "\r",
                      "status = [400,401,404,500,200,201]\r",
                      "// var jsonData1 = pm.response.json();\r",
                      "// pm.environment.set(\"phoneNumber\", jsonData1.data.phone);\r",
                      "\r",
                      "if (jsonData.success === false) {\r",
                      "    pm.test(`**** E R R O R ***** ${jsonData.message}`, function(){\r",
                      "        // pm.expect(jsonData.message).to.eql(\"No authentication token specified in x-auth-token header\");\r",
                      "        pm.expect(jsonData.message).to.be.oneOf(message);\r",
                      "    });\r",
                      "\r",
                      "    pm.test(`Check the multiple error status code ${jsonData.status}`, function(){\r",
                      "        pm.expect(pm.response.code).to.be.oneOf(status);\r",
                      "    });\r",
                      "\r",
                      "\r",
                      "}\r",
                      "else {\r",
                      "    pm.test(`*** S U C C E S S *** ${jsonData.message}`, function(){\r",
                      "        // pm.expect(jsonData.message).to.equal(\"Profile successful\");\r",
                      "        pm.expect(jsonData.message).to.be.oneOf(message);\r",
                      "    });\r",
                      "\r",
                      "    pm.test(\"Check the response time\", function(){\r",
                      "    pm.expect(pm.response.responseTime).to.be.below(6000);\r",
                      "    });\r",
                      "\r",
                      "    pm.test(`Check the Status code ${jsonData.status}`, function(){\r",
                      "        pm.expect(pm.response.code).to.be.oneOf(status);\r",
                      "    });\r",
                      "\r",
                      "    pm.test(\"Body matches multiple string\",function(){\r",
                      "    pm.expect(pm.response.text()).to.include(\"message\");\r",
                      "});\r",
                      "\r",
                      "}\r",
                      "\r",
                      ""
                    ],
                    "_lastExecutionId": "a3803636-b917-4048-8873-b62ae1f022d6"
                  }
                },
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "6236deb0-9668-46d8-bb96-97cc86eeb0fa",
                    "type": "text/javascript",
                    "exec": [
                      ""
                    ],
                    "_lastExecutionId": "148f797c-8661-4a45-97c4-527fe81fce77"
                  }
                }
              ]
            },
            {
              "id": "eea8198b-64d4-43e4-b554-aefaae2516cd",
              "name": "GetEmailMessage",
              "request": {
                "url": {
                  "protocol": "https",
                  "path": [
                    "gmail",
                    "v1",
                    "users",
                    "{{user_email_id}}",
                    "messages",
                    ""
                  ],
                  "host": [
                    "gmail",
                    "googleapis",
                    "com"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET",
                "auth": {
                  "type": "oauth2",
                  "oauth2": [
                    {
                      "type": "boolean",
                      "value": false,
                      "key": "useBrowser"
                    },
                    {
                      "type": "string",
                      "value": "{{Scope}}",
                      "key": "scope"
                    },
                    {
                      "type": "string",
                      "value": "{{Client_Secret}}",
                      "key": "clientSecret"
                    },
                    {
                      "type": "string",
                      "value": "{{Client_ID}}",
                      "key": "clientId"
                    },
                    {
                      "type": "string",
                      "value": "{{Access_Token_URL}}",
                      "key": "accessTokenUrl"
                    },
                    {
                      "type": "string",
                      "value": "{{Auth_URL}}",
                      "key": "authUrl"
                    },
                    {
                      "type": "string",
                      "value": "{{Callback_URL}}",
                      "key": "redirect_uri"
                    },
                    {
                      "type": "string",
                      "value": "authorization_code",
                      "key": "grant_type"
                    },
                    {
                      "type": "string",
                      "value": "email_token",
                      "key": "tokenName"
                    },
                    {
                      "type": "string",
                      "value": "header",
                      "key": "addTokenTo"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "705020a4-73b3-44df-86ff-a5984e094d10",
                    "type": "text/javascript",
                    "exec": [
                      "var jsonData = pm.response.json();\r",
                      "pm.environment.set(\"messageId\", jsonData.messages[0].id);\r",
                      "\r",
                      ""
                    ],
                    "_lastExecutionId": "eeef6f2d-f5fd-4a00-be9c-25555c6fa5bc"
                  }
                },
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "cdf7837a-853f-442c-8e05-996129213a95",
                    "type": "text/javascript",
                    "exec": [
                      "var newRefreshToken = pm.environment.get(\"access_token\");\r",
                      "\r",
                      "pm.environment.set(\"refresh_token\", newRefreshToken);"
                    ],
                    "_lastExecutionId": "94790536-1730-42ee-886b-f2872e8a5fee"
                  }
                }
              ]
            },
            {
              "id": "f053ddc8-a8a6-4796-a23f-c89737b34582",
              "name": "GetMessageByID",
              "request": {
                "url": {
                  "protocol": "https",
                  "path": [
                    "gmail",
                    "v1",
                    "users",
                    "{{user_email_id}}",
                    "messages",
                    "{{messageId}}"
                  ],
                  "host": [
                    "gmail",
                    "googleapis",
                    "com"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "multipart/mixed"
                  }
                ],
                "method": "GET",
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "{{access_token}}",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "d94857cd-ae23-40c6-ae38-5f7aaca3e833",
                    "type": "text/javascript",
                    "exec": [
                      "\r",
                      "const response = pm.response.json();\r",
                      "\r",
                      "pm.environment.set(\"message_Body\", response.payload.body.data);\r",
                      "\r",
                      "var atob = require('atob');\r",
                      "\r",
                      "\r",
                      "var base64Data = pm.environment.get(\"message_Body\");\r",
                      "var decodedData = atob(base64Data);\r",
                      "postman.setEnvironmentVariable(\"rest_password\",decodedData);\r",
                      "var tokenRegex = /Reset password link: (https:\\/\\/practice\\.expandtesting\\.com\\/notes\\/app\\/reset-password\\/([\\w\\d]+))[^ ]+/;\r",
                      "var tokenMatch = decodedData.match(tokenRegex);\r",
                      "if (tokenMatch && tokenMatch[2]) {\r",
                      "    var resetPasswordToken = tokenMatch[2];\r",
                      "    \r",
                      "    // Set the reset password link as a Postman environment variable for later use\r",
                      "    pm.environment.set(\"resetPasswordToken\", resetPasswordToken);\r",
                      "    \r",
                      "    // Log the reset password link\r",
                      "    console.log(\"Reset Password Token: \" + resetPasswordToken);\r",
                      "} else {\r",
                      "    console.log(\"Reset password token not found in the response.\");\r",
                      "}\r",
                      "console.log(decodedData);\r",
                      "\r",
                      "\r",
                      "\r",
                      "\r",
                      "\r",
                      "\r",
                      "\r",
                      "\r",
                      "\r",
                      "\r",
                      "\r",
                      ""
                    ],
                    "_lastExecutionId": "4816be40-7f3a-489e-b23c-14c698a58ddc"
                  }
                },
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "8349aa22-c992-434e-9e35-e5fc8ef4a245",
                    "type": "text/javascript",
                    "exec": [
                      ""
                    ],
                    "_lastExecutionId": "e5ddbcb0-9830-4e57-9232-851987938e7d"
                  }
                }
              ]
            },
            {
              "id": "8d884a10-0abd-48de-9b8a-47bfc7ff13cd",
              "name": "verify-reset-password-token",
              "request": {
                "url": {
                  "path": [
                    "users",
                    "verify-reset-password-token"
                  ],
                  "host": [
                    "{{exp_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "accept",
                    "value": "application/json"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/x-www-form-urlencoded"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "urlencoded",
                  "urlencoded": [
                    {
                      "key": "token",
                      "value": "{{resetPasswordToken}}"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "799e647c-efdd-4528-bf8c-ec8d1e1a4b55",
                    "type": "text/javascript",
                    "exec": [
                      "let jsonData = pm.response.json();\r",
                      "\r",
                      "message = [\r",
                      "    \"The provided password reset token is valid\",\r",
                      "    \"Bad Request\",\r",
                      "    \"Internal Error Server\",\r",
                      "    \"The provided password reset token is invalid or has expired\"\r",
                      "]\r",
                      "\r",
                      "status = [200,400,401,500]\r",
                      "\r",
                      "if (jsonData.success === false) {\r",
                      "    pm.test(`**** E R R O R ***** ${jsonData.message}`, function(){\r",
                      "        // pm.expect(jsonData.message).to.eql(\"No authentication token specified in x-auth-token header\");\r",
                      "        pm.expect(jsonData.message).to.be.oneOf(message);\r",
                      "    });\r",
                      "\r",
                      "    pm.test(`Check the multiple error status code ${jsonData.status}`, function(){\r",
                      "        pm.expect(pm.response.code).to.be.oneOf(status);\r",
                      "    });\r",
                      "\r",
                      "\r",
                      "}\r",
                      "else {\r",
                      "    pm.test(`*** S U C C E S S *** ${jsonData.message}`, function(){\r",
                      "        // pm.expect(jsonData.message).to.equal(\"Profile successful\");\r",
                      "        pm.expect(jsonData.message).to.be.oneOf(message);\r",
                      "    });\r",
                      "\r",
                      "    pm.test(\"Check the response time\", function(){\r",
                      "    pm.expect(pm.response.responseTime).to.be.below(6000);\r",
                      "    });\r",
                      "\r",
                      "    pm.test(`Check the Status code ${jsonData.status}`, function(){\r",
                      "        pm.expect(pm.response.code).to.be.oneOf(status);\r",
                      "    });\r",
                      "\r",
                      "    pm.test(\"Body matches multiple string\",function(){\r",
                      "    pm.expect(pm.response.text()).to.include(\"message\");\r",
                      "});\r",
                      "\r",
                      "}\r",
                      "\r",
                      ""
                    ],
                    "_lastExecutionId": "c1d6d515-485d-45cb-ab2b-15662e3830f7"
                  }
                },
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "46fb041c-0790-4ccb-a117-d6dcbb44aa15",
                    "type": "text/javascript",
                    "exec": [
                      ""
                    ],
                    "_lastExecutionId": "48a955fd-f392-4b00-9034-2a273d9fea6d"
                  }
                }
              ]
            },
            {
              "id": "740f7a4b-9db6-4b38-a333-0ad712a2b2a2",
              "name": "reset-password",
              "request": {
                "url": {
                  "protocol": "https",
                  "path": [
                    "notes",
                    "api",
                    "users",
                    "reset-password"
                  ],
                  "host": [
                    "practice",
                    "expandtesting",
                    "com"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "accept",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n    \"token\":\"{{resetPasswordToken}}\",\r\n    \"newPassword\":\"{{$randomPassword}}\"\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "7cdc8324-5612-42e4-8f85-49037412238b",
                    "type": "text/javascript",
                    "exec": [
                      "let jsonData = pm.response.json();\r",
                      "\r",
                      "let newPassword = JSON.parse(pm.request.body.raw).newPassword;\r",
                      "pm.environment.set('password', newPassword);\r",
                      "\r",
                      "\r",
                      "message = [\r",
                      "    \"The password has been successfully reset\",\r",
                      "    \"Token must be between 64 characters\",\r",
                      "    \"Bad Request\",\r",
                      "    \"The password was successfully updated\",\r",
                      "    \"Internal Error Server\",\r",
                      "    \"New password must be between 6 and 30 characters\",\r",
                      "    \"The password reset token is invalid or has expired\"\r",
                      "]\r",
                      "\r",
                      "status = [200,400,401,500]\r",
                      "\r",
                      "if (jsonData.success === false) {\r",
                      "    pm.test(`**** E R R O R ***** ${jsonData.message}`, function(){\r",
                      "        // pm.expect(jsonData.message).to.eql(\"No authentication token specified in x-auth-token header\");\r",
                      "        pm.expect(jsonData.message).to.be.oneOf(message);\r",
                      "    });\r",
                      "\r",
                      "    pm.test(`Check the multiple error status code ${jsonData.status}`, function(){\r",
                      "        pm.expect(pm.response.code).to.be.oneOf(status);\r",
                      "    });\r",
                      "\r",
                      "\r",
                      "}\r",
                      "else {\r",
                      "    pm.test(`*** S U C C E S S *** ${jsonData.message}`, function(){\r",
                      "        // pm.expect(jsonData.message).to.equal(\"Profile successful\");\r",
                      "        pm.expect(jsonData.message).to.be.oneOf(message);\r",
                      "    });\r",
                      "\r",
                      "    pm.test(\"Check the response time\", function(){\r",
                      "    pm.expect(pm.response.responseTime).to.be.below(6000);\r",
                      "    });\r",
                      "\r",
                      "    pm.test(`Check the Status code ${jsonData.status}`, function(){\r",
                      "        pm.expect(pm.response.code).to.be.oneOf(status);\r",
                      "    });\r",
                      "\r",
                      "    pm.test(\"Body matches multiple string\",function(){\r",
                      "    pm.expect(pm.response.text()).to.include(\"message\");\r",
                      "});\r",
                      "\r",
                      "}\r",
                      "\r",
                      "\r",
                      ""
                    ],
                    "_lastExecutionId": "5d234639-2098-4725-8401-094ce8fa851b"
                  }
                },
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "1268a1ec-48a3-4dfd-8fc8-3c14d0fa7f28",
                    "type": "text/javascript",
                    "exec": [
                      ""
                    ],
                    "_lastExecutionId": "3e5db1d1-0c8c-4a29-8797-f14a01a4bedc"
                  }
                }
              ]
            },
            {
              "id": "93821c3b-e028-4eda-a749-05d87d7e6a94",
              "name": "change-password",
              "request": {
                "url": {
                  "path": [
                    "users",
                    "change-password"
                  ],
                  "host": [
                    "{{exp_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "accept",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n    \"currentPassword\":\"{{password}}\",\r\n    \"newPassword\":\"{{$randomPassword}}\"\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "auth": {
                  "type": "apikey",
                  "apikey": [
                    {
                      "type": "string",
                      "value": "{{exp_token}}",
                      "key": "value"
                    },
                    {
                      "type": "string",
                      "value": "x-auth-token",
                      "key": "key"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "3eca22f1-7d4a-4832-8b68-54badb876aa6",
                    "type": "text/javascript",
                    "exec": [
                      "pm.environment.get(\"password\");\r",
                      "\r",
                      "let newPassword = JSON.parse(pm.request.body.raw).newPassword;\r",
                      "pm.environment.set('password', newPassword);\r",
                      "\r",
                      "let jsonData = pm.response.json();\r",
                      "message = [\r",
                      "    \"The password has been successfully reset\",\r",
                      "    \"Token must be between 64 characters\",\r",
                      "    \"Bad Request\",\r",
                      "    \"The password was successfully updated\",\r",
                      "    \"Internal Error Server\",\r",
                      "    \"New password must be between 6 and 30 characters\",\r",
                      "    \"The password reset token is invalid or has expired\"\r",
                      "]\r",
                      "\r",
                      "status = [200,400,401,500]\r",
                      "\r",
                      "if (jsonData.success === false) {\r",
                      "    pm.test(`**** E R R O R ***** ${jsonData.message}`, function(){\r",
                      "        // pm.expect(jsonData.message).to.eql(\"No authentication token specified in x-auth-token header\");\r",
                      "        pm.expect(jsonData.message).to.be.oneOf(message);\r",
                      "    });\r",
                      "\r",
                      "    pm.test(`Check the multiple error status code ${jsonData.status}`, function(){\r",
                      "        pm.expect(pm.response.code).to.be.oneOf(status);\r",
                      "    });\r",
                      "\r",
                      "\r",
                      "}\r",
                      "else {\r",
                      "    pm.test(`*** S U C C E S S *** ${jsonData.message}`, function(){\r",
                      "        // pm.expect(jsonData.message).to.equal(\"Profile successful\");\r",
                      "        pm.expect(jsonData.message).to.be.oneOf(message);\r",
                      "    });\r",
                      "\r",
                      "    pm.test(\"Check the response time\", function(){\r",
                      "    pm.expect(pm.response.responseTime).to.be.below(6000);\r",
                      "    });\r",
                      "\r",
                      "    pm.test(`Check the Status code ${jsonData.status}`, function(){\r",
                      "        pm.expect(pm.response.code).to.be.oneOf(status);\r",
                      "    });\r",
                      "\r",
                      "    pm.test(\"Body matches multiple string\",function(){\r",
                      "    pm.expect(pm.response.text()).to.include(\"message\");\r",
                      "});\r",
                      "\r",
                      "}\r",
                      ""
                    ],
                    "_lastExecutionId": "64be3638-86ca-4200-b966-7a137b03eb2e"
                  }
                },
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "aa473681-09fc-4673-a2fe-7012cf4e42e9",
                    "type": "text/javascript",
                    "exec": [
                      "console.log(pm.environment.get(\"password\"));\r",
                      "\r",
                      "\r",
                      "\r",
                      ""
                    ],
                    "_lastExecutionId": "fb6fc291-ccb6-46ad-9bb8-0e4bf2cf736d"
                  }
                }
              ]
            },
            {
              "id": "f4c8e78d-5700-43a2-8e20-cb1a0de26ce9",
              "name": "UserLogout",
              "request": {
                "url": {
                  "path": [
                    "users",
                    "logout"
                  ],
                  "host": [
                    "{{exp_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "accept",
                    "value": "application/json"
                  }
                ],
                "method": "DELETE",
                "auth": {
                  "type": "apikey",
                  "apikey": [
                    {
                      "type": "string",
                      "value": "{{exp_token}}",
                      "key": "value"
                    },
                    {
                      "type": "string",
                      "value": "x-auth-token",
                      "key": "key"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "43a38bb6-0063-463b-9a7b-ea0674d209fe",
                    "type": "text/javascript",
                    "exec": [
                      "let jsonData = pm.response.json();\r",
                      "message = [\r",
                      "    \"User has been successfully logged out\",\r",
                      "    \"Token must be between 64 characters\",\r",
                      "    \"Bad Request\",\r",
                      "    \"Access token is not valid or has expired, you will need to login\",\r",
                      "    \"No authentication token specified in x-auth-token header\",\r",
                      "    \"Internal Error Server\",\r",
                      "    \"Successful Request\",\r",
                      "    \"Unauthorized Request\"\r",
                      "]\r",
                      "\r",
                      "status = [200,400,401,500]\r",
                      "\r",
                      "if (jsonData.success === false) {\r",
                      "    pm.test(`**** E R R O R ***** ${jsonData.message}`, function(){\r",
                      "        // pm.expect(jsonData.message).to.eql(\"No authentication token specified in x-auth-token header\");\r",
                      "        pm.expect(jsonData.message).to.be.oneOf(message);\r",
                      "    });\r",
                      "\r",
                      "    pm.test(`Check the multiple error status code ${jsonData.status}`, function(){\r",
                      "        pm.expect(pm.response.code).to.be.oneOf(status);\r",
                      "    });\r",
                      "\r",
                      "\r",
                      "}\r",
                      "else {\r",
                      "    pm.test(`*** S U C C E S S *** ${jsonData.message}`, function(){\r",
                      "        // pm.expect(jsonData.message).to.equal(\"Profile successful\");\r",
                      "        pm.expect(jsonData.message).to.be.oneOf(message);\r",
                      "    });\r",
                      "\r",
                      "    pm.test(\"Check the response time\", function(){\r",
                      "    pm.expect(pm.response.responseTime).to.be.below(6000);\r",
                      "    });\r",
                      "\r",
                      "    pm.test(`Check the Status code ${jsonData.status}`, function(){\r",
                      "        pm.expect(pm.response.code).to.be.oneOf(status);\r",
                      "    });\r",
                      "\r",
                      "    pm.test(\"Body matches multiple string\",function(){\r",
                      "    pm.expect(pm.response.text()).to.include(\"message\");\r",
                      "});\r",
                      "\r",
                      "}\r",
                      "\r",
                      "postman.setNextRequest(null);"
                    ],
                    "_lastExecutionId": "c7d982d4-a8dc-460f-a106-6e0c01643e82"
                  }
                },
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "e8ae662d-a080-4bf5-a817-754113435b5e",
                    "type": "text/javascript",
                    "exec": [
                      ""
                    ],
                    "_lastExecutionId": "0b0d404e-4117-40fc-9982-a95619506052"
                  }
                }
              ]
            }
          ],
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "3380df96-f386-44be-9dc8-eb145a929d13",
                "type": "text/javascript",
                "exec": [
                  ""
                ],
                "_lastExecutionId": "c2613397-fddf-4d46-99b6-9ffc9166e0a8"
              }
            },
            {
              "listen": "test",
              "script": {
                "id": "18c4e0bb-9477-4e5f-b627-d550e666c7d3",
                "type": "text/javascript",
                "exec": [
                  ""
                ],
                "_lastExecutionId": "78225eb1-cbe5-408b-978b-a1bf2d2b693c"
              }
            }
          ],
          "variable": [
            {
              "type": "string",
              "value": "https://practice.expandtesting.com/notes/api",
              "key": "exp_url"
            }
          ],
          "info": {
            "_postman_id": "723ea9c3-0635-4605-b90c-d6d9e9835d8c",
            "name": "expandtesting",
            "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
          }
        },
        "cursor": {
          "ref": "4b7c04fa-e9dc-4fc5-a07a-9a99fb0ebb50",
          "length": 12,
          "cycles": 1,
          "position": 6,
          "iteration": 0,
          "httpRequestId": "b572384c-f30b-4b31-bdd3-80d8c58296ed",
          "scriptId": "705020a4-73b3-44df-86ff-a5984e094d10"
        }
      },
      {
        "error": {
          "type": "Error",
          "name": "TypeError",
          "message": "Cannot read properties of undefined (reading 'body')",
          "checksum": "84cdf816575ab0f9f940280bf048b20c",
          "id": "3e26f58c-fbdc-430e-b817-53e241a55863",
          "timestamp": 1698733441595,
          "stacktrace": []
        },
        "at": "test-script",
        "source": {
          "id": "f053ddc8-a8a6-4796-a23f-c89737b34582",
          "name": "GetMessageByID",
          "request": {
            "url": {
              "protocol": "https",
              "path": [
                "gmail",
                "v1",
                "users",
                "{{user_email_id}}",
                "messages",
                "{{messageId}}"
              ],
              "host": [
                "gmail",
                "googleapis",
                "com"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Content-Type",
                "value": "multipart/mixed"
              }
            ],
            "method": "GET",
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "type": "string",
                  "value": "{{access_token}}",
                  "key": "token"
                }
              ]
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "d94857cd-ae23-40c6-ae38-5f7aaca3e833",
                "type": "text/javascript",
                "exec": [
                  "\r",
                  "const response = pm.response.json();\r",
                  "\r",
                  "pm.environment.set(\"message_Body\", response.payload.body.data);\r",
                  "\r",
                  "var atob = require('atob');\r",
                  "\r",
                  "\r",
                  "var base64Data = pm.environment.get(\"message_Body\");\r",
                  "var decodedData = atob(base64Data);\r",
                  "postman.setEnvironmentVariable(\"rest_password\",decodedData);\r",
                  "var tokenRegex = /Reset password link: (https:\\/\\/practice\\.expandtesting\\.com\\/notes\\/app\\/reset-password\\/([\\w\\d]+))[^ ]+/;\r",
                  "var tokenMatch = decodedData.match(tokenRegex);\r",
                  "if (tokenMatch && tokenMatch[2]) {\r",
                  "    var resetPasswordToken = tokenMatch[2];\r",
                  "    \r",
                  "    // Set the reset password link as a Postman environment variable for later use\r",
                  "    pm.environment.set(\"resetPasswordToken\", resetPasswordToken);\r",
                  "    \r",
                  "    // Log the reset password link\r",
                  "    console.log(\"Reset Password Token: \" + resetPasswordToken);\r",
                  "} else {\r",
                  "    console.log(\"Reset password token not found in the response.\");\r",
                  "}\r",
                  "console.log(decodedData);\r",
                  "\r",
                  "\r",
                  "\r",
                  "\r",
                  "\r",
                  "\r",
                  "\r",
                  "\r",
                  "\r",
                  "\r",
                  "\r",
                  ""
                ],
                "_lastExecutionId": "4816be40-7f3a-489e-b23c-14c698a58ddc"
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "id": "8349aa22-c992-434e-9e35-e5fc8ef4a245",
                "type": "text/javascript",
                "exec": [
                  ""
                ],
                "_lastExecutionId": "e5ddbcb0-9830-4e57-9232-851987938e7d"
              }
            }
          ]
        },
        "parent": {
          "_": {
            "postman_id": "723ea9c3-0635-4605-b90c-d6d9e9835d8c",
            "exporter_id": "13852941",
            "collection_link": "https://galactic-astronaut-894425.postman.co/workspace/b6dafb4f-3507-4e58-a32d-dd31bf6ab148/collection/13852941-723ea9c3-0635-4605-b90c-d6d9e9835d8c?action=share&source=collection_link&creator=13852941"
          },
          "item": [
            {
              "id": "90407c19-d06c-4337-abb9-4dfc2fa17fc8",
              "name": "health_check",
              "request": {
                "url": {
                  "path": [
                    "health-check"
                  ],
                  "host": [
                    "{{exp_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "b075fb8f-9483-4909-a4a4-cf6344c6642b",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Check the Status code 200\", function(){\r",
                      "    pm.response.to.have.status(200);\r",
                      "});\r",
                      "\r",
                      "var jsonData = pm.response.json();\r",
                      "\r",
                      "pm.test(\"Check the success code in body\", function(){\r",
                      "    pm.expect(jsonData.success).to.eql(true);\r",
                      "});\r",
                      "\r",
                      "pm.test(\"Check the Status code in body\", function(){\r",
                      "    pm.expect(jsonData.status).to.eql(200);\r",
                      "});\r",
                      "\r",
                      "pm.test(\"Check the message in body\", function(){\r",
                      "    pm.expect(jsonData.message).to.eql(\"Notes API is Running\");\r",
                      "});\r",
                      "\r",
                      "\r",
                      ""
                    ],
                    "_lastExecutionId": "dcf22f24-f95a-4d61-981a-68f2474c0b1d"
                  }
                },
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "15079d7d-2fc3-468b-b923-1fd697b2156e",
                    "type": "text/javascript",
                    "exec": [
                      ""
                    ],
                    "_lastExecutionId": "a57965c9-dfeb-425b-a87b-14b41a981af7"
                  }
                }
              ]
            },
            {
              "id": "d3b70abb-4c44-4d96-b946-e8ef2e19907f",
              "name": "RegisterUser",
              "request": {
                "url": {
                  "path": [
                    "users",
                    "register"
                  ],
                  "host": [
                    "{{exp_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n    \"name\":\"{{$randomFullName}}\",\r\n    \"email\":\"{{randomEmail}}\",\r\n    \"password\":\"{{$randomPassword}}\"\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "4f0c3c3d-4171-4bea-b8a8-3fd567809f0d",
                    "type": "text/javascript",
                    "exec": [
                      "var jsonData = pm.response.json();\r",
                      "\r",
                      "pm.test(\"Check the success msg is true in body?\", function(){\r",
                      "    pm.expect(jsonData.success).to.eql(true);\r",
                      "});\r",
                      "\r",
                      "pm.test(\"Check the body message\", function(){\r",
                      "    pm.expect(jsonData.message).to.eql(\"User account created successfully\");\r",
                      "});\r",
                      "\r",
                      "pm.test(\"Verify the values are not null\", function(){\r",
                      "    pm.expect(jsonData.data.id, \"Id is not null\").to.not.be.null;\r",
                      "    pm.expect(jsonData.data.name, \"name is not null\").to.not.be.null;\r",
                      "    pm.expect(jsonData.data.email, \"email is not null\").to.not.be.null;\r",
                      "});\r",
                      "\r",
                      "pm.test(\"response property matching an environment variable\", function(){\r",
                      "    pm.expect(jsonData.name).to.eql(pm.environment.get(\"name\"));\r",
                      "});\r",
                      "\r",
                      "pm.test(\"Check the response time\", function(){\r",
                      "    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
                      "});\r",
                      "\r",
                      "pm.environment.set(\"id\", jsonData.data.id);\r",
                      "pm.environment.set(\"name\", jsonData.data.name);\r",
                      "\r",
                      "let password = JSON.parse(pm.request.body.raw).password;\r",
                      "pm.environment.set('password', password);\r",
                      "\r",
                      "message = [\r",
                      "    \"Access token is not valid or has expired, you will need to login\",\r",
                      "    \"No authentication token specified in x-auth-token header\",\r",
                      "    \"User name must be between 4 and 30 characters\",\r",
                      "    \"Phone number should be between 8 and 20 digits\",\r",
                      "    \"Unauthorized Request\",\r",
                      "    \"Internal Error Server\",\r",
                      "    \"Profile updated successful\",\r",
                      "    \"User account created successfully\",\r",
                      "    \"Not Found\",\r",
                      "    \"Bad Request\",\r",
                      "    \"An account already exists with the same email address\"\r",
                      "];\r",
                      "\r",
                      "status = [400,401,404,409,500,200,201];\r",
                      "\r",
                      "if (jsonData.success === false) {\r",
                      "    pm.test(`**** E R R O R ***** ${jsonData.message}`, function(){\r",
                      "        pm.expect(jsonData.message).to.be.oneOf(message);\r",
                      "    });\r",
                      "\r",
                      "    pm.test(`Check the multiple error status code ${jsonData.status}`, function(){\r",
                      "        pm.expect(pm.response.code).to.be.oneOf(status);\r",
                      "    });\r",
                      "}\r",
                      "else {\r",
                      "    pm.test(`*** S U C C E S S *** ${jsonData.message}`, function(){\r",
                      "        pm.expect(jsonData.message).to.be.oneOf(message);\r",
                      "    });\r",
                      "\r",
                      "    pm.test(`Check the Status code ${jsonData.status}`, function(){\r",
                      "        pm.expect(pm.response.code).to.be.oneOf(status);\r",
                      "    });\r",
                      "}"
                    ],
                    "_lastExecutionId": "2fbfcb58-035a-4d0d-afa2-7fc9d5239e13"
                  }
                },
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "3483ef69-d6b6-4835-8746-973a3f7a159e",
                    "type": "text/javascript",
                    "exec": [
                      "\r",
                      "// // Define the incrementEmail function\r",
                      "// function incrementEmail(email) {\r",
                      "//     const match = email.match(/\\+a(\\d+)/);\r",
                      "\r",
                      "//     if (match) {\r",
                      "//         const currentNumber = parseInt(match[1]);\r",
                      "//         const nextNumber = currentNumber + 1;\r",
                      "//         const incrementedEmail = email.replace(/\\+a\\d+/, `+a${nextNumber}`);\r",
                      "//         return incrementedEmail;\r",
                      "//     }\r",
                      "\r",
                      "//     return email;\r",
                      "// }\r",
                      "\r",
                      "\r",
                      "// const originalEmail = pm.environment.get(\"email\");\r",
                      "\r",
                      "\r",
                      "// if (originalEmail) {\r",
                      "//     // Use the incrementEmail function to get the incremented email\r",
                      "//     const incrementedEmail = incrementEmail(originalEmail);\r",
                      "\r",
                      "//     // Set the incremented email back to the environment\r",
                      "//     pm.environment.set(\"email\", incrementedEmail);\r",
                      "\r",
                      "//     console.log(\"OriginalEmail:\", originalEmail);\r",
                      "//     console.log(\"IncrementedEmail:\", incrementedEmail);\r",
                      "// } else {\r",
                      "//     console.error(\"Email environment variable not found.\");\r",
                      "// }\r",
                      "\r",
                      "// console.log(pm.environment.get(\"email\"));\r",
                      "\r",
                      "\r",
                      "// -------------------------------------------------------------------\r",
                      "// Define the base part of the email address\r",
                      "const baseEmail = pm.environment.get(\"baseEmail\");\r",
                      "\r",
                      "// Generate a random number between min and max (inclusive)\r",
                      "function getRandomNumber(min, max) {\r",
                      "    return Math.floor(Math.random() * (max - min + 1)) + min;\r",
                      "}\r",
                      "\r",
                      "// Generate a random sequence like +a151, +a152, +a153, and so on\r",
                      "const randomSequence = `+a${getRandomNumber(1, 999)}`;\r",
                      "\r",
                      "// Combine the base and random sequence to create the random email address\r",
                      "const randomEmail = `${baseEmail}${randomSequence}@gmail.com`;\r",
                      "\r",
                      "// Set the random email address as an environment variable for your request\r",
                      "pm.environment.set('randomEmail', randomEmail);\r",
                      "\r",
                      "\r",
                      ""
                    ],
                    "_lastExecutionId": "f0df73d6-9875-49de-aaed-2ffb46745ff0"
                  }
                }
              ]
            },
            {
              "id": "1da8b1e7-3198-4c60-9c34-4a1e8b7e8b15",
              "name": "UserLogin",
              "request": {
                "url": {
                  "path": [
                    "users",
                    "login"
                  ],
                  "host": [
                    "{{exp_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n    \"email\":\"{{randomEmail}}\",\r\n    \"password\":\"{{password}}\"\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "cc8daf67-c0f2-4843-9223-e47d8fe754ec",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Check the status code is 200\", function(){\r",
                      "    pm.response.to.have.status(200);\r",
                      "});\r",
                      "\r",
                      "var jsonData = pm.response.json();\r",
                      "\r",
                      "pm.test(\"Check the success message\", function(){\r",
                      "    pm.expect(jsonData.success).to.eql(true);\r",
                      "});\r",
                      "\r",
                      "pm.test(\"Check the body message\", function(){\r",
                      "    pm.expect(jsonData.message).to.eql(\"Login successful\");\r",
                      "});\r",
                      "\r",
                      "pm.environment.set(\"exp_token\", jsonData.data.token);\r",
                      "\r",
                      "pm.test(\"Verify the values are not null\", function(){\r",
                      "    pm.expect(jsonData.data.id, \"Id is not a null\").to.not.be.null;\r",
                      "    pm.expect(jsonData.data.name, \"name is not a null\").to.not.be.null;\r",
                      "    pm.expect(jsonData.data.email, \"email is not a null\").to.not.be.null;\r",
                      "    pm.expect(jsonData.data.token, \"token is not a null\").to.not.be.null;\r",
                      "});\r",
                      "\r",
                      "pm.test(\"Check the response time\", function(){\r",
                      "    pm.expect(pm.response.responseTime).to.below(2000);\r",
                      "});\r",
                      "\r",
                      ""
                    ],
                    "_lastExecutionId": "4a906166-3676-408b-bc6f-6c09add962a5"
                  }
                },
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "98d0941e-d03e-4ab7-a7b0-84826ad7708a",
                    "type": "text/javascript",
                    "exec": [
                      ""
                    ],
                    "_lastExecutionId": "2f4a3493-6a43-4652-8c74-458390f9ecf9"
                  }
                }
              ]
            },
            {
              "id": "3f4af57c-fb9c-4a3c-8c2b-0f9b603b0679",
              "name": "GetProfile",
              "request": {
                "url": {
                  "path": [
                    "users",
                    "profile"
                  ],
                  "host": [
                    "{{exp_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET",
                "auth": {
                  "type": "apikey",
                  "apikey": [
                    {
                      "type": "string",
                      "value": "{{exp_token}}",
                      "key": "value"
                    },
                    {
                      "type": "string",
                      "value": "header",
                      "key": "in"
                    },
                    {
                      "type": "string",
                      "value": "x-auth-token",
                      "key": "key"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "56a6399c-71a1-414d-b876-9262a848415f",
                    "type": "text/javascript",
                    "exec": [
                      "\r",
                      "let jsonData = pm.response.json();\r",
                      "message = [\r",
                      "    \"Access token is not valid or has expired, you will need to login\",\r",
                      "    \"No authentication token specified in x-auth-token header\",\r",
                      "    \"Bad Request\",\r",
                      "    \"Unauthorized Request\",\r",
                      "    \"Internal Error Server\",\r",
                      "    \"Profile successful\",\r",
                      "    \"Not Found\"\r",
                      "]\r",
                      "\r",
                      "status = [400,401,404,500,200,201]\r",
                      "\r",
                      "if (jsonData.success === false) {\r",
                      "    pm.test(`**** E R R O R ***** ${jsonData.message}`, function(){\r",
                      "        // pm.expect(jsonData.message).to.eql(\"No authentication token specified in x-auth-token header\");\r",
                      "        pm.expect(jsonData.message).to.be.oneOf(message);\r",
                      "    });\r",
                      "\r",
                      "    pm.test(`Check the multiple error status code ${jsonData.status}`, function(){\r",
                      "        pm.expect(pm.response.code).to.be.oneOf(status);\r",
                      "    });\r",
                      "\r",
                      "\r",
                      "}\r",
                      "else {\r",
                      "    pm.test(`*** S U C C E S S *** ${jsonData.message}`, function(){\r",
                      "        // pm.expect(jsonData.message).to.equal(\"Profile successful\");\r",
                      "        pm.expect(jsonData.message).to.be.oneOf(message);\r",
                      "    });\r",
                      "\r",
                      "    pm.test(\"Check the response time\", function(){\r",
                      "    pm.expect(pm.response.responseTime).to.be.below(6000);\r",
                      "    });\r",
                      "\r",
                      "    pm.test(`Check the Status code ${jsonData.status}`, function(){\r",
                      "        pm.expect(pm.response.code).to.be.oneOf(status);\r",
                      "    });\r",
                      "\r",
                      "    pm.test(\"Body matches multiple string\",function(){\r",
                      "    pm.expect(pm.response.text()).to.include(\"id\");\r",
                      "    pm.expect(pm.response.text()).to.include(\"name\");\r",
                      "    pm.expect(pm.response.text()).to.include(\"email\");\r",
                      "});\r",
                      "\r",
                      "}\r",
                      "\r",
                      ""
                    ],
                    "_lastExecutionId": "55d3989d-79a3-476b-87c3-020290feeec2"
                  }
                },
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "5b6727ff-6213-4350-874c-dbaeeb0d0d03",
                    "type": "text/javascript",
                    "exec": [
                      ""
                    ],
                    "_lastExecutionId": "5e07b22a-eb37-441e-b764-c112f7fde3f7"
                  }
                }
              ],
              "protocolProfileBehavior": {
                "disabledSystemHeaders": {}
              }
            },
            {
              "id": "ee9d7916-0288-4df6-a4d2-05ed9c78c4f1",
              "name": "UpdateProfile",
              "request": {
                "url": {
                  "path": [
                    "users",
                    "profile"
                  ],
                  "host": [
                    "{{exp_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "PATCH",
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n    \"name\":\"{{name}}\",\r\n    \"phone\":\"{{random_number}}\",\r\n    \"company\":\"{{$randomCompanyName}}\"\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "auth": {
                  "type": "apikey",
                  "apikey": [
                    {
                      "type": "string",
                      "value": "{{exp_token}}",
                      "key": "value"
                    },
                    {
                      "type": "string",
                      "value": "header",
                      "key": "in"
                    },
                    {
                      "type": "string",
                      "value": "x-auth-token",
                      "key": "key"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "6ab7e932-eb9b-4edc-9edc-b8d42e4162ad",
                    "type": "text/javascript",
                    "exec": [
                      "let jsonData = pm.response.json();\r",
                      "message = [\r",
                      "    \"Access token is not valid or has expired, you will need to login\",\r",
                      "    \"No authentication token specified in x-auth-token header\",\r",
                      "    \"User name must be between 4 and 30 characters\",\r",
                      "    \"Phone number should be between 8 and 20 digits\",\r",
                      "    \"Unauthorized Request\",\r",
                      "    \"Internal Error Server\",\r",
                      "    \"Profile updated successful\",\r",
                      "    \"Not Found\",\r",
                      "    \"Bad Request\"\r",
                      "]\r",
                      "\r",
                      "status = [400,401,404,500,200,201]\r",
                      "// var jsonData1 = pm.response.json();\r",
                      "// pm.environment.set(\"phoneNumber\", jsonData1.data.phone);\r",
                      "\r",
                      "if (jsonData.success === false) {\r",
                      "    pm.test(`**** E R R O R ***** ${jsonData.message}`, function(){\r",
                      "        // pm.expect(jsonData.message).to.eql(\"No authentication token specified in x-auth-token header\");\r",
                      "        pm.expect(jsonData.message).to.be.oneOf(message);\r",
                      "    });\r",
                      "\r",
                      "    pm.test(`Check the multiple error status code ${jsonData.status}`, function(){\r",
                      "        pm.expect(pm.response.code).to.be.oneOf(status);\r",
                      "    });\r",
                      "\r",
                      "\r",
                      "}\r",
                      "else {\r",
                      "    pm.test(`*** S U C C E S S *** ${jsonData.message}`, function(){\r",
                      "        // pm.expect(jsonData.message).to.equal(\"Profile successful\");\r",
                      "        pm.expect(jsonData.message).to.be.oneOf(message);\r",
                      "    });\r",
                      "\r",
                      "    pm.test(\"Check the response time\", function(){\r",
                      "    pm.expect(pm.response.responseTime).to.be.below(6000);\r",
                      "    });\r",
                      "\r",
                      "    pm.test(`Check the Status code ${jsonData.status}`, function(){\r",
                      "        pm.expect(pm.response.code).to.be.oneOf(status);\r",
                      "    });\r",
                      "\r",
                      "    pm.test(\"Body matches multiple string\",function(){\r",
                      "    pm.expect(pm.response.text()).to.include(\"id\");\r",
                      "    pm.expect(pm.response.text()).to.include(\"name\");\r",
                      "    pm.expect(pm.response.text()).to.include(\"email\");\r",
                      "});\r",
                      "\r",
                      "}\r",
                      "\r",
                      ""
                    ],
                    "_lastExecutionId": "bf535ed4-ea27-433b-95ed-0405878d634c"
                  }
                },
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "1dd9ce14-2fea-48d5-b628-446e36acb961",
                    "type": "text/javascript",
                    "exec": [
                      "pm.environment.set(\"random_number\",_.random(1000000000,9999999999));\r",
                      "\r",
                      "\r",
                      ""
                    ],
                    "_lastExecutionId": "81adb337-1695-4fed-b265-391f869dd222"
                  }
                }
              ]
            },
            {
              "id": "03c5b9ed-2c86-4338-932a-d93a799c2d8d",
              "name": "ForgotPassword",
              "request": {
                "url": {
                  "path": [
                    "users",
                    "forgot-password"
                  ],
                  "host": [
                    "{{exp_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n    \"email\":\"{{randomEmail}}\"\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "auth": {
                  "type": "apikey",
                  "apikey": [
                    {
                      "type": "string",
                      "value": "{{exp_token}}",
                      "key": "value"
                    },
                    {
                      "type": "string",
                      "value": "header",
                      "key": "in"
                    },
                    {
                      "type": "string",
                      "value": "x-auth-token",
                      "key": "key"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "72c44319-e1e0-49ac-91f7-f3f0cd439f93",
                    "type": "text/javascript",
                    "exec": [
                      "let jsonData = pm.response.json();\r",
                      "let jsonEmail = JSON.parse(pm.request.body.raw).email;\r",
                      "\r",
                      "message = [\r",
                      "    \"Access token is not valid or has expired, you will need to login\",\r",
                      "    \"No authentication token specified in x-auth-token header\",\r",
                      "    \"Unauthorized Request\",\r",
                      "    \"Internal Error Server\",\r",
                      "    `Password reset link successfully sent to ${pm.environment.get(\"email\")}. Please verify by clicking on the given link`,\r",
                      "    \"Not Found\",\r",
                      "    \"Bad Request\",\r",
                      "    \"A valid email address is required\"\r",
                      "]\r",
                      "\r",
                      "status = [400,401,404,500,200,201]\r",
                      "// var jsonData1 = pm.response.json();\r",
                      "// pm.environment.set(\"phoneNumber\", jsonData1.data.phone);\r",
                      "\r",
                      "if (jsonData.success === false) {\r",
                      "    pm.test(`**** E R R O R ***** ${jsonData.message}`, function(){\r",
                      "        // pm.expect(jsonData.message).to.eql(\"No authentication token specified in x-auth-token header\");\r",
                      "        pm.expect(jsonData.message).to.be.oneOf(message);\r",
                      "    });\r",
                      "\r",
                      "    pm.test(`Check the multiple error status code ${jsonData.status}`, function(){\r",
                      "        pm.expect(pm.response.code).to.be.oneOf(status);\r",
                      "    });\r",
                      "\r",
                      "\r",
                      "}\r",
                      "else {\r",
                      "    pm.test(`*** S U C C E S S *** ${jsonData.message}`, function(){\r",
                      "        // pm.expect(jsonData.message).to.equal(\"Profile successful\");\r",
                      "        pm.expect(jsonData.message).to.be.oneOf(message);\r",
                      "    });\r",
                      "\r",
                      "    pm.test(\"Check the response time\", function(){\r",
                      "    pm.expect(pm.response.responseTime).to.be.below(6000);\r",
                      "    });\r",
                      "\r",
                      "    pm.test(`Check the Status code ${jsonData.status}`, function(){\r",
                      "        pm.expect(pm.response.code).to.be.oneOf(status);\r",
                      "    });\r",
                      "\r",
                      "    pm.test(\"Body matches multiple string\",function(){\r",
                      "    pm.expect(pm.response.text()).to.include(\"message\");\r",
                      "});\r",
                      "\r",
                      "}\r",
                      "\r",
                      ""
                    ],
                    "_lastExecutionId": "a3803636-b917-4048-8873-b62ae1f022d6"
                  }
                },
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "6236deb0-9668-46d8-bb96-97cc86eeb0fa",
                    "type": "text/javascript",
                    "exec": [
                      ""
                    ],
                    "_lastExecutionId": "148f797c-8661-4a45-97c4-527fe81fce77"
                  }
                }
              ]
            },
            {
              "id": "eea8198b-64d4-43e4-b554-aefaae2516cd",
              "name": "GetEmailMessage",
              "request": {
                "url": {
                  "protocol": "https",
                  "path": [
                    "gmail",
                    "v1",
                    "users",
                    "{{user_email_id}}",
                    "messages",
                    ""
                  ],
                  "host": [
                    "gmail",
                    "googleapis",
                    "com"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET",
                "auth": {
                  "type": "oauth2",
                  "oauth2": [
                    {
                      "type": "boolean",
                      "value": false,
                      "key": "useBrowser"
                    },
                    {
                      "type": "string",
                      "value": "{{Scope}}",
                      "key": "scope"
                    },
                    {
                      "type": "string",
                      "value": "{{Client_Secret}}",
                      "key": "clientSecret"
                    },
                    {
                      "type": "string",
                      "value": "{{Client_ID}}",
                      "key": "clientId"
                    },
                    {
                      "type": "string",
                      "value": "{{Access_Token_URL}}",
                      "key": "accessTokenUrl"
                    },
                    {
                      "type": "string",
                      "value": "{{Auth_URL}}",
                      "key": "authUrl"
                    },
                    {
                      "type": "string",
                      "value": "{{Callback_URL}}",
                      "key": "redirect_uri"
                    },
                    {
                      "type": "string",
                      "value": "authorization_code",
                      "key": "grant_type"
                    },
                    {
                      "type": "string",
                      "value": "email_token",
                      "key": "tokenName"
                    },
                    {
                      "type": "string",
                      "value": "header",
                      "key": "addTokenTo"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "705020a4-73b3-44df-86ff-a5984e094d10",
                    "type": "text/javascript",
                    "exec": [
                      "var jsonData = pm.response.json();\r",
                      "pm.environment.set(\"messageId\", jsonData.messages[0].id);\r",
                      "\r",
                      ""
                    ],
                    "_lastExecutionId": "eeef6f2d-f5fd-4a00-be9c-25555c6fa5bc"
                  }
                },
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "cdf7837a-853f-442c-8e05-996129213a95",
                    "type": "text/javascript",
                    "exec": [
                      "var newRefreshToken = pm.environment.get(\"access_token\");\r",
                      "\r",
                      "pm.environment.set(\"refresh_token\", newRefreshToken);"
                    ],
                    "_lastExecutionId": "94790536-1730-42ee-886b-f2872e8a5fee"
                  }
                }
              ]
            },
            {
              "id": "f053ddc8-a8a6-4796-a23f-c89737b34582",
              "name": "GetMessageByID",
              "request": {
                "url": {
                  "protocol": "https",
                  "path": [
                    "gmail",
                    "v1",
                    "users",
                    "{{user_email_id}}",
                    "messages",
                    "{{messageId}}"
                  ],
                  "host": [
                    "gmail",
                    "googleapis",
                    "com"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "multipart/mixed"
                  }
                ],
                "method": "GET",
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "{{access_token}}",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "d94857cd-ae23-40c6-ae38-5f7aaca3e833",
                    "type": "text/javascript",
                    "exec": [
                      "\r",
                      "const response = pm.response.json();\r",
                      "\r",
                      "pm.environment.set(\"message_Body\", response.payload.body.data);\r",
                      "\r",
                      "var atob = require('atob');\r",
                      "\r",
                      "\r",
                      "var base64Data = pm.environment.get(\"message_Body\");\r",
                      "var decodedData = atob(base64Data);\r",
                      "postman.setEnvironmentVariable(\"rest_password\",decodedData);\r",
                      "var tokenRegex = /Reset password link: (https:\\/\\/practice\\.expandtesting\\.com\\/notes\\/app\\/reset-password\\/([\\w\\d]+))[^ ]+/;\r",
                      "var tokenMatch = decodedData.match(tokenRegex);\r",
                      "if (tokenMatch && tokenMatch[2]) {\r",
                      "    var resetPasswordToken = tokenMatch[2];\r",
                      "    \r",
                      "    // Set the reset password link as a Postman environment variable for later use\r",
                      "    pm.environment.set(\"resetPasswordToken\", resetPasswordToken);\r",
                      "    \r",
                      "    // Log the reset password link\r",
                      "    console.log(\"Reset Password Token: \" + resetPasswordToken);\r",
                      "} else {\r",
                      "    console.log(\"Reset password token not found in the response.\");\r",
                      "}\r",
                      "console.log(decodedData);\r",
                      "\r",
                      "\r",
                      "\r",
                      "\r",
                      "\r",
                      "\r",
                      "\r",
                      "\r",
                      "\r",
                      "\r",
                      "\r",
                      ""
                    ],
                    "_lastExecutionId": "4816be40-7f3a-489e-b23c-14c698a58ddc"
                  }
                },
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "8349aa22-c992-434e-9e35-e5fc8ef4a245",
                    "type": "text/javascript",
                    "exec": [
                      ""
                    ],
                    "_lastExecutionId": "e5ddbcb0-9830-4e57-9232-851987938e7d"
                  }
                }
              ]
            },
            {
              "id": "8d884a10-0abd-48de-9b8a-47bfc7ff13cd",
              "name": "verify-reset-password-token",
              "request": {
                "url": {
                  "path": [
                    "users",
                    "verify-reset-password-token"
                  ],
                  "host": [
                    "{{exp_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "accept",
                    "value": "application/json"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/x-www-form-urlencoded"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "urlencoded",
                  "urlencoded": [
                    {
                      "key": "token",
                      "value": "{{resetPasswordToken}}"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "799e647c-efdd-4528-bf8c-ec8d1e1a4b55",
                    "type": "text/javascript",
                    "exec": [
                      "let jsonData = pm.response.json();\r",
                      "\r",
                      "message = [\r",
                      "    \"The provided password reset token is valid\",\r",
                      "    \"Bad Request\",\r",
                      "    \"Internal Error Server\",\r",
                      "    \"The provided password reset token is invalid or has expired\"\r",
                      "]\r",
                      "\r",
                      "status = [200,400,401,500]\r",
                      "\r",
                      "if (jsonData.success === false) {\r",
                      "    pm.test(`**** E R R O R ***** ${jsonData.message}`, function(){\r",
                      "        // pm.expect(jsonData.message).to.eql(\"No authentication token specified in x-auth-token header\");\r",
                      "        pm.expect(jsonData.message).to.be.oneOf(message);\r",
                      "    });\r",
                      "\r",
                      "    pm.test(`Check the multiple error status code ${jsonData.status}`, function(){\r",
                      "        pm.expect(pm.response.code).to.be.oneOf(status);\r",
                      "    });\r",
                      "\r",
                      "\r",
                      "}\r",
                      "else {\r",
                      "    pm.test(`*** S U C C E S S *** ${jsonData.message}`, function(){\r",
                      "        // pm.expect(jsonData.message).to.equal(\"Profile successful\");\r",
                      "        pm.expect(jsonData.message).to.be.oneOf(message);\r",
                      "    });\r",
                      "\r",
                      "    pm.test(\"Check the response time\", function(){\r",
                      "    pm.expect(pm.response.responseTime).to.be.below(6000);\r",
                      "    });\r",
                      "\r",
                      "    pm.test(`Check the Status code ${jsonData.status}`, function(){\r",
                      "        pm.expect(pm.response.code).to.be.oneOf(status);\r",
                      "    });\r",
                      "\r",
                      "    pm.test(\"Body matches multiple string\",function(){\r",
                      "    pm.expect(pm.response.text()).to.include(\"message\");\r",
                      "});\r",
                      "\r",
                      "}\r",
                      "\r",
                      ""
                    ],
                    "_lastExecutionId": "c1d6d515-485d-45cb-ab2b-15662e3830f7"
                  }
                },
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "46fb041c-0790-4ccb-a117-d6dcbb44aa15",
                    "type": "text/javascript",
                    "exec": [
                      ""
                    ],
                    "_lastExecutionId": "48a955fd-f392-4b00-9034-2a273d9fea6d"
                  }
                }
              ]
            },
            {
              "id": "740f7a4b-9db6-4b38-a333-0ad712a2b2a2",
              "name": "reset-password",
              "request": {
                "url": {
                  "protocol": "https",
                  "path": [
                    "notes",
                    "api",
                    "users",
                    "reset-password"
                  ],
                  "host": [
                    "practice",
                    "expandtesting",
                    "com"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "accept",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n    \"token\":\"{{resetPasswordToken}}\",\r\n    \"newPassword\":\"{{$randomPassword}}\"\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "7cdc8324-5612-42e4-8f85-49037412238b",
                    "type": "text/javascript",
                    "exec": [
                      "let jsonData = pm.response.json();\r",
                      "\r",
                      "let newPassword = JSON.parse(pm.request.body.raw).newPassword;\r",
                      "pm.environment.set('password', newPassword);\r",
                      "\r",
                      "\r",
                      "message = [\r",
                      "    \"The password has been successfully reset\",\r",
                      "    \"Token must be between 64 characters\",\r",
                      "    \"Bad Request\",\r",
                      "    \"The password was successfully updated\",\r",
                      "    \"Internal Error Server\",\r",
                      "    \"New password must be between 6 and 30 characters\",\r",
                      "    \"The password reset token is invalid or has expired\"\r",
                      "]\r",
                      "\r",
                      "status = [200,400,401,500]\r",
                      "\r",
                      "if (jsonData.success === false) {\r",
                      "    pm.test(`**** E R R O R ***** ${jsonData.message}`, function(){\r",
                      "        // pm.expect(jsonData.message).to.eql(\"No authentication token specified in x-auth-token header\");\r",
                      "        pm.expect(jsonData.message).to.be.oneOf(message);\r",
                      "    });\r",
                      "\r",
                      "    pm.test(`Check the multiple error status code ${jsonData.status}`, function(){\r",
                      "        pm.expect(pm.response.code).to.be.oneOf(status);\r",
                      "    });\r",
                      "\r",
                      "\r",
                      "}\r",
                      "else {\r",
                      "    pm.test(`*** S U C C E S S *** ${jsonData.message}`, function(){\r",
                      "        // pm.expect(jsonData.message).to.equal(\"Profile successful\");\r",
                      "        pm.expect(jsonData.message).to.be.oneOf(message);\r",
                      "    });\r",
                      "\r",
                      "    pm.test(\"Check the response time\", function(){\r",
                      "    pm.expect(pm.response.responseTime).to.be.below(6000);\r",
                      "    });\r",
                      "\r",
                      "    pm.test(`Check the Status code ${jsonData.status}`, function(){\r",
                      "        pm.expect(pm.response.code).to.be.oneOf(status);\r",
                      "    });\r",
                      "\r",
                      "    pm.test(\"Body matches multiple string\",function(){\r",
                      "    pm.expect(pm.response.text()).to.include(\"message\");\r",
                      "});\r",
                      "\r",
                      "}\r",
                      "\r",
                      "\r",
                      ""
                    ],
                    "_lastExecutionId": "5d234639-2098-4725-8401-094ce8fa851b"
                  }
                },
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "1268a1ec-48a3-4dfd-8fc8-3c14d0fa7f28",
                    "type": "text/javascript",
                    "exec": [
                      ""
                    ],
                    "_lastExecutionId": "3e5db1d1-0c8c-4a29-8797-f14a01a4bedc"
                  }
                }
              ]
            },
            {
              "id": "93821c3b-e028-4eda-a749-05d87d7e6a94",
              "name": "change-password",
              "request": {
                "url": {
                  "path": [
                    "users",
                    "change-password"
                  ],
                  "host": [
                    "{{exp_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "accept",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n    \"currentPassword\":\"{{password}}\",\r\n    \"newPassword\":\"{{$randomPassword}}\"\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "auth": {
                  "type": "apikey",
                  "apikey": [
                    {
                      "type": "string",
                      "value": "{{exp_token}}",
                      "key": "value"
                    },
                    {
                      "type": "string",
                      "value": "x-auth-token",
                      "key": "key"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "3eca22f1-7d4a-4832-8b68-54badb876aa6",
                    "type": "text/javascript",
                    "exec": [
                      "pm.environment.get(\"password\");\r",
                      "\r",
                      "let newPassword = JSON.parse(pm.request.body.raw).newPassword;\r",
                      "pm.environment.set('password', newPassword);\r",
                      "\r",
                      "let jsonData = pm.response.json();\r",
                      "message = [\r",
                      "    \"The password has been successfully reset\",\r",
                      "    \"Token must be between 64 characters\",\r",
                      "    \"Bad Request\",\r",
                      "    \"The password was successfully updated\",\r",
                      "    \"Internal Error Server\",\r",
                      "    \"New password must be between 6 and 30 characters\",\r",
                      "    \"The password reset token is invalid or has expired\"\r",
                      "]\r",
                      "\r",
                      "status = [200,400,401,500]\r",
                      "\r",
                      "if (jsonData.success === false) {\r",
                      "    pm.test(`**** E R R O R ***** ${jsonData.message}`, function(){\r",
                      "        // pm.expect(jsonData.message).to.eql(\"No authentication token specified in x-auth-token header\");\r",
                      "        pm.expect(jsonData.message).to.be.oneOf(message);\r",
                      "    });\r",
                      "\r",
                      "    pm.test(`Check the multiple error status code ${jsonData.status}`, function(){\r",
                      "        pm.expect(pm.response.code).to.be.oneOf(status);\r",
                      "    });\r",
                      "\r",
                      "\r",
                      "}\r",
                      "else {\r",
                      "    pm.test(`*** S U C C E S S *** ${jsonData.message}`, function(){\r",
                      "        // pm.expect(jsonData.message).to.equal(\"Profile successful\");\r",
                      "        pm.expect(jsonData.message).to.be.oneOf(message);\r",
                      "    });\r",
                      "\r",
                      "    pm.test(\"Check the response time\", function(){\r",
                      "    pm.expect(pm.response.responseTime).to.be.below(6000);\r",
                      "    });\r",
                      "\r",
                      "    pm.test(`Check the Status code ${jsonData.status}`, function(){\r",
                      "        pm.expect(pm.response.code).to.be.oneOf(status);\r",
                      "    });\r",
                      "\r",
                      "    pm.test(\"Body matches multiple string\",function(){\r",
                      "    pm.expect(pm.response.text()).to.include(\"message\");\r",
                      "});\r",
                      "\r",
                      "}\r",
                      ""
                    ],
                    "_lastExecutionId": "64be3638-86ca-4200-b966-7a137b03eb2e"
                  }
                },
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "aa473681-09fc-4673-a2fe-7012cf4e42e9",
                    "type": "text/javascript",
                    "exec": [
                      "console.log(pm.environment.get(\"password\"));\r",
                      "\r",
                      "\r",
                      "\r",
                      ""
                    ],
                    "_lastExecutionId": "fb6fc291-ccb6-46ad-9bb8-0e4bf2cf736d"
                  }
                }
              ]
            },
            {
              "id": "f4c8e78d-5700-43a2-8e20-cb1a0de26ce9",
              "name": "UserLogout",
              "request": {
                "url": {
                  "path": [
                    "users",
                    "logout"
                  ],
                  "host": [
                    "{{exp_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "accept",
                    "value": "application/json"
                  }
                ],
                "method": "DELETE",
                "auth": {
                  "type": "apikey",
                  "apikey": [
                    {
                      "type": "string",
                      "value": "{{exp_token}}",
                      "key": "value"
                    },
                    {
                      "type": "string",
                      "value": "x-auth-token",
                      "key": "key"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "43a38bb6-0063-463b-9a7b-ea0674d209fe",
                    "type": "text/javascript",
                    "exec": [
                      "let jsonData = pm.response.json();\r",
                      "message = [\r",
                      "    \"User has been successfully logged out\",\r",
                      "    \"Token must be between 64 characters\",\r",
                      "    \"Bad Request\",\r",
                      "    \"Access token is not valid or has expired, you will need to login\",\r",
                      "    \"No authentication token specified in x-auth-token header\",\r",
                      "    \"Internal Error Server\",\r",
                      "    \"Successful Request\",\r",
                      "    \"Unauthorized Request\"\r",
                      "]\r",
                      "\r",
                      "status = [200,400,401,500]\r",
                      "\r",
                      "if (jsonData.success === false) {\r",
                      "    pm.test(`**** E R R O R ***** ${jsonData.message}`, function(){\r",
                      "        // pm.expect(jsonData.message).to.eql(\"No authentication token specified in x-auth-token header\");\r",
                      "        pm.expect(jsonData.message).to.be.oneOf(message);\r",
                      "    });\r",
                      "\r",
                      "    pm.test(`Check the multiple error status code ${jsonData.status}`, function(){\r",
                      "        pm.expect(pm.response.code).to.be.oneOf(status);\r",
                      "    });\r",
                      "\r",
                      "\r",
                      "}\r",
                      "else {\r",
                      "    pm.test(`*** S U C C E S S *** ${jsonData.message}`, function(){\r",
                      "        // pm.expect(jsonData.message).to.equal(\"Profile successful\");\r",
                      "        pm.expect(jsonData.message).to.be.oneOf(message);\r",
                      "    });\r",
                      "\r",
                      "    pm.test(\"Check the response time\", function(){\r",
                      "    pm.expect(pm.response.responseTime).to.be.below(6000);\r",
                      "    });\r",
                      "\r",
                      "    pm.test(`Check the Status code ${jsonData.status}`, function(){\r",
                      "        pm.expect(pm.response.code).to.be.oneOf(status);\r",
                      "    });\r",
                      "\r",
                      "    pm.test(\"Body matches multiple string\",function(){\r",
                      "    pm.expect(pm.response.text()).to.include(\"message\");\r",
                      "});\r",
                      "\r",
                      "}\r",
                      "\r",
                      "postman.setNextRequest(null);"
                    ],
                    "_lastExecutionId": "c7d982d4-a8dc-460f-a106-6e0c01643e82"
                  }
                },
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "e8ae662d-a080-4bf5-a817-754113435b5e",
                    "type": "text/javascript",
                    "exec": [
                      ""
                    ],
                    "_lastExecutionId": "0b0d404e-4117-40fc-9982-a95619506052"
                  }
                }
              ]
            }
          ],
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "3380df96-f386-44be-9dc8-eb145a929d13",
                "type": "text/javascript",
                "exec": [
                  ""
                ],
                "_lastExecutionId": "c2613397-fddf-4d46-99b6-9ffc9166e0a8"
              }
            },
            {
              "listen": "test",
              "script": {
                "id": "18c4e0bb-9477-4e5f-b627-d550e666c7d3",
                "type": "text/javascript",
                "exec": [
                  ""
                ],
                "_lastExecutionId": "78225eb1-cbe5-408b-978b-a1bf2d2b693c"
              }
            }
          ],
          "variable": [
            {
              "type": "string",
              "value": "https://practice.expandtesting.com/notes/api",
              "key": "exp_url"
            }
          ],
          "info": {
            "_postman_id": "723ea9c3-0635-4605-b90c-d6d9e9835d8c",
            "name": "expandtesting",
            "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
          }
        },
        "cursor": {
          "ref": "f26ffd76-85bb-4791-bb51-59aca8552d66",
          "length": 12,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "0a724cb3-db9e-48f7-95ad-3b903b00d840",
          "scriptId": "d94857cd-ae23-40c6-ae38-5f7aaca3e833"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 0,
          "test": "**** E R R O R ***** No authentication token specified in x-auth-token header",
          "message": "expected 'No authentication token specified in …' to be one of [ …(7) ]",
          "stack": "AssertionError: expected 'No authentication token specified in …' to be one of [ …(7) ]\n   at Object.eval sandbox-script.js:1:11)",
          "checksum": "d6feb38bd321909345eaa5a7d60cdb47",
          "id": "817c1415-6db1-43b9-9711-37b1ee5ff4df",
          "timestamp": 1698733442792,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 1,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 11,
              "native": false
            }
          ]
        },
        "at": "assertion:0 in test-script",
        "source": {
          "id": "93821c3b-e028-4eda-a749-05d87d7e6a94",
          "name": "change-password",
          "request": {
            "url": {
              "path": [
                "users",
                "change-password"
              ],
              "host": [
                "{{exp_url}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "accept",
                "value": "application/json"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\r\n    \"currentPassword\":\"{{password}}\",\r\n    \"newPassword\":\"{{$randomPassword}}\"\r\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "auth": {
              "type": "apikey",
              "apikey": [
                {
                  "type": "string",
                  "value": "{{exp_token}}",
                  "key": "value"
                },
                {
                  "type": "string",
                  "value": "x-auth-token",
                  "key": "key"
                }
              ]
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "3eca22f1-7d4a-4832-8b68-54badb876aa6",
                "type": "text/javascript",
                "exec": [
                  "pm.environment.get(\"password\");\r",
                  "\r",
                  "let newPassword = JSON.parse(pm.request.body.raw).newPassword;\r",
                  "pm.environment.set('password', newPassword);\r",
                  "\r",
                  "let jsonData = pm.response.json();\r",
                  "message = [\r",
                  "    \"The password has been successfully reset\",\r",
                  "    \"Token must be between 64 characters\",\r",
                  "    \"Bad Request\",\r",
                  "    \"The password was successfully updated\",\r",
                  "    \"Internal Error Server\",\r",
                  "    \"New password must be between 6 and 30 characters\",\r",
                  "    \"The password reset token is invalid or has expired\"\r",
                  "]\r",
                  "\r",
                  "status = [200,400,401,500]\r",
                  "\r",
                  "if (jsonData.success === false) {\r",
                  "    pm.test(`**** E R R O R ***** ${jsonData.message}`, function(){\r",
                  "        // pm.expect(jsonData.message).to.eql(\"No authentication token specified in x-auth-token header\");\r",
                  "        pm.expect(jsonData.message).to.be.oneOf(message);\r",
                  "    });\r",
                  "\r",
                  "    pm.test(`Check the multiple error status code ${jsonData.status}`, function(){\r",
                  "        pm.expect(pm.response.code).to.be.oneOf(status);\r",
                  "    });\r",
                  "\r",
                  "\r",
                  "}\r",
                  "else {\r",
                  "    pm.test(`*** S U C C E S S *** ${jsonData.message}`, function(){\r",
                  "        // pm.expect(jsonData.message).to.equal(\"Profile successful\");\r",
                  "        pm.expect(jsonData.message).to.be.oneOf(message);\r",
                  "    });\r",
                  "\r",
                  "    pm.test(\"Check the response time\", function(){\r",
                  "    pm.expect(pm.response.responseTime).to.be.below(6000);\r",
                  "    });\r",
                  "\r",
                  "    pm.test(`Check the Status code ${jsonData.status}`, function(){\r",
                  "        pm.expect(pm.response.code).to.be.oneOf(status);\r",
                  "    });\r",
                  "\r",
                  "    pm.test(\"Body matches multiple string\",function(){\r",
                  "    pm.expect(pm.response.text()).to.include(\"message\");\r",
                  "});\r",
                  "\r",
                  "}\r",
                  ""
                ],
                "_lastExecutionId": "64be3638-86ca-4200-b966-7a137b03eb2e"
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "id": "aa473681-09fc-4673-a2fe-7012cf4e42e9",
                "type": "text/javascript",
                "exec": [
                  "console.log(pm.environment.get(\"password\"));\r",
                  "\r",
                  "\r",
                  "\r",
                  ""
                ],
                "_lastExecutionId": "fb6fc291-ccb6-46ad-9bb8-0e4bf2cf736d"
              }
            }
          ]
        },
        "parent": {
          "_": {
            "postman_id": "723ea9c3-0635-4605-b90c-d6d9e9835d8c",
            "exporter_id": "13852941",
            "collection_link": "https://galactic-astronaut-894425.postman.co/workspace/b6dafb4f-3507-4e58-a32d-dd31bf6ab148/collection/13852941-723ea9c3-0635-4605-b90c-d6d9e9835d8c?action=share&source=collection_link&creator=13852941"
          },
          "item": [
            {
              "id": "90407c19-d06c-4337-abb9-4dfc2fa17fc8",
              "name": "health_check",
              "request": {
                "url": {
                  "path": [
                    "health-check"
                  ],
                  "host": [
                    "{{exp_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "b075fb8f-9483-4909-a4a4-cf6344c6642b",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Check the Status code 200\", function(){\r",
                      "    pm.response.to.have.status(200);\r",
                      "});\r",
                      "\r",
                      "var jsonData = pm.response.json();\r",
                      "\r",
                      "pm.test(\"Check the success code in body\", function(){\r",
                      "    pm.expect(jsonData.success).to.eql(true);\r",
                      "});\r",
                      "\r",
                      "pm.test(\"Check the Status code in body\", function(){\r",
                      "    pm.expect(jsonData.status).to.eql(200);\r",
                      "});\r",
                      "\r",
                      "pm.test(\"Check the message in body\", function(){\r",
                      "    pm.expect(jsonData.message).to.eql(\"Notes API is Running\");\r",
                      "});\r",
                      "\r",
                      "\r",
                      ""
                    ],
                    "_lastExecutionId": "dcf22f24-f95a-4d61-981a-68f2474c0b1d"
                  }
                },
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "15079d7d-2fc3-468b-b923-1fd697b2156e",
                    "type": "text/javascript",
                    "exec": [
                      ""
                    ],
                    "_lastExecutionId": "a57965c9-dfeb-425b-a87b-14b41a981af7"
                  }
                }
              ]
            },
            {
              "id": "d3b70abb-4c44-4d96-b946-e8ef2e19907f",
              "name": "RegisterUser",
              "request": {
                "url": {
                  "path": [
                    "users",
                    "register"
                  ],
                  "host": [
                    "{{exp_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n    \"name\":\"{{$randomFullName}}\",\r\n    \"email\":\"{{randomEmail}}\",\r\n    \"password\":\"{{$randomPassword}}\"\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "4f0c3c3d-4171-4bea-b8a8-3fd567809f0d",
                    "type": "text/javascript",
                    "exec": [
                      "var jsonData = pm.response.json();\r",
                      "\r",
                      "pm.test(\"Check the success msg is true in body?\", function(){\r",
                      "    pm.expect(jsonData.success).to.eql(true);\r",
                      "});\r",
                      "\r",
                      "pm.test(\"Check the body message\", function(){\r",
                      "    pm.expect(jsonData.message).to.eql(\"User account created successfully\");\r",
                      "});\r",
                      "\r",
                      "pm.test(\"Verify the values are not null\", function(){\r",
                      "    pm.expect(jsonData.data.id, \"Id is not null\").to.not.be.null;\r",
                      "    pm.expect(jsonData.data.name, \"name is not null\").to.not.be.null;\r",
                      "    pm.expect(jsonData.data.email, \"email is not null\").to.not.be.null;\r",
                      "});\r",
                      "\r",
                      "pm.test(\"response property matching an environment variable\", function(){\r",
                      "    pm.expect(jsonData.name).to.eql(pm.environment.get(\"name\"));\r",
                      "});\r",
                      "\r",
                      "pm.test(\"Check the response time\", function(){\r",
                      "    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
                      "});\r",
                      "\r",
                      "pm.environment.set(\"id\", jsonData.data.id);\r",
                      "pm.environment.set(\"name\", jsonData.data.name);\r",
                      "\r",
                      "let password = JSON.parse(pm.request.body.raw).password;\r",
                      "pm.environment.set('password', password);\r",
                      "\r",
                      "message = [\r",
                      "    \"Access token is not valid or has expired, you will need to login\",\r",
                      "    \"No authentication token specified in x-auth-token header\",\r",
                      "    \"User name must be between 4 and 30 characters\",\r",
                      "    \"Phone number should be between 8 and 20 digits\",\r",
                      "    \"Unauthorized Request\",\r",
                      "    \"Internal Error Server\",\r",
                      "    \"Profile updated successful\",\r",
                      "    \"User account created successfully\",\r",
                      "    \"Not Found\",\r",
                      "    \"Bad Request\",\r",
                      "    \"An account already exists with the same email address\"\r",
                      "];\r",
                      "\r",
                      "status = [400,401,404,409,500,200,201];\r",
                      "\r",
                      "if (jsonData.success === false) {\r",
                      "    pm.test(`**** E R R O R ***** ${jsonData.message}`, function(){\r",
                      "        pm.expect(jsonData.message).to.be.oneOf(message);\r",
                      "    });\r",
                      "\r",
                      "    pm.test(`Check the multiple error status code ${jsonData.status}`, function(){\r",
                      "        pm.expect(pm.response.code).to.be.oneOf(status);\r",
                      "    });\r",
                      "}\r",
                      "else {\r",
                      "    pm.test(`*** S U C C E S S *** ${jsonData.message}`, function(){\r",
                      "        pm.expect(jsonData.message).to.be.oneOf(message);\r",
                      "    });\r",
                      "\r",
                      "    pm.test(`Check the Status code ${jsonData.status}`, function(){\r",
                      "        pm.expect(pm.response.code).to.be.oneOf(status);\r",
                      "    });\r",
                      "}"
                    ],
                    "_lastExecutionId": "2fbfcb58-035a-4d0d-afa2-7fc9d5239e13"
                  }
                },
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "3483ef69-d6b6-4835-8746-973a3f7a159e",
                    "type": "text/javascript",
                    "exec": [
                      "\r",
                      "// // Define the incrementEmail function\r",
                      "// function incrementEmail(email) {\r",
                      "//     const match = email.match(/\\+a(\\d+)/);\r",
                      "\r",
                      "//     if (match) {\r",
                      "//         const currentNumber = parseInt(match[1]);\r",
                      "//         const nextNumber = currentNumber + 1;\r",
                      "//         const incrementedEmail = email.replace(/\\+a\\d+/, `+a${nextNumber}`);\r",
                      "//         return incrementedEmail;\r",
                      "//     }\r",
                      "\r",
                      "//     return email;\r",
                      "// }\r",
                      "\r",
                      "\r",
                      "// const originalEmail = pm.environment.get(\"email\");\r",
                      "\r",
                      "\r",
                      "// if (originalEmail) {\r",
                      "//     // Use the incrementEmail function to get the incremented email\r",
                      "//     const incrementedEmail = incrementEmail(originalEmail);\r",
                      "\r",
                      "//     // Set the incremented email back to the environment\r",
                      "//     pm.environment.set(\"email\", incrementedEmail);\r",
                      "\r",
                      "//     console.log(\"OriginalEmail:\", originalEmail);\r",
                      "//     console.log(\"IncrementedEmail:\", incrementedEmail);\r",
                      "// } else {\r",
                      "//     console.error(\"Email environment variable not found.\");\r",
                      "// }\r",
                      "\r",
                      "// console.log(pm.environment.get(\"email\"));\r",
                      "\r",
                      "\r",
                      "// -------------------------------------------------------------------\r",
                      "// Define the base part of the email address\r",
                      "const baseEmail = pm.environment.get(\"baseEmail\");\r",
                      "\r",
                      "// Generate a random number between min and max (inclusive)\r",
                      "function getRandomNumber(min, max) {\r",
                      "    return Math.floor(Math.random() * (max - min + 1)) + min;\r",
                      "}\r",
                      "\r",
                      "// Generate a random sequence like +a151, +a152, +a153, and so on\r",
                      "const randomSequence = `+a${getRandomNumber(1, 999)}`;\r",
                      "\r",
                      "// Combine the base and random sequence to create the random email address\r",
                      "const randomEmail = `${baseEmail}${randomSequence}@gmail.com`;\r",
                      "\r",
                      "// Set the random email address as an environment variable for your request\r",
                      "pm.environment.set('randomEmail', randomEmail);\r",
                      "\r",
                      "\r",
                      ""
                    ],
                    "_lastExecutionId": "f0df73d6-9875-49de-aaed-2ffb46745ff0"
                  }
                }
              ]
            },
            {
              "id": "1da8b1e7-3198-4c60-9c34-4a1e8b7e8b15",
              "name": "UserLogin",
              "request": {
                "url": {
                  "path": [
                    "users",
                    "login"
                  ],
                  "host": [
                    "{{exp_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n    \"email\":\"{{randomEmail}}\",\r\n    \"password\":\"{{password}}\"\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "cc8daf67-c0f2-4843-9223-e47d8fe754ec",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Check the status code is 200\", function(){\r",
                      "    pm.response.to.have.status(200);\r",
                      "});\r",
                      "\r",
                      "var jsonData = pm.response.json();\r",
                      "\r",
                      "pm.test(\"Check the success message\", function(){\r",
                      "    pm.expect(jsonData.success).to.eql(true);\r",
                      "});\r",
                      "\r",
                      "pm.test(\"Check the body message\", function(){\r",
                      "    pm.expect(jsonData.message).to.eql(\"Login successful\");\r",
                      "});\r",
                      "\r",
                      "pm.environment.set(\"exp_token\", jsonData.data.token);\r",
                      "\r",
                      "pm.test(\"Verify the values are not null\", function(){\r",
                      "    pm.expect(jsonData.data.id, \"Id is not a null\").to.not.be.null;\r",
                      "    pm.expect(jsonData.data.name, \"name is not a null\").to.not.be.null;\r",
                      "    pm.expect(jsonData.data.email, \"email is not a null\").to.not.be.null;\r",
                      "    pm.expect(jsonData.data.token, \"token is not a null\").to.not.be.null;\r",
                      "});\r",
                      "\r",
                      "pm.test(\"Check the response time\", function(){\r",
                      "    pm.expect(pm.response.responseTime).to.below(2000);\r",
                      "});\r",
                      "\r",
                      ""
                    ],
                    "_lastExecutionId": "4a906166-3676-408b-bc6f-6c09add962a5"
                  }
                },
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "98d0941e-d03e-4ab7-a7b0-84826ad7708a",
                    "type": "text/javascript",
                    "exec": [
                      ""
                    ],
                    "_lastExecutionId": "2f4a3493-6a43-4652-8c74-458390f9ecf9"
                  }
                }
              ]
            },
            {
              "id": "3f4af57c-fb9c-4a3c-8c2b-0f9b603b0679",
              "name": "GetProfile",
              "request": {
                "url": {
                  "path": [
                    "users",
                    "profile"
                  ],
                  "host": [
                    "{{exp_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET",
                "auth": {
                  "type": "apikey",
                  "apikey": [
                    {
                      "type": "string",
                      "value": "{{exp_token}}",
                      "key": "value"
                    },
                    {
                      "type": "string",
                      "value": "header",
                      "key": "in"
                    },
                    {
                      "type": "string",
                      "value": "x-auth-token",
                      "key": "key"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "56a6399c-71a1-414d-b876-9262a848415f",
                    "type": "text/javascript",
                    "exec": [
                      "\r",
                      "let jsonData = pm.response.json();\r",
                      "message = [\r",
                      "    \"Access token is not valid or has expired, you will need to login\",\r",
                      "    \"No authentication token specified in x-auth-token header\",\r",
                      "    \"Bad Request\",\r",
                      "    \"Unauthorized Request\",\r",
                      "    \"Internal Error Server\",\r",
                      "    \"Profile successful\",\r",
                      "    \"Not Found\"\r",
                      "]\r",
                      "\r",
                      "status = [400,401,404,500,200,201]\r",
                      "\r",
                      "if (jsonData.success === false) {\r",
                      "    pm.test(`**** E R R O R ***** ${jsonData.message}`, function(){\r",
                      "        // pm.expect(jsonData.message).to.eql(\"No authentication token specified in x-auth-token header\");\r",
                      "        pm.expect(jsonData.message).to.be.oneOf(message);\r",
                      "    });\r",
                      "\r",
                      "    pm.test(`Check the multiple error status code ${jsonData.status}`, function(){\r",
                      "        pm.expect(pm.response.code).to.be.oneOf(status);\r",
                      "    });\r",
                      "\r",
                      "\r",
                      "}\r",
                      "else {\r",
                      "    pm.test(`*** S U C C E S S *** ${jsonData.message}`, function(){\r",
                      "        // pm.expect(jsonData.message).to.equal(\"Profile successful\");\r",
                      "        pm.expect(jsonData.message).to.be.oneOf(message);\r",
                      "    });\r",
                      "\r",
                      "    pm.test(\"Check the response time\", function(){\r",
                      "    pm.expect(pm.response.responseTime).to.be.below(6000);\r",
                      "    });\r",
                      "\r",
                      "    pm.test(`Check the Status code ${jsonData.status}`, function(){\r",
                      "        pm.expect(pm.response.code).to.be.oneOf(status);\r",
                      "    });\r",
                      "\r",
                      "    pm.test(\"Body matches multiple string\",function(){\r",
                      "    pm.expect(pm.response.text()).to.include(\"id\");\r",
                      "    pm.expect(pm.response.text()).to.include(\"name\");\r",
                      "    pm.expect(pm.response.text()).to.include(\"email\");\r",
                      "});\r",
                      "\r",
                      "}\r",
                      "\r",
                      ""
                    ],
                    "_lastExecutionId": "55d3989d-79a3-476b-87c3-020290feeec2"
                  }
                },
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "5b6727ff-6213-4350-874c-dbaeeb0d0d03",
                    "type": "text/javascript",
                    "exec": [
                      ""
                    ],
                    "_lastExecutionId": "5e07b22a-eb37-441e-b764-c112f7fde3f7"
                  }
                }
              ],
              "protocolProfileBehavior": {
                "disabledSystemHeaders": {}
              }
            },
            {
              "id": "ee9d7916-0288-4df6-a4d2-05ed9c78c4f1",
              "name": "UpdateProfile",
              "request": {
                "url": {
                  "path": [
                    "users",
                    "profile"
                  ],
                  "host": [
                    "{{exp_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "PATCH",
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n    \"name\":\"{{name}}\",\r\n    \"phone\":\"{{random_number}}\",\r\n    \"company\":\"{{$randomCompanyName}}\"\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "auth": {
                  "type": "apikey",
                  "apikey": [
                    {
                      "type": "string",
                      "value": "{{exp_token}}",
                      "key": "value"
                    },
                    {
                      "type": "string",
                      "value": "header",
                      "key": "in"
                    },
                    {
                      "type": "string",
                      "value": "x-auth-token",
                      "key": "key"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "6ab7e932-eb9b-4edc-9edc-b8d42e4162ad",
                    "type": "text/javascript",
                    "exec": [
                      "let jsonData = pm.response.json();\r",
                      "message = [\r",
                      "    \"Access token is not valid or has expired, you will need to login\",\r",
                      "    \"No authentication token specified in x-auth-token header\",\r",
                      "    \"User name must be between 4 and 30 characters\",\r",
                      "    \"Phone number should be between 8 and 20 digits\",\r",
                      "    \"Unauthorized Request\",\r",
                      "    \"Internal Error Server\",\r",
                      "    \"Profile updated successful\",\r",
                      "    \"Not Found\",\r",
                      "    \"Bad Request\"\r",
                      "]\r",
                      "\r",
                      "status = [400,401,404,500,200,201]\r",
                      "// var jsonData1 = pm.response.json();\r",
                      "// pm.environment.set(\"phoneNumber\", jsonData1.data.phone);\r",
                      "\r",
                      "if (jsonData.success === false) {\r",
                      "    pm.test(`**** E R R O R ***** ${jsonData.message}`, function(){\r",
                      "        // pm.expect(jsonData.message).to.eql(\"No authentication token specified in x-auth-token header\");\r",
                      "        pm.expect(jsonData.message).to.be.oneOf(message);\r",
                      "    });\r",
                      "\r",
                      "    pm.test(`Check the multiple error status code ${jsonData.status}`, function(){\r",
                      "        pm.expect(pm.response.code).to.be.oneOf(status);\r",
                      "    });\r",
                      "\r",
                      "\r",
                      "}\r",
                      "else {\r",
                      "    pm.test(`*** S U C C E S S *** ${jsonData.message}`, function(){\r",
                      "        // pm.expect(jsonData.message).to.equal(\"Profile successful\");\r",
                      "        pm.expect(jsonData.message).to.be.oneOf(message);\r",
                      "    });\r",
                      "\r",
                      "    pm.test(\"Check the response time\", function(){\r",
                      "    pm.expect(pm.response.responseTime).to.be.below(6000);\r",
                      "    });\r",
                      "\r",
                      "    pm.test(`Check the Status code ${jsonData.status}`, function(){\r",
                      "        pm.expect(pm.response.code).to.be.oneOf(status);\r",
                      "    });\r",
                      "\r",
                      "    pm.test(\"Body matches multiple string\",function(){\r",
                      "    pm.expect(pm.response.text()).to.include(\"id\");\r",
                      "    pm.expect(pm.response.text()).to.include(\"name\");\r",
                      "    pm.expect(pm.response.text()).to.include(\"email\");\r",
                      "});\r",
                      "\r",
                      "}\r",
                      "\r",
                      ""
                    ],
                    "_lastExecutionId": "bf535ed4-ea27-433b-95ed-0405878d634c"
                  }
                },
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "1dd9ce14-2fea-48d5-b628-446e36acb961",
                    "type": "text/javascript",
                    "exec": [
                      "pm.environment.set(\"random_number\",_.random(1000000000,9999999999));\r",
                      "\r",
                      "\r",
                      ""
                    ],
                    "_lastExecutionId": "81adb337-1695-4fed-b265-391f869dd222"
                  }
                }
              ]
            },
            {
              "id": "03c5b9ed-2c86-4338-932a-d93a799c2d8d",
              "name": "ForgotPassword",
              "request": {
                "url": {
                  "path": [
                    "users",
                    "forgot-password"
                  ],
                  "host": [
                    "{{exp_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n    \"email\":\"{{randomEmail}}\"\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "auth": {
                  "type": "apikey",
                  "apikey": [
                    {
                      "type": "string",
                      "value": "{{exp_token}}",
                      "key": "value"
                    },
                    {
                      "type": "string",
                      "value": "header",
                      "key": "in"
                    },
                    {
                      "type": "string",
                      "value": "x-auth-token",
                      "key": "key"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "72c44319-e1e0-49ac-91f7-f3f0cd439f93",
                    "type": "text/javascript",
                    "exec": [
                      "let jsonData = pm.response.json();\r",
                      "let jsonEmail = JSON.parse(pm.request.body.raw).email;\r",
                      "\r",
                      "message = [\r",
                      "    \"Access token is not valid or has expired, you will need to login\",\r",
                      "    \"No authentication token specified in x-auth-token header\",\r",
                      "    \"Unauthorized Request\",\r",
                      "    \"Internal Error Server\",\r",
                      "    `Password reset link successfully sent to ${pm.environment.get(\"email\")}. Please verify by clicking on the given link`,\r",
                      "    \"Not Found\",\r",
                      "    \"Bad Request\",\r",
                      "    \"A valid email address is required\"\r",
                      "]\r",
                      "\r",
                      "status = [400,401,404,500,200,201]\r",
                      "// var jsonData1 = pm.response.json();\r",
                      "// pm.environment.set(\"phoneNumber\", jsonData1.data.phone);\r",
                      "\r",
                      "if (jsonData.success === false) {\r",
                      "    pm.test(`**** E R R O R ***** ${jsonData.message}`, function(){\r",
                      "        // pm.expect(jsonData.message).to.eql(\"No authentication token specified in x-auth-token header\");\r",
                      "        pm.expect(jsonData.message).to.be.oneOf(message);\r",
                      "    });\r",
                      "\r",
                      "    pm.test(`Check the multiple error status code ${jsonData.status}`, function(){\r",
                      "        pm.expect(pm.response.code).to.be.oneOf(status);\r",
                      "    });\r",
                      "\r",
                      "\r",
                      "}\r",
                      "else {\r",
                      "    pm.test(`*** S U C C E S S *** ${jsonData.message}`, function(){\r",
                      "        // pm.expect(jsonData.message).to.equal(\"Profile successful\");\r",
                      "        pm.expect(jsonData.message).to.be.oneOf(message);\r",
                      "    });\r",
                      "\r",
                      "    pm.test(\"Check the response time\", function(){\r",
                      "    pm.expect(pm.response.responseTime).to.be.below(6000);\r",
                      "    });\r",
                      "\r",
                      "    pm.test(`Check the Status code ${jsonData.status}`, function(){\r",
                      "        pm.expect(pm.response.code).to.be.oneOf(status);\r",
                      "    });\r",
                      "\r",
                      "    pm.test(\"Body matches multiple string\",function(){\r",
                      "    pm.expect(pm.response.text()).to.include(\"message\");\r",
                      "});\r",
                      "\r",
                      "}\r",
                      "\r",
                      ""
                    ],
                    "_lastExecutionId": "a3803636-b917-4048-8873-b62ae1f022d6"
                  }
                },
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "6236deb0-9668-46d8-bb96-97cc86eeb0fa",
                    "type": "text/javascript",
                    "exec": [
                      ""
                    ],
                    "_lastExecutionId": "148f797c-8661-4a45-97c4-527fe81fce77"
                  }
                }
              ]
            },
            {
              "id": "eea8198b-64d4-43e4-b554-aefaae2516cd",
              "name": "GetEmailMessage",
              "request": {
                "url": {
                  "protocol": "https",
                  "path": [
                    "gmail",
                    "v1",
                    "users",
                    "{{user_email_id}}",
                    "messages",
                    ""
                  ],
                  "host": [
                    "gmail",
                    "googleapis",
                    "com"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET",
                "auth": {
                  "type": "oauth2",
                  "oauth2": [
                    {
                      "type": "boolean",
                      "value": false,
                      "key": "useBrowser"
                    },
                    {
                      "type": "string",
                      "value": "{{Scope}}",
                      "key": "scope"
                    },
                    {
                      "type": "string",
                      "value": "{{Client_Secret}}",
                      "key": "clientSecret"
                    },
                    {
                      "type": "string",
                      "value": "{{Client_ID}}",
                      "key": "clientId"
                    },
                    {
                      "type": "string",
                      "value": "{{Access_Token_URL}}",
                      "key": "accessTokenUrl"
                    },
                    {
                      "type": "string",
                      "value": "{{Auth_URL}}",
                      "key": "authUrl"
                    },
                    {
                      "type": "string",
                      "value": "{{Callback_URL}}",
                      "key": "redirect_uri"
                    },
                    {
                      "type": "string",
                      "value": "authorization_code",
                      "key": "grant_type"
                    },
                    {
                      "type": "string",
                      "value": "email_token",
                      "key": "tokenName"
                    },
                    {
                      "type": "string",
                      "value": "header",
                      "key": "addTokenTo"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "705020a4-73b3-44df-86ff-a5984e094d10",
                    "type": "text/javascript",
                    "exec": [
                      "var jsonData = pm.response.json();\r",
                      "pm.environment.set(\"messageId\", jsonData.messages[0].id);\r",
                      "\r",
                      ""
                    ],
                    "_lastExecutionId": "eeef6f2d-f5fd-4a00-be9c-25555c6fa5bc"
                  }
                },
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "cdf7837a-853f-442c-8e05-996129213a95",
                    "type": "text/javascript",
                    "exec": [
                      "var newRefreshToken = pm.environment.get(\"access_token\");\r",
                      "\r",
                      "pm.environment.set(\"refresh_token\", newRefreshToken);"
                    ],
                    "_lastExecutionId": "94790536-1730-42ee-886b-f2872e8a5fee"
                  }
                }
              ]
            },
            {
              "id": "f053ddc8-a8a6-4796-a23f-c89737b34582",
              "name": "GetMessageByID",
              "request": {
                "url": {
                  "protocol": "https",
                  "path": [
                    "gmail",
                    "v1",
                    "users",
                    "{{user_email_id}}",
                    "messages",
                    "{{messageId}}"
                  ],
                  "host": [
                    "gmail",
                    "googleapis",
                    "com"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "multipart/mixed"
                  }
                ],
                "method": "GET",
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "{{access_token}}",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "d94857cd-ae23-40c6-ae38-5f7aaca3e833",
                    "type": "text/javascript",
                    "exec": [
                      "\r",
                      "const response = pm.response.json();\r",
                      "\r",
                      "pm.environment.set(\"message_Body\", response.payload.body.data);\r",
                      "\r",
                      "var atob = require('atob');\r",
                      "\r",
                      "\r",
                      "var base64Data = pm.environment.get(\"message_Body\");\r",
                      "var decodedData = atob(base64Data);\r",
                      "postman.setEnvironmentVariable(\"rest_password\",decodedData);\r",
                      "var tokenRegex = /Reset password link: (https:\\/\\/practice\\.expandtesting\\.com\\/notes\\/app\\/reset-password\\/([\\w\\d]+))[^ ]+/;\r",
                      "var tokenMatch = decodedData.match(tokenRegex);\r",
                      "if (tokenMatch && tokenMatch[2]) {\r",
                      "    var resetPasswordToken = tokenMatch[2];\r",
                      "    \r",
                      "    // Set the reset password link as a Postman environment variable for later use\r",
                      "    pm.environment.set(\"resetPasswordToken\", resetPasswordToken);\r",
                      "    \r",
                      "    // Log the reset password link\r",
                      "    console.log(\"Reset Password Token: \" + resetPasswordToken);\r",
                      "} else {\r",
                      "    console.log(\"Reset password token not found in the response.\");\r",
                      "}\r",
                      "console.log(decodedData);\r",
                      "\r",
                      "\r",
                      "\r",
                      "\r",
                      "\r",
                      "\r",
                      "\r",
                      "\r",
                      "\r",
                      "\r",
                      "\r",
                      ""
                    ],
                    "_lastExecutionId": "4816be40-7f3a-489e-b23c-14c698a58ddc"
                  }
                },
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "8349aa22-c992-434e-9e35-e5fc8ef4a245",
                    "type": "text/javascript",
                    "exec": [
                      ""
                    ],
                    "_lastExecutionId": "e5ddbcb0-9830-4e57-9232-851987938e7d"
                  }
                }
              ]
            },
            {
              "id": "8d884a10-0abd-48de-9b8a-47bfc7ff13cd",
              "name": "verify-reset-password-token",
              "request": {
                "url": {
                  "path": [
                    "users",
                    "verify-reset-password-token"
                  ],
                  "host": [
                    "{{exp_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "accept",
                    "value": "application/json"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/x-www-form-urlencoded"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "urlencoded",
                  "urlencoded": [
                    {
                      "key": "token",
                      "value": "{{resetPasswordToken}}"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "799e647c-efdd-4528-bf8c-ec8d1e1a4b55",
                    "type": "text/javascript",
                    "exec": [
                      "let jsonData = pm.response.json();\r",
                      "\r",
                      "message = [\r",
                      "    \"The provided password reset token is valid\",\r",
                      "    \"Bad Request\",\r",
                      "    \"Internal Error Server\",\r",
                      "    \"The provided password reset token is invalid or has expired\"\r",
                      "]\r",
                      "\r",
                      "status = [200,400,401,500]\r",
                      "\r",
                      "if (jsonData.success === false) {\r",
                      "    pm.test(`**** E R R O R ***** ${jsonData.message}`, function(){\r",
                      "        // pm.expect(jsonData.message).to.eql(\"No authentication token specified in x-auth-token header\");\r",
                      "        pm.expect(jsonData.message).to.be.oneOf(message);\r",
                      "    });\r",
                      "\r",
                      "    pm.test(`Check the multiple error status code ${jsonData.status}`, function(){\r",
                      "        pm.expect(pm.response.code).to.be.oneOf(status);\r",
                      "    });\r",
                      "\r",
                      "\r",
                      "}\r",
                      "else {\r",
                      "    pm.test(`*** S U C C E S S *** ${jsonData.message}`, function(){\r",
                      "        // pm.expect(jsonData.message).to.equal(\"Profile successful\");\r",
                      "        pm.expect(jsonData.message).to.be.oneOf(message);\r",
                      "    });\r",
                      "\r",
                      "    pm.test(\"Check the response time\", function(){\r",
                      "    pm.expect(pm.response.responseTime).to.be.below(6000);\r",
                      "    });\r",
                      "\r",
                      "    pm.test(`Check the Status code ${jsonData.status}`, function(){\r",
                      "        pm.expect(pm.response.code).to.be.oneOf(status);\r",
                      "    });\r",
                      "\r",
                      "    pm.test(\"Body matches multiple string\",function(){\r",
                      "    pm.expect(pm.response.text()).to.include(\"message\");\r",
                      "});\r",
                      "\r",
                      "}\r",
                      "\r",
                      ""
                    ],
                    "_lastExecutionId": "c1d6d515-485d-45cb-ab2b-15662e3830f7"
                  }
                },
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "46fb041c-0790-4ccb-a117-d6dcbb44aa15",
                    "type": "text/javascript",
                    "exec": [
                      ""
                    ],
                    "_lastExecutionId": "48a955fd-f392-4b00-9034-2a273d9fea6d"
                  }
                }
              ]
            },
            {
              "id": "740f7a4b-9db6-4b38-a333-0ad712a2b2a2",
              "name": "reset-password",
              "request": {
                "url": {
                  "protocol": "https",
                  "path": [
                    "notes",
                    "api",
                    "users",
                    "reset-password"
                  ],
                  "host": [
                    "practice",
                    "expandtesting",
                    "com"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "accept",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n    \"token\":\"{{resetPasswordToken}}\",\r\n    \"newPassword\":\"{{$randomPassword}}\"\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "7cdc8324-5612-42e4-8f85-49037412238b",
                    "type": "text/javascript",
                    "exec": [
                      "let jsonData = pm.response.json();\r",
                      "\r",
                      "let newPassword = JSON.parse(pm.request.body.raw).newPassword;\r",
                      "pm.environment.set('password', newPassword);\r",
                      "\r",
                      "\r",
                      "message = [\r",
                      "    \"The password has been successfully reset\",\r",
                      "    \"Token must be between 64 characters\",\r",
                      "    \"Bad Request\",\r",
                      "    \"The password was successfully updated\",\r",
                      "    \"Internal Error Server\",\r",
                      "    \"New password must be between 6 and 30 characters\",\r",
                      "    \"The password reset token is invalid or has expired\"\r",
                      "]\r",
                      "\r",
                      "status = [200,400,401,500]\r",
                      "\r",
                      "if (jsonData.success === false) {\r",
                      "    pm.test(`**** E R R O R ***** ${jsonData.message}`, function(){\r",
                      "        // pm.expect(jsonData.message).to.eql(\"No authentication token specified in x-auth-token header\");\r",
                      "        pm.expect(jsonData.message).to.be.oneOf(message);\r",
                      "    });\r",
                      "\r",
                      "    pm.test(`Check the multiple error status code ${jsonData.status}`, function(){\r",
                      "        pm.expect(pm.response.code).to.be.oneOf(status);\r",
                      "    });\r",
                      "\r",
                      "\r",
                      "}\r",
                      "else {\r",
                      "    pm.test(`*** S U C C E S S *** ${jsonData.message}`, function(){\r",
                      "        // pm.expect(jsonData.message).to.equal(\"Profile successful\");\r",
                      "        pm.expect(jsonData.message).to.be.oneOf(message);\r",
                      "    });\r",
                      "\r",
                      "    pm.test(\"Check the response time\", function(){\r",
                      "    pm.expect(pm.response.responseTime).to.be.below(6000);\r",
                      "    });\r",
                      "\r",
                      "    pm.test(`Check the Status code ${jsonData.status}`, function(){\r",
                      "        pm.expect(pm.response.code).to.be.oneOf(status);\r",
                      "    });\r",
                      "\r",
                      "    pm.test(\"Body matches multiple string\",function(){\r",
                      "    pm.expect(pm.response.text()).to.include(\"message\");\r",
                      "});\r",
                      "\r",
                      "}\r",
                      "\r",
                      "\r",
                      ""
                    ],
                    "_lastExecutionId": "5d234639-2098-4725-8401-094ce8fa851b"
                  }
                },
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "1268a1ec-48a3-4dfd-8fc8-3c14d0fa7f28",
                    "type": "text/javascript",
                    "exec": [
                      ""
                    ],
                    "_lastExecutionId": "3e5db1d1-0c8c-4a29-8797-f14a01a4bedc"
                  }
                }
              ]
            },
            {
              "id": "93821c3b-e028-4eda-a749-05d87d7e6a94",
              "name": "change-password",
              "request": {
                "url": {
                  "path": [
                    "users",
                    "change-password"
                  ],
                  "host": [
                    "{{exp_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "accept",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n    \"currentPassword\":\"{{password}}\",\r\n    \"newPassword\":\"{{$randomPassword}}\"\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "auth": {
                  "type": "apikey",
                  "apikey": [
                    {
                      "type": "string",
                      "value": "{{exp_token}}",
                      "key": "value"
                    },
                    {
                      "type": "string",
                      "value": "x-auth-token",
                      "key": "key"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "3eca22f1-7d4a-4832-8b68-54badb876aa6",
                    "type": "text/javascript",
                    "exec": [
                      "pm.environment.get(\"password\");\r",
                      "\r",
                      "let newPassword = JSON.parse(pm.request.body.raw).newPassword;\r",
                      "pm.environment.set('password', newPassword);\r",
                      "\r",
                      "let jsonData = pm.response.json();\r",
                      "message = [\r",
                      "    \"The password has been successfully reset\",\r",
                      "    \"Token must be between 64 characters\",\r",
                      "    \"Bad Request\",\r",
                      "    \"The password was successfully updated\",\r",
                      "    \"Internal Error Server\",\r",
                      "    \"New password must be between 6 and 30 characters\",\r",
                      "    \"The password reset token is invalid or has expired\"\r",
                      "]\r",
                      "\r",
                      "status = [200,400,401,500]\r",
                      "\r",
                      "if (jsonData.success === false) {\r",
                      "    pm.test(`**** E R R O R ***** ${jsonData.message}`, function(){\r",
                      "        // pm.expect(jsonData.message).to.eql(\"No authentication token specified in x-auth-token header\");\r",
                      "        pm.expect(jsonData.message).to.be.oneOf(message);\r",
                      "    });\r",
                      "\r",
                      "    pm.test(`Check the multiple error status code ${jsonData.status}`, function(){\r",
                      "        pm.expect(pm.response.code).to.be.oneOf(status);\r",
                      "    });\r",
                      "\r",
                      "\r",
                      "}\r",
                      "else {\r",
                      "    pm.test(`*** S U C C E S S *** ${jsonData.message}`, function(){\r",
                      "        // pm.expect(jsonData.message).to.equal(\"Profile successful\");\r",
                      "        pm.expect(jsonData.message).to.be.oneOf(message);\r",
                      "    });\r",
                      "\r",
                      "    pm.test(\"Check the response time\", function(){\r",
                      "    pm.expect(pm.response.responseTime).to.be.below(6000);\r",
                      "    });\r",
                      "\r",
                      "    pm.test(`Check the Status code ${jsonData.status}`, function(){\r",
                      "        pm.expect(pm.response.code).to.be.oneOf(status);\r",
                      "    });\r",
                      "\r",
                      "    pm.test(\"Body matches multiple string\",function(){\r",
                      "    pm.expect(pm.response.text()).to.include(\"message\");\r",
                      "});\r",
                      "\r",
                      "}\r",
                      ""
                    ],
                    "_lastExecutionId": "64be3638-86ca-4200-b966-7a137b03eb2e"
                  }
                },
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "aa473681-09fc-4673-a2fe-7012cf4e42e9",
                    "type": "text/javascript",
                    "exec": [
                      "console.log(pm.environment.get(\"password\"));\r",
                      "\r",
                      "\r",
                      "\r",
                      ""
                    ],
                    "_lastExecutionId": "fb6fc291-ccb6-46ad-9bb8-0e4bf2cf736d"
                  }
                }
              ]
            },
            {
              "id": "f4c8e78d-5700-43a2-8e20-cb1a0de26ce9",
              "name": "UserLogout",
              "request": {
                "url": {
                  "path": [
                    "users",
                    "logout"
                  ],
                  "host": [
                    "{{exp_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "accept",
                    "value": "application/json"
                  }
                ],
                "method": "DELETE",
                "auth": {
                  "type": "apikey",
                  "apikey": [
                    {
                      "type": "string",
                      "value": "{{exp_token}}",
                      "key": "value"
                    },
                    {
                      "type": "string",
                      "value": "x-auth-token",
                      "key": "key"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "43a38bb6-0063-463b-9a7b-ea0674d209fe",
                    "type": "text/javascript",
                    "exec": [
                      "let jsonData = pm.response.json();\r",
                      "message = [\r",
                      "    \"User has been successfully logged out\",\r",
                      "    \"Token must be between 64 characters\",\r",
                      "    \"Bad Request\",\r",
                      "    \"Access token is not valid or has expired, you will need to login\",\r",
                      "    \"No authentication token specified in x-auth-token header\",\r",
                      "    \"Internal Error Server\",\r",
                      "    \"Successful Request\",\r",
                      "    \"Unauthorized Request\"\r",
                      "]\r",
                      "\r",
                      "status = [200,400,401,500]\r",
                      "\r",
                      "if (jsonData.success === false) {\r",
                      "    pm.test(`**** E R R O R ***** ${jsonData.message}`, function(){\r",
                      "        // pm.expect(jsonData.message).to.eql(\"No authentication token specified in x-auth-token header\");\r",
                      "        pm.expect(jsonData.message).to.be.oneOf(message);\r",
                      "    });\r",
                      "\r",
                      "    pm.test(`Check the multiple error status code ${jsonData.status}`, function(){\r",
                      "        pm.expect(pm.response.code).to.be.oneOf(status);\r",
                      "    });\r",
                      "\r",
                      "\r",
                      "}\r",
                      "else {\r",
                      "    pm.test(`*** S U C C E S S *** ${jsonData.message}`, function(){\r",
                      "        // pm.expect(jsonData.message).to.equal(\"Profile successful\");\r",
                      "        pm.expect(jsonData.message).to.be.oneOf(message);\r",
                      "    });\r",
                      "\r",
                      "    pm.test(\"Check the response time\", function(){\r",
                      "    pm.expect(pm.response.responseTime).to.be.below(6000);\r",
                      "    });\r",
                      "\r",
                      "    pm.test(`Check the Status code ${jsonData.status}`, function(){\r",
                      "        pm.expect(pm.response.code).to.be.oneOf(status);\r",
                      "    });\r",
                      "\r",
                      "    pm.test(\"Body matches multiple string\",function(){\r",
                      "    pm.expect(pm.response.text()).to.include(\"message\");\r",
                      "});\r",
                      "\r",
                      "}\r",
                      "\r",
                      "postman.setNextRequest(null);"
                    ],
                    "_lastExecutionId": "c7d982d4-a8dc-460f-a106-6e0c01643e82"
                  }
                },
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "e8ae662d-a080-4bf5-a817-754113435b5e",
                    "type": "text/javascript",
                    "exec": [
                      ""
                    ],
                    "_lastExecutionId": "0b0d404e-4117-40fc-9982-a95619506052"
                  }
                }
              ]
            }
          ],
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "3380df96-f386-44be-9dc8-eb145a929d13",
                "type": "text/javascript",
                "exec": [
                  ""
                ],
                "_lastExecutionId": "c2613397-fddf-4d46-99b6-9ffc9166e0a8"
              }
            },
            {
              "listen": "test",
              "script": {
                "id": "18c4e0bb-9477-4e5f-b627-d550e666c7d3",
                "type": "text/javascript",
                "exec": [
                  ""
                ],
                "_lastExecutionId": "78225eb1-cbe5-408b-978b-a1bf2d2b693c"
              }
            }
          ],
          "variable": [
            {
              "type": "string",
              "value": "https://practice.expandtesting.com/notes/api",
              "key": "exp_url"
            }
          ],
          "info": {
            "_postman_id": "723ea9c3-0635-4605-b90c-d6d9e9835d8c",
            "name": "expandtesting",
            "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
          }
        },
        "cursor": {
          "ref": "19928888-b432-4486-ae97-7400c57e5176",
          "length": 12,
          "cycles": 1,
          "position": 10,
          "iteration": 0,
          "httpRequestId": "02be1ec7-23b9-464d-8f88-b8051eeae762",
          "scriptId": "3eca22f1-7d4a-4832-8b68-54badb876aa6",
          "execution": "64be3638-86ca-4200-b966-7a137b03eb2e"
        }
      }
    ],
    "error": null
  }
}